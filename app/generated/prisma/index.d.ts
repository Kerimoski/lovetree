
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Connection
 * 
 */
export type Connection = $Result.DefaultSelection<Prisma.$ConnectionPayload>
/**
 * Model Tree
 * 
 */
export type Tree = $Result.DefaultSelection<Prisma.$TreePayload>
/**
 * Model Memory
 * 
 */
export type Memory = $Result.DefaultSelection<Prisma.$MemoryPayload>
/**
 * Model Note
 * 
 */
export type Note = $Result.DefaultSelection<Prisma.$NotePayload>
/**
 * Model SpecialDay
 * 
 */
export type SpecialDay = $Result.DefaultSelection<Prisma.$SpecialDayPayload>
/**
 * Model Goal
 * 
 */
export type Goal = $Result.DefaultSelection<Prisma.$GoalPayload>
/**
 * Model Dream
 * 
 */
export type Dream = $Result.DefaultSelection<Prisma.$DreamPayload>
/**
 * Model DreamComment
 * 
 */
export type DreamComment = $Result.DefaultSelection<Prisma.$DreamCommentPayload>
/**
 * Model Surprise
 * 
 */
export type Surprise = $Result.DefaultSelection<Prisma.$SurprisePayload>
/**
 * Model TimeCapsule
 * 
 */
export type TimeCapsule = $Result.DefaultSelection<Prisma.$TimeCapsulePayload>
/**
 * Model TimeCapsuleComment
 * 
 */
export type TimeCapsuleComment = $Result.DefaultSelection<Prisma.$TimeCapsuleCommentPayload>
/**
 * Model ChatMessage
 * 
 */
export type ChatMessage = $Result.DefaultSelection<Prisma.$ChatMessagePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const NotificationType: {
  SYSTEM: 'SYSTEM',
  SPECIAL_DAY: 'SPECIAL_DAY',
  NEW_MEMORY: 'NEW_MEMORY',
  NEW_NOTE: 'NEW_NOTE',
  PROMO: 'PROMO',
  APP_UPDATE: 'APP_UPDATE'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const DreamCategory: {
  TRAVEL: 'TRAVEL',
  HOME: 'HOME',
  FAMILY: 'FAMILY',
  CAREER: 'CAREER',
  ADVENTURE: 'ADVENTURE',
  RELATIONSHIP: 'RELATIONSHIP',
  FINANCE: 'FINANCE',
  HEALTH: 'HEALTH',
  OTHER: 'OTHER'
};

export type DreamCategory = (typeof DreamCategory)[keyof typeof DreamCategory]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type DreamCategory = $Enums.DreamCategory

export const DreamCategory: typeof $Enums.DreamCategory

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.connection`: Exposes CRUD operations for the **Connection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Connections
    * const connections = await prisma.connection.findMany()
    * ```
    */
  get connection(): Prisma.ConnectionDelegate<ExtArgs>;

  /**
   * `prisma.tree`: Exposes CRUD operations for the **Tree** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trees
    * const trees = await prisma.tree.findMany()
    * ```
    */
  get tree(): Prisma.TreeDelegate<ExtArgs>;

  /**
   * `prisma.memory`: Exposes CRUD operations for the **Memory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Memories
    * const memories = await prisma.memory.findMany()
    * ```
    */
  get memory(): Prisma.MemoryDelegate<ExtArgs>;

  /**
   * `prisma.note`: Exposes CRUD operations for the **Note** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notes
    * const notes = await prisma.note.findMany()
    * ```
    */
  get note(): Prisma.NoteDelegate<ExtArgs>;

  /**
   * `prisma.specialDay`: Exposes CRUD operations for the **SpecialDay** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SpecialDays
    * const specialDays = await prisma.specialDay.findMany()
    * ```
    */
  get specialDay(): Prisma.SpecialDayDelegate<ExtArgs>;

  /**
   * `prisma.goal`: Exposes CRUD operations for the **Goal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Goals
    * const goals = await prisma.goal.findMany()
    * ```
    */
  get goal(): Prisma.GoalDelegate<ExtArgs>;

  /**
   * `prisma.dream`: Exposes CRUD operations for the **Dream** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dreams
    * const dreams = await prisma.dream.findMany()
    * ```
    */
  get dream(): Prisma.DreamDelegate<ExtArgs>;

  /**
   * `prisma.dreamComment`: Exposes CRUD operations for the **DreamComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DreamComments
    * const dreamComments = await prisma.dreamComment.findMany()
    * ```
    */
  get dreamComment(): Prisma.DreamCommentDelegate<ExtArgs>;

  /**
   * `prisma.surprise`: Exposes CRUD operations for the **Surprise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Surprises
    * const surprises = await prisma.surprise.findMany()
    * ```
    */
  get surprise(): Prisma.SurpriseDelegate<ExtArgs>;

  /**
   * `prisma.timeCapsule`: Exposes CRUD operations for the **TimeCapsule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TimeCapsules
    * const timeCapsules = await prisma.timeCapsule.findMany()
    * ```
    */
  get timeCapsule(): Prisma.TimeCapsuleDelegate<ExtArgs>;

  /**
   * `prisma.timeCapsuleComment`: Exposes CRUD operations for the **TimeCapsuleComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TimeCapsuleComments
    * const timeCapsuleComments = await prisma.timeCapsuleComment.findMany()
    * ```
    */
  get timeCapsuleComment(): Prisma.TimeCapsuleCommentDelegate<ExtArgs>;

  /**
   * `prisma.chatMessage`: Exposes CRUD operations for the **ChatMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatMessages
    * const chatMessages = await prisma.chatMessage.findMany()
    * ```
    */
  get chatMessage(): Prisma.ChatMessageDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Notification: 'Notification',
    Connection: 'Connection',
    Tree: 'Tree',
    Memory: 'Memory',
    Note: 'Note',
    SpecialDay: 'SpecialDay',
    Goal: 'Goal',
    Dream: 'Dream',
    DreamComment: 'DreamComment',
    Surprise: 'Surprise',
    TimeCapsule: 'TimeCapsule',
    TimeCapsuleComment: 'TimeCapsuleComment',
    ChatMessage: 'ChatMessage'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "notification" | "connection" | "tree" | "memory" | "note" | "specialDay" | "goal" | "dream" | "dreamComment" | "surprise" | "timeCapsule" | "timeCapsuleComment" | "chatMessage"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Connection: {
        payload: Prisma.$ConnectionPayload<ExtArgs>
        fields: Prisma.ConnectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConnectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConnectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>
          }
          findFirst: {
            args: Prisma.ConnectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConnectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>
          }
          findMany: {
            args: Prisma.ConnectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>[]
          }
          create: {
            args: Prisma.ConnectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>
          }
          createMany: {
            args: Prisma.ConnectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConnectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>[]
          }
          delete: {
            args: Prisma.ConnectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>
          }
          update: {
            args: Prisma.ConnectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>
          }
          deleteMany: {
            args: Prisma.ConnectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConnectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ConnectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>
          }
          aggregate: {
            args: Prisma.ConnectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConnection>
          }
          groupBy: {
            args: Prisma.ConnectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConnectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConnectionCountArgs<ExtArgs>
            result: $Utils.Optional<ConnectionCountAggregateOutputType> | number
          }
        }
      }
      Tree: {
        payload: Prisma.$TreePayload<ExtArgs>
        fields: Prisma.TreeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TreeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TreeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreePayload>
          }
          findFirst: {
            args: Prisma.TreeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TreeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreePayload>
          }
          findMany: {
            args: Prisma.TreeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreePayload>[]
          }
          create: {
            args: Prisma.TreeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreePayload>
          }
          createMany: {
            args: Prisma.TreeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TreeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreePayload>[]
          }
          delete: {
            args: Prisma.TreeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreePayload>
          }
          update: {
            args: Prisma.TreeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreePayload>
          }
          deleteMany: {
            args: Prisma.TreeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TreeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TreeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreePayload>
          }
          aggregate: {
            args: Prisma.TreeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTree>
          }
          groupBy: {
            args: Prisma.TreeGroupByArgs<ExtArgs>
            result: $Utils.Optional<TreeGroupByOutputType>[]
          }
          count: {
            args: Prisma.TreeCountArgs<ExtArgs>
            result: $Utils.Optional<TreeCountAggregateOutputType> | number
          }
        }
      }
      Memory: {
        payload: Prisma.$MemoryPayload<ExtArgs>
        fields: Prisma.MemoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MemoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MemoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemoryPayload>
          }
          findFirst: {
            args: Prisma.MemoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MemoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemoryPayload>
          }
          findMany: {
            args: Prisma.MemoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemoryPayload>[]
          }
          create: {
            args: Prisma.MemoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemoryPayload>
          }
          createMany: {
            args: Prisma.MemoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MemoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemoryPayload>[]
          }
          delete: {
            args: Prisma.MemoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemoryPayload>
          }
          update: {
            args: Prisma.MemoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemoryPayload>
          }
          deleteMany: {
            args: Prisma.MemoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MemoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MemoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemoryPayload>
          }
          aggregate: {
            args: Prisma.MemoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMemory>
          }
          groupBy: {
            args: Prisma.MemoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<MemoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.MemoryCountArgs<ExtArgs>
            result: $Utils.Optional<MemoryCountAggregateOutputType> | number
          }
        }
      }
      Note: {
        payload: Prisma.$NotePayload<ExtArgs>
        fields: Prisma.NoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findFirst: {
            args: Prisma.NoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findMany: {
            args: Prisma.NoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          create: {
            args: Prisma.NoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          createMany: {
            args: Prisma.NoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          delete: {
            args: Prisma.NoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          update: {
            args: Prisma.NoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          deleteMany: {
            args: Prisma.NoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          aggregate: {
            args: Prisma.NoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNote>
          }
          groupBy: {
            args: Prisma.NoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<NoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.NoteCountArgs<ExtArgs>
            result: $Utils.Optional<NoteCountAggregateOutputType> | number
          }
        }
      }
      SpecialDay: {
        payload: Prisma.$SpecialDayPayload<ExtArgs>
        fields: Prisma.SpecialDayFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SpecialDayFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecialDayPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SpecialDayFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecialDayPayload>
          }
          findFirst: {
            args: Prisma.SpecialDayFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecialDayPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SpecialDayFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecialDayPayload>
          }
          findMany: {
            args: Prisma.SpecialDayFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecialDayPayload>[]
          }
          create: {
            args: Prisma.SpecialDayCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecialDayPayload>
          }
          createMany: {
            args: Prisma.SpecialDayCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SpecialDayCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecialDayPayload>[]
          }
          delete: {
            args: Prisma.SpecialDayDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecialDayPayload>
          }
          update: {
            args: Prisma.SpecialDayUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecialDayPayload>
          }
          deleteMany: {
            args: Prisma.SpecialDayDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SpecialDayUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SpecialDayUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecialDayPayload>
          }
          aggregate: {
            args: Prisma.SpecialDayAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSpecialDay>
          }
          groupBy: {
            args: Prisma.SpecialDayGroupByArgs<ExtArgs>
            result: $Utils.Optional<SpecialDayGroupByOutputType>[]
          }
          count: {
            args: Prisma.SpecialDayCountArgs<ExtArgs>
            result: $Utils.Optional<SpecialDayCountAggregateOutputType> | number
          }
        }
      }
      Goal: {
        payload: Prisma.$GoalPayload<ExtArgs>
        fields: Prisma.GoalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GoalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GoalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          findFirst: {
            args: Prisma.GoalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GoalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          findMany: {
            args: Prisma.GoalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>[]
          }
          create: {
            args: Prisma.GoalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          createMany: {
            args: Prisma.GoalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GoalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>[]
          }
          delete: {
            args: Prisma.GoalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          update: {
            args: Prisma.GoalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          deleteMany: {
            args: Prisma.GoalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GoalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GoalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          aggregate: {
            args: Prisma.GoalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGoal>
          }
          groupBy: {
            args: Prisma.GoalGroupByArgs<ExtArgs>
            result: $Utils.Optional<GoalGroupByOutputType>[]
          }
          count: {
            args: Prisma.GoalCountArgs<ExtArgs>
            result: $Utils.Optional<GoalCountAggregateOutputType> | number
          }
        }
      }
      Dream: {
        payload: Prisma.$DreamPayload<ExtArgs>
        fields: Prisma.DreamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DreamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DreamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DreamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DreamPayload>
          }
          findFirst: {
            args: Prisma.DreamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DreamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DreamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DreamPayload>
          }
          findMany: {
            args: Prisma.DreamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DreamPayload>[]
          }
          create: {
            args: Prisma.DreamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DreamPayload>
          }
          createMany: {
            args: Prisma.DreamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DreamCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DreamPayload>[]
          }
          delete: {
            args: Prisma.DreamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DreamPayload>
          }
          update: {
            args: Prisma.DreamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DreamPayload>
          }
          deleteMany: {
            args: Prisma.DreamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DreamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DreamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DreamPayload>
          }
          aggregate: {
            args: Prisma.DreamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDream>
          }
          groupBy: {
            args: Prisma.DreamGroupByArgs<ExtArgs>
            result: $Utils.Optional<DreamGroupByOutputType>[]
          }
          count: {
            args: Prisma.DreamCountArgs<ExtArgs>
            result: $Utils.Optional<DreamCountAggregateOutputType> | number
          }
        }
      }
      DreamComment: {
        payload: Prisma.$DreamCommentPayload<ExtArgs>
        fields: Prisma.DreamCommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DreamCommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DreamCommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DreamCommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DreamCommentPayload>
          }
          findFirst: {
            args: Prisma.DreamCommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DreamCommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DreamCommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DreamCommentPayload>
          }
          findMany: {
            args: Prisma.DreamCommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DreamCommentPayload>[]
          }
          create: {
            args: Prisma.DreamCommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DreamCommentPayload>
          }
          createMany: {
            args: Prisma.DreamCommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DreamCommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DreamCommentPayload>[]
          }
          delete: {
            args: Prisma.DreamCommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DreamCommentPayload>
          }
          update: {
            args: Prisma.DreamCommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DreamCommentPayload>
          }
          deleteMany: {
            args: Prisma.DreamCommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DreamCommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DreamCommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DreamCommentPayload>
          }
          aggregate: {
            args: Prisma.DreamCommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDreamComment>
          }
          groupBy: {
            args: Prisma.DreamCommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DreamCommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DreamCommentCountArgs<ExtArgs>
            result: $Utils.Optional<DreamCommentCountAggregateOutputType> | number
          }
        }
      }
      Surprise: {
        payload: Prisma.$SurprisePayload<ExtArgs>
        fields: Prisma.SurpriseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SurpriseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurprisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SurpriseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurprisePayload>
          }
          findFirst: {
            args: Prisma.SurpriseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurprisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SurpriseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurprisePayload>
          }
          findMany: {
            args: Prisma.SurpriseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurprisePayload>[]
          }
          create: {
            args: Prisma.SurpriseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurprisePayload>
          }
          createMany: {
            args: Prisma.SurpriseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SurpriseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurprisePayload>[]
          }
          delete: {
            args: Prisma.SurpriseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurprisePayload>
          }
          update: {
            args: Prisma.SurpriseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurprisePayload>
          }
          deleteMany: {
            args: Prisma.SurpriseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SurpriseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SurpriseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurprisePayload>
          }
          aggregate: {
            args: Prisma.SurpriseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSurprise>
          }
          groupBy: {
            args: Prisma.SurpriseGroupByArgs<ExtArgs>
            result: $Utils.Optional<SurpriseGroupByOutputType>[]
          }
          count: {
            args: Prisma.SurpriseCountArgs<ExtArgs>
            result: $Utils.Optional<SurpriseCountAggregateOutputType> | number
          }
        }
      }
      TimeCapsule: {
        payload: Prisma.$TimeCapsulePayload<ExtArgs>
        fields: Prisma.TimeCapsuleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TimeCapsuleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCapsulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TimeCapsuleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCapsulePayload>
          }
          findFirst: {
            args: Prisma.TimeCapsuleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCapsulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TimeCapsuleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCapsulePayload>
          }
          findMany: {
            args: Prisma.TimeCapsuleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCapsulePayload>[]
          }
          create: {
            args: Prisma.TimeCapsuleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCapsulePayload>
          }
          createMany: {
            args: Prisma.TimeCapsuleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TimeCapsuleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCapsulePayload>[]
          }
          delete: {
            args: Prisma.TimeCapsuleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCapsulePayload>
          }
          update: {
            args: Prisma.TimeCapsuleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCapsulePayload>
          }
          deleteMany: {
            args: Prisma.TimeCapsuleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TimeCapsuleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TimeCapsuleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCapsulePayload>
          }
          aggregate: {
            args: Prisma.TimeCapsuleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTimeCapsule>
          }
          groupBy: {
            args: Prisma.TimeCapsuleGroupByArgs<ExtArgs>
            result: $Utils.Optional<TimeCapsuleGroupByOutputType>[]
          }
          count: {
            args: Prisma.TimeCapsuleCountArgs<ExtArgs>
            result: $Utils.Optional<TimeCapsuleCountAggregateOutputType> | number
          }
        }
      }
      TimeCapsuleComment: {
        payload: Prisma.$TimeCapsuleCommentPayload<ExtArgs>
        fields: Prisma.TimeCapsuleCommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TimeCapsuleCommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCapsuleCommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TimeCapsuleCommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCapsuleCommentPayload>
          }
          findFirst: {
            args: Prisma.TimeCapsuleCommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCapsuleCommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TimeCapsuleCommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCapsuleCommentPayload>
          }
          findMany: {
            args: Prisma.TimeCapsuleCommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCapsuleCommentPayload>[]
          }
          create: {
            args: Prisma.TimeCapsuleCommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCapsuleCommentPayload>
          }
          createMany: {
            args: Prisma.TimeCapsuleCommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TimeCapsuleCommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCapsuleCommentPayload>[]
          }
          delete: {
            args: Prisma.TimeCapsuleCommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCapsuleCommentPayload>
          }
          update: {
            args: Prisma.TimeCapsuleCommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCapsuleCommentPayload>
          }
          deleteMany: {
            args: Prisma.TimeCapsuleCommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TimeCapsuleCommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TimeCapsuleCommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCapsuleCommentPayload>
          }
          aggregate: {
            args: Prisma.TimeCapsuleCommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTimeCapsuleComment>
          }
          groupBy: {
            args: Prisma.TimeCapsuleCommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<TimeCapsuleCommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.TimeCapsuleCommentCountArgs<ExtArgs>
            result: $Utils.Optional<TimeCapsuleCommentCountAggregateOutputType> | number
          }
        }
      }
      ChatMessage: {
        payload: Prisma.$ChatMessagePayload<ExtArgs>
        fields: Prisma.ChatMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findFirst: {
            args: Prisma.ChatMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findMany: {
            args: Prisma.ChatMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          create: {
            args: Prisma.ChatMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          createMany: {
            args: Prisma.ChatMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          delete: {
            args: Prisma.ChatMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          update: {
            args: Prisma.ChatMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          deleteMany: {
            args: Prisma.ChatMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChatMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          aggregate: {
            args: Prisma.ChatMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatMessage>
          }
          groupBy: {
            args: Prisma.ChatMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatMessageCountArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    connections: number
    pairedWith: number
    memories: number
    notes: number
    specialDays: number
    goals: number
    dreams: number
    comments: number
    receivedNotifications: number
    surprises: number
    timeCapsules: number
    timeCapsuleComments: number
    chatMessages: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    connections?: boolean | UserCountOutputTypeCountConnectionsArgs
    pairedWith?: boolean | UserCountOutputTypeCountPairedWithArgs
    memories?: boolean | UserCountOutputTypeCountMemoriesArgs
    notes?: boolean | UserCountOutputTypeCountNotesArgs
    specialDays?: boolean | UserCountOutputTypeCountSpecialDaysArgs
    goals?: boolean | UserCountOutputTypeCountGoalsArgs
    dreams?: boolean | UserCountOutputTypeCountDreamsArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    receivedNotifications?: boolean | UserCountOutputTypeCountReceivedNotificationsArgs
    surprises?: boolean | UserCountOutputTypeCountSurprisesArgs
    timeCapsules?: boolean | UserCountOutputTypeCountTimeCapsulesArgs
    timeCapsuleComments?: boolean | UserCountOutputTypeCountTimeCapsuleCommentsArgs
    chatMessages?: boolean | UserCountOutputTypeCountChatMessagesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountConnectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConnectionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPairedWithArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConnectionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMemoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSpecialDaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpecialDayWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDreamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DreamWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DreamCommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSurprisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurpriseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTimeCapsulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimeCapsuleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTimeCapsuleCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimeCapsuleCommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
  }


  /**
   * Count Type ConnectionCountOutputType
   */

  export type ConnectionCountOutputType = {
    memories: number
    notes: number
    specialDays: number
    goals: number
    dreams: number
    surprises: number
    timeCapsules: number
    chatMessages: number
  }

  export type ConnectionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    memories?: boolean | ConnectionCountOutputTypeCountMemoriesArgs
    notes?: boolean | ConnectionCountOutputTypeCountNotesArgs
    specialDays?: boolean | ConnectionCountOutputTypeCountSpecialDaysArgs
    goals?: boolean | ConnectionCountOutputTypeCountGoalsArgs
    dreams?: boolean | ConnectionCountOutputTypeCountDreamsArgs
    surprises?: boolean | ConnectionCountOutputTypeCountSurprisesArgs
    timeCapsules?: boolean | ConnectionCountOutputTypeCountTimeCapsulesArgs
    chatMessages?: boolean | ConnectionCountOutputTypeCountChatMessagesArgs
  }

  // Custom InputTypes
  /**
   * ConnectionCountOutputType without action
   */
  export type ConnectionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConnectionCountOutputType
     */
    select?: ConnectionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ConnectionCountOutputType without action
   */
  export type ConnectionCountOutputTypeCountMemoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemoryWhereInput
  }

  /**
   * ConnectionCountOutputType without action
   */
  export type ConnectionCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
  }

  /**
   * ConnectionCountOutputType without action
   */
  export type ConnectionCountOutputTypeCountSpecialDaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpecialDayWhereInput
  }

  /**
   * ConnectionCountOutputType without action
   */
  export type ConnectionCountOutputTypeCountGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
  }

  /**
   * ConnectionCountOutputType without action
   */
  export type ConnectionCountOutputTypeCountDreamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DreamWhereInput
  }

  /**
   * ConnectionCountOutputType without action
   */
  export type ConnectionCountOutputTypeCountSurprisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurpriseWhereInput
  }

  /**
   * ConnectionCountOutputType without action
   */
  export type ConnectionCountOutputTypeCountTimeCapsulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimeCapsuleWhereInput
  }

  /**
   * ConnectionCountOutputType without action
   */
  export type ConnectionCountOutputTypeCountChatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
  }


  /**
   * Count Type DreamCountOutputType
   */

  export type DreamCountOutputType = {
    comments: number
  }

  export type DreamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | DreamCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * DreamCountOutputType without action
   */
  export type DreamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DreamCountOutputType
     */
    select?: DreamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DreamCountOutputType without action
   */
  export type DreamCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DreamCommentWhereInput
  }


  /**
   * Count Type TimeCapsuleCountOutputType
   */

  export type TimeCapsuleCountOutputType = {
    comments: number
  }

  export type TimeCapsuleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | TimeCapsuleCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * TimeCapsuleCountOutputType without action
   */
  export type TimeCapsuleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsuleCountOutputType
     */
    select?: TimeCapsuleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TimeCapsuleCountOutputType without action
   */
  export type TimeCapsuleCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimeCapsuleCommentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    image: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
    role: $Enums.UserRole | null
    fcmToken: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    image: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
    role: $Enums.UserRole | null
    fcmToken: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    image: number
    password: number
    createdAt: number
    updatedAt: number
    role: number
    fcmToken: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    image?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    role?: true
    fcmToken?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    image?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    role?: true
    fcmToken?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    image?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    role?: true
    fcmToken?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string | null
    image: string | null
    password: string | null
    createdAt: Date
    updatedAt: Date
    role: $Enums.UserRole
    fcmToken: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    image?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean
    fcmToken?: boolean
    connections?: boolean | User$connectionsArgs<ExtArgs>
    pairedWith?: boolean | User$pairedWithArgs<ExtArgs>
    memories?: boolean | User$memoriesArgs<ExtArgs>
    notes?: boolean | User$notesArgs<ExtArgs>
    specialDays?: boolean | User$specialDaysArgs<ExtArgs>
    goals?: boolean | User$goalsArgs<ExtArgs>
    dreams?: boolean | User$dreamsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    receivedNotifications?: boolean | User$receivedNotificationsArgs<ExtArgs>
    surprises?: boolean | User$surprisesArgs<ExtArgs>
    timeCapsules?: boolean | User$timeCapsulesArgs<ExtArgs>
    timeCapsuleComments?: boolean | User$timeCapsuleCommentsArgs<ExtArgs>
    chatMessages?: boolean | User$chatMessagesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    image?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean
    fcmToken?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    image?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean
    fcmToken?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    connections?: boolean | User$connectionsArgs<ExtArgs>
    pairedWith?: boolean | User$pairedWithArgs<ExtArgs>
    memories?: boolean | User$memoriesArgs<ExtArgs>
    notes?: boolean | User$notesArgs<ExtArgs>
    specialDays?: boolean | User$specialDaysArgs<ExtArgs>
    goals?: boolean | User$goalsArgs<ExtArgs>
    dreams?: boolean | User$dreamsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    receivedNotifications?: boolean | User$receivedNotificationsArgs<ExtArgs>
    surprises?: boolean | User$surprisesArgs<ExtArgs>
    timeCapsules?: boolean | User$timeCapsulesArgs<ExtArgs>
    timeCapsuleComments?: boolean | User$timeCapsuleCommentsArgs<ExtArgs>
    chatMessages?: boolean | User$chatMessagesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      connections: Prisma.$ConnectionPayload<ExtArgs>[]
      pairedWith: Prisma.$ConnectionPayload<ExtArgs>[]
      memories: Prisma.$MemoryPayload<ExtArgs>[]
      notes: Prisma.$NotePayload<ExtArgs>[]
      specialDays: Prisma.$SpecialDayPayload<ExtArgs>[]
      goals: Prisma.$GoalPayload<ExtArgs>[]
      dreams: Prisma.$DreamPayload<ExtArgs>[]
      comments: Prisma.$DreamCommentPayload<ExtArgs>[]
      receivedNotifications: Prisma.$NotificationPayload<ExtArgs>[]
      surprises: Prisma.$SurprisePayload<ExtArgs>[]
      timeCapsules: Prisma.$TimeCapsulePayload<ExtArgs>[]
      timeCapsuleComments: Prisma.$TimeCapsuleCommentPayload<ExtArgs>[]
      chatMessages: Prisma.$ChatMessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string | null
      image: string | null
      password: string | null
      createdAt: Date
      updatedAt: Date
      role: $Enums.UserRole
      fcmToken: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    connections<T extends User$connectionsArgs<ExtArgs> = {}>(args?: Subset<T, User$connectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "findMany"> | Null>
    pairedWith<T extends User$pairedWithArgs<ExtArgs> = {}>(args?: Subset<T, User$pairedWithArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "findMany"> | Null>
    memories<T extends User$memoriesArgs<ExtArgs> = {}>(args?: Subset<T, User$memoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "findMany"> | Null>
    notes<T extends User$notesArgs<ExtArgs> = {}>(args?: Subset<T, User$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany"> | Null>
    specialDays<T extends User$specialDaysArgs<ExtArgs> = {}>(args?: Subset<T, User$specialDaysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpecialDayPayload<ExtArgs>, T, "findMany"> | Null>
    goals<T extends User$goalsArgs<ExtArgs> = {}>(args?: Subset<T, User$goalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany"> | Null>
    dreams<T extends User$dreamsArgs<ExtArgs> = {}>(args?: Subset<T, User$dreamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DreamPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DreamCommentPayload<ExtArgs>, T, "findMany"> | Null>
    receivedNotifications<T extends User$receivedNotificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedNotificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    surprises<T extends User$surprisesArgs<ExtArgs> = {}>(args?: Subset<T, User$surprisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurprisePayload<ExtArgs>, T, "findMany"> | Null>
    timeCapsules<T extends User$timeCapsulesArgs<ExtArgs> = {}>(args?: Subset<T, User$timeCapsulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeCapsulePayload<ExtArgs>, T, "findMany"> | Null>
    timeCapsuleComments<T extends User$timeCapsuleCommentsArgs<ExtArgs> = {}>(args?: Subset<T, User$timeCapsuleCommentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeCapsuleCommentPayload<ExtArgs>, T, "findMany"> | Null>
    chatMessages<T extends User$chatMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$chatMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly image: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly fcmToken: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.connections
   */
  export type User$connectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
    where?: ConnectionWhereInput
    orderBy?: ConnectionOrderByWithRelationInput | ConnectionOrderByWithRelationInput[]
    cursor?: ConnectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConnectionScalarFieldEnum | ConnectionScalarFieldEnum[]
  }

  /**
   * User.pairedWith
   */
  export type User$pairedWithArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
    where?: ConnectionWhereInput
    orderBy?: ConnectionOrderByWithRelationInput | ConnectionOrderByWithRelationInput[]
    cursor?: ConnectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConnectionScalarFieldEnum | ConnectionScalarFieldEnum[]
  }

  /**
   * User.memories
   */
  export type User$memoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Memory
     */
    select?: MemorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryInclude<ExtArgs> | null
    where?: MemoryWhereInput
    orderBy?: MemoryOrderByWithRelationInput | MemoryOrderByWithRelationInput[]
    cursor?: MemoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MemoryScalarFieldEnum | MemoryScalarFieldEnum[]
  }

  /**
   * User.notes
   */
  export type User$notesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * User.specialDays
   */
  export type User$specialDaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialDay
     */
    select?: SpecialDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialDayInclude<ExtArgs> | null
    where?: SpecialDayWhereInput
    orderBy?: SpecialDayOrderByWithRelationInput | SpecialDayOrderByWithRelationInput[]
    cursor?: SpecialDayWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpecialDayScalarFieldEnum | SpecialDayScalarFieldEnum[]
  }

  /**
   * User.goals
   */
  export type User$goalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    where?: GoalWhereInput
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    cursor?: GoalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * User.dreams
   */
  export type User$dreamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dream
     */
    select?: DreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamInclude<ExtArgs> | null
    where?: DreamWhereInput
    orderBy?: DreamOrderByWithRelationInput | DreamOrderByWithRelationInput[]
    cursor?: DreamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DreamScalarFieldEnum | DreamScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DreamComment
     */
    select?: DreamCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamCommentInclude<ExtArgs> | null
    where?: DreamCommentWhereInput
    orderBy?: DreamCommentOrderByWithRelationInput | DreamCommentOrderByWithRelationInput[]
    cursor?: DreamCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DreamCommentScalarFieldEnum | DreamCommentScalarFieldEnum[]
  }

  /**
   * User.receivedNotifications
   */
  export type User$receivedNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.surprises
   */
  export type User$surprisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surprise
     */
    select?: SurpriseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurpriseInclude<ExtArgs> | null
    where?: SurpriseWhereInput
    orderBy?: SurpriseOrderByWithRelationInput | SurpriseOrderByWithRelationInput[]
    cursor?: SurpriseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SurpriseScalarFieldEnum | SurpriseScalarFieldEnum[]
  }

  /**
   * User.timeCapsules
   */
  export type User$timeCapsulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsule
     */
    select?: TimeCapsuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleInclude<ExtArgs> | null
    where?: TimeCapsuleWhereInput
    orderBy?: TimeCapsuleOrderByWithRelationInput | TimeCapsuleOrderByWithRelationInput[]
    cursor?: TimeCapsuleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimeCapsuleScalarFieldEnum | TimeCapsuleScalarFieldEnum[]
  }

  /**
   * User.timeCapsuleComments
   */
  export type User$timeCapsuleCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsuleComment
     */
    select?: TimeCapsuleCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleCommentInclude<ExtArgs> | null
    where?: TimeCapsuleCommentWhereInput
    orderBy?: TimeCapsuleCommentOrderByWithRelationInput | TimeCapsuleCommentOrderByWithRelationInput[]
    cursor?: TimeCapsuleCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimeCapsuleCommentScalarFieldEnum | TimeCapsuleCommentScalarFieldEnum[]
  }

  /**
   * User.chatMessages
   */
  export type User$chatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    cursor?: ChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    title: string | null
    body: string | null
    type: $Enums.NotificationType | null
    isRead: boolean | null
    createdAt: Date | null
    sentAt: Date | null
    userId: string | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    title: string | null
    body: string | null
    type: $Enums.NotificationType | null
    isRead: boolean | null
    createdAt: Date | null
    sentAt: Date | null
    userId: string | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    title: number
    body: number
    type: number
    isRead: number
    data: number
    createdAt: number
    sentAt: number
    userId: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    title?: true
    body?: true
    type?: true
    isRead?: true
    createdAt?: true
    sentAt?: true
    userId?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    title?: true
    body?: true
    type?: true
    isRead?: true
    createdAt?: true
    sentAt?: true
    userId?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    title?: true
    body?: true
    type?: true
    isRead?: true
    data?: true
    createdAt?: true
    sentAt?: true
    userId?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    title: string
    body: string
    type: $Enums.NotificationType
    isRead: boolean
    data: JsonValue | null
    createdAt: Date
    sentAt: Date | null
    userId: string
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    body?: boolean
    type?: boolean
    isRead?: boolean
    data?: boolean
    createdAt?: boolean
    sentAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    body?: boolean
    type?: boolean
    isRead?: boolean
    data?: boolean
    createdAt?: boolean
    sentAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    title?: boolean
    body?: boolean
    type?: boolean
    isRead?: boolean
    data?: boolean
    createdAt?: boolean
    sentAt?: boolean
    userId?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      body: string
      type: $Enums.NotificationType
      isRead: boolean
      data: Prisma.JsonValue | null
      createdAt: Date
      sentAt: Date | null
      userId: string
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly body: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly data: FieldRef<"Notification", 'Json'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly sentAt: FieldRef<"Notification", 'DateTime'>
    readonly userId: FieldRef<"Notification", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model Connection
   */

  export type AggregateConnection = {
    _count: ConnectionCountAggregateOutputType | null
    _min: ConnectionMinAggregateOutputType | null
    _max: ConnectionMaxAggregateOutputType | null
  }

  export type ConnectionMinAggregateOutputType = {
    id: string | null
    connectionCode: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    pairedWithId: string | null
  }

  export type ConnectionMaxAggregateOutputType = {
    id: string | null
    connectionCode: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    pairedWithId: string | null
  }

  export type ConnectionCountAggregateOutputType = {
    id: number
    connectionCode: number
    createdAt: number
    updatedAt: number
    userId: number
    pairedWithId: number
    _all: number
  }


  export type ConnectionMinAggregateInputType = {
    id?: true
    connectionCode?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    pairedWithId?: true
  }

  export type ConnectionMaxAggregateInputType = {
    id?: true
    connectionCode?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    pairedWithId?: true
  }

  export type ConnectionCountAggregateInputType = {
    id?: true
    connectionCode?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    pairedWithId?: true
    _all?: true
  }

  export type ConnectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Connection to aggregate.
     */
    where?: ConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Connections to fetch.
     */
    orderBy?: ConnectionOrderByWithRelationInput | ConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Connections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Connections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Connections
    **/
    _count?: true | ConnectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConnectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConnectionMaxAggregateInputType
  }

  export type GetConnectionAggregateType<T extends ConnectionAggregateArgs> = {
        [P in keyof T & keyof AggregateConnection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConnection[P]>
      : GetScalarType<T[P], AggregateConnection[P]>
  }




  export type ConnectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConnectionWhereInput
    orderBy?: ConnectionOrderByWithAggregationInput | ConnectionOrderByWithAggregationInput[]
    by: ConnectionScalarFieldEnum[] | ConnectionScalarFieldEnum
    having?: ConnectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConnectionCountAggregateInputType | true
    _min?: ConnectionMinAggregateInputType
    _max?: ConnectionMaxAggregateInputType
  }

  export type ConnectionGroupByOutputType = {
    id: string
    connectionCode: string
    createdAt: Date
    updatedAt: Date
    userId: string
    pairedWithId: string | null
    _count: ConnectionCountAggregateOutputType | null
    _min: ConnectionMinAggregateOutputType | null
    _max: ConnectionMaxAggregateOutputType | null
  }

  type GetConnectionGroupByPayload<T extends ConnectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConnectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConnectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConnectionGroupByOutputType[P]>
            : GetScalarType<T[P], ConnectionGroupByOutputType[P]>
        }
      >
    >


  export type ConnectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    connectionCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    pairedWithId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    pairedWith?: boolean | Connection$pairedWithArgs<ExtArgs>
    memories?: boolean | Connection$memoriesArgs<ExtArgs>
    notes?: boolean | Connection$notesArgs<ExtArgs>
    specialDays?: boolean | Connection$specialDaysArgs<ExtArgs>
    goals?: boolean | Connection$goalsArgs<ExtArgs>
    dreams?: boolean | Connection$dreamsArgs<ExtArgs>
    tree?: boolean | Connection$treeArgs<ExtArgs>
    surprises?: boolean | Connection$surprisesArgs<ExtArgs>
    timeCapsules?: boolean | Connection$timeCapsulesArgs<ExtArgs>
    chatMessages?: boolean | Connection$chatMessagesArgs<ExtArgs>
    _count?: boolean | ConnectionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["connection"]>

  export type ConnectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    connectionCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    pairedWithId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    pairedWith?: boolean | Connection$pairedWithArgs<ExtArgs>
  }, ExtArgs["result"]["connection"]>

  export type ConnectionSelectScalar = {
    id?: boolean
    connectionCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    pairedWithId?: boolean
  }

  export type ConnectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    pairedWith?: boolean | Connection$pairedWithArgs<ExtArgs>
    memories?: boolean | Connection$memoriesArgs<ExtArgs>
    notes?: boolean | Connection$notesArgs<ExtArgs>
    specialDays?: boolean | Connection$specialDaysArgs<ExtArgs>
    goals?: boolean | Connection$goalsArgs<ExtArgs>
    dreams?: boolean | Connection$dreamsArgs<ExtArgs>
    tree?: boolean | Connection$treeArgs<ExtArgs>
    surprises?: boolean | Connection$surprisesArgs<ExtArgs>
    timeCapsules?: boolean | Connection$timeCapsulesArgs<ExtArgs>
    chatMessages?: boolean | Connection$chatMessagesArgs<ExtArgs>
    _count?: boolean | ConnectionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ConnectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    pairedWith?: boolean | Connection$pairedWithArgs<ExtArgs>
  }

  export type $ConnectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Connection"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      pairedWith: Prisma.$UserPayload<ExtArgs> | null
      memories: Prisma.$MemoryPayload<ExtArgs>[]
      notes: Prisma.$NotePayload<ExtArgs>[]
      specialDays: Prisma.$SpecialDayPayload<ExtArgs>[]
      goals: Prisma.$GoalPayload<ExtArgs>[]
      dreams: Prisma.$DreamPayload<ExtArgs>[]
      tree: Prisma.$TreePayload<ExtArgs> | null
      surprises: Prisma.$SurprisePayload<ExtArgs>[]
      timeCapsules: Prisma.$TimeCapsulePayload<ExtArgs>[]
      chatMessages: Prisma.$ChatMessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      connectionCode: string
      createdAt: Date
      updatedAt: Date
      userId: string
      pairedWithId: string | null
    }, ExtArgs["result"]["connection"]>
    composites: {}
  }

  type ConnectionGetPayload<S extends boolean | null | undefined | ConnectionDefaultArgs> = $Result.GetResult<Prisma.$ConnectionPayload, S>

  type ConnectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConnectionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConnectionCountAggregateInputType | true
    }

  export interface ConnectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Connection'], meta: { name: 'Connection' } }
    /**
     * Find zero or one Connection that matches the filter.
     * @param {ConnectionFindUniqueArgs} args - Arguments to find a Connection
     * @example
     * // Get one Connection
     * const connection = await prisma.connection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConnectionFindUniqueArgs>(args: SelectSubset<T, ConnectionFindUniqueArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Connection that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ConnectionFindUniqueOrThrowArgs} args - Arguments to find a Connection
     * @example
     * // Get one Connection
     * const connection = await prisma.connection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConnectionFindUniqueOrThrowArgs>(args: SelectSubset<T, ConnectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Connection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionFindFirstArgs} args - Arguments to find a Connection
     * @example
     * // Get one Connection
     * const connection = await prisma.connection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConnectionFindFirstArgs>(args?: SelectSubset<T, ConnectionFindFirstArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Connection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionFindFirstOrThrowArgs} args - Arguments to find a Connection
     * @example
     * // Get one Connection
     * const connection = await prisma.connection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConnectionFindFirstOrThrowArgs>(args?: SelectSubset<T, ConnectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Connections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Connections
     * const connections = await prisma.connection.findMany()
     * 
     * // Get first 10 Connections
     * const connections = await prisma.connection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const connectionWithIdOnly = await prisma.connection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConnectionFindManyArgs>(args?: SelectSubset<T, ConnectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Connection.
     * @param {ConnectionCreateArgs} args - Arguments to create a Connection.
     * @example
     * // Create one Connection
     * const Connection = await prisma.connection.create({
     *   data: {
     *     // ... data to create a Connection
     *   }
     * })
     * 
     */
    create<T extends ConnectionCreateArgs>(args: SelectSubset<T, ConnectionCreateArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Connections.
     * @param {ConnectionCreateManyArgs} args - Arguments to create many Connections.
     * @example
     * // Create many Connections
     * const connection = await prisma.connection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConnectionCreateManyArgs>(args?: SelectSubset<T, ConnectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Connections and returns the data saved in the database.
     * @param {ConnectionCreateManyAndReturnArgs} args - Arguments to create many Connections.
     * @example
     * // Create many Connections
     * const connection = await prisma.connection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Connections and only return the `id`
     * const connectionWithIdOnly = await prisma.connection.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConnectionCreateManyAndReturnArgs>(args?: SelectSubset<T, ConnectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Connection.
     * @param {ConnectionDeleteArgs} args - Arguments to delete one Connection.
     * @example
     * // Delete one Connection
     * const Connection = await prisma.connection.delete({
     *   where: {
     *     // ... filter to delete one Connection
     *   }
     * })
     * 
     */
    delete<T extends ConnectionDeleteArgs>(args: SelectSubset<T, ConnectionDeleteArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Connection.
     * @param {ConnectionUpdateArgs} args - Arguments to update one Connection.
     * @example
     * // Update one Connection
     * const connection = await prisma.connection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConnectionUpdateArgs>(args: SelectSubset<T, ConnectionUpdateArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Connections.
     * @param {ConnectionDeleteManyArgs} args - Arguments to filter Connections to delete.
     * @example
     * // Delete a few Connections
     * const { count } = await prisma.connection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConnectionDeleteManyArgs>(args?: SelectSubset<T, ConnectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Connections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Connections
     * const connection = await prisma.connection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConnectionUpdateManyArgs>(args: SelectSubset<T, ConnectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Connection.
     * @param {ConnectionUpsertArgs} args - Arguments to update or create a Connection.
     * @example
     * // Update or create a Connection
     * const connection = await prisma.connection.upsert({
     *   create: {
     *     // ... data to create a Connection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Connection we want to update
     *   }
     * })
     */
    upsert<T extends ConnectionUpsertArgs>(args: SelectSubset<T, ConnectionUpsertArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Connections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionCountArgs} args - Arguments to filter Connections to count.
     * @example
     * // Count the number of Connections
     * const count = await prisma.connection.count({
     *   where: {
     *     // ... the filter for the Connections we want to count
     *   }
     * })
    **/
    count<T extends ConnectionCountArgs>(
      args?: Subset<T, ConnectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConnectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Connection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConnectionAggregateArgs>(args: Subset<T, ConnectionAggregateArgs>): Prisma.PrismaPromise<GetConnectionAggregateType<T>>

    /**
     * Group by Connection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConnectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConnectionGroupByArgs['orderBy'] }
        : { orderBy?: ConnectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConnectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConnectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Connection model
   */
  readonly fields: ConnectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Connection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConnectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    pairedWith<T extends Connection$pairedWithArgs<ExtArgs> = {}>(args?: Subset<T, Connection$pairedWithArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    memories<T extends Connection$memoriesArgs<ExtArgs> = {}>(args?: Subset<T, Connection$memoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "findMany"> | Null>
    notes<T extends Connection$notesArgs<ExtArgs> = {}>(args?: Subset<T, Connection$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany"> | Null>
    specialDays<T extends Connection$specialDaysArgs<ExtArgs> = {}>(args?: Subset<T, Connection$specialDaysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpecialDayPayload<ExtArgs>, T, "findMany"> | Null>
    goals<T extends Connection$goalsArgs<ExtArgs> = {}>(args?: Subset<T, Connection$goalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany"> | Null>
    dreams<T extends Connection$dreamsArgs<ExtArgs> = {}>(args?: Subset<T, Connection$dreamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DreamPayload<ExtArgs>, T, "findMany"> | Null>
    tree<T extends Connection$treeArgs<ExtArgs> = {}>(args?: Subset<T, Connection$treeArgs<ExtArgs>>): Prisma__TreeClient<$Result.GetResult<Prisma.$TreePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    surprises<T extends Connection$surprisesArgs<ExtArgs> = {}>(args?: Subset<T, Connection$surprisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurprisePayload<ExtArgs>, T, "findMany"> | Null>
    timeCapsules<T extends Connection$timeCapsulesArgs<ExtArgs> = {}>(args?: Subset<T, Connection$timeCapsulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeCapsulePayload<ExtArgs>, T, "findMany"> | Null>
    chatMessages<T extends Connection$chatMessagesArgs<ExtArgs> = {}>(args?: Subset<T, Connection$chatMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Connection model
   */ 
  interface ConnectionFieldRefs {
    readonly id: FieldRef<"Connection", 'String'>
    readonly connectionCode: FieldRef<"Connection", 'String'>
    readonly createdAt: FieldRef<"Connection", 'DateTime'>
    readonly updatedAt: FieldRef<"Connection", 'DateTime'>
    readonly userId: FieldRef<"Connection", 'String'>
    readonly pairedWithId: FieldRef<"Connection", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Connection findUnique
   */
  export type ConnectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * Filter, which Connection to fetch.
     */
    where: ConnectionWhereUniqueInput
  }

  /**
   * Connection findUniqueOrThrow
   */
  export type ConnectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * Filter, which Connection to fetch.
     */
    where: ConnectionWhereUniqueInput
  }

  /**
   * Connection findFirst
   */
  export type ConnectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * Filter, which Connection to fetch.
     */
    where?: ConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Connections to fetch.
     */
    orderBy?: ConnectionOrderByWithRelationInput | ConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Connections.
     */
    cursor?: ConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Connections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Connections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Connections.
     */
    distinct?: ConnectionScalarFieldEnum | ConnectionScalarFieldEnum[]
  }

  /**
   * Connection findFirstOrThrow
   */
  export type ConnectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * Filter, which Connection to fetch.
     */
    where?: ConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Connections to fetch.
     */
    orderBy?: ConnectionOrderByWithRelationInput | ConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Connections.
     */
    cursor?: ConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Connections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Connections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Connections.
     */
    distinct?: ConnectionScalarFieldEnum | ConnectionScalarFieldEnum[]
  }

  /**
   * Connection findMany
   */
  export type ConnectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * Filter, which Connections to fetch.
     */
    where?: ConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Connections to fetch.
     */
    orderBy?: ConnectionOrderByWithRelationInput | ConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Connections.
     */
    cursor?: ConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Connections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Connections.
     */
    skip?: number
    distinct?: ConnectionScalarFieldEnum | ConnectionScalarFieldEnum[]
  }

  /**
   * Connection create
   */
  export type ConnectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * The data needed to create a Connection.
     */
    data: XOR<ConnectionCreateInput, ConnectionUncheckedCreateInput>
  }

  /**
   * Connection createMany
   */
  export type ConnectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Connections.
     */
    data: ConnectionCreateManyInput | ConnectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Connection createManyAndReturn
   */
  export type ConnectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Connections.
     */
    data: ConnectionCreateManyInput | ConnectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Connection update
   */
  export type ConnectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * The data needed to update a Connection.
     */
    data: XOR<ConnectionUpdateInput, ConnectionUncheckedUpdateInput>
    /**
     * Choose, which Connection to update.
     */
    where: ConnectionWhereUniqueInput
  }

  /**
   * Connection updateMany
   */
  export type ConnectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Connections.
     */
    data: XOR<ConnectionUpdateManyMutationInput, ConnectionUncheckedUpdateManyInput>
    /**
     * Filter which Connections to update
     */
    where?: ConnectionWhereInput
  }

  /**
   * Connection upsert
   */
  export type ConnectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * The filter to search for the Connection to update in case it exists.
     */
    where: ConnectionWhereUniqueInput
    /**
     * In case the Connection found by the `where` argument doesn't exist, create a new Connection with this data.
     */
    create: XOR<ConnectionCreateInput, ConnectionUncheckedCreateInput>
    /**
     * In case the Connection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConnectionUpdateInput, ConnectionUncheckedUpdateInput>
  }

  /**
   * Connection delete
   */
  export type ConnectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * Filter which Connection to delete.
     */
    where: ConnectionWhereUniqueInput
  }

  /**
   * Connection deleteMany
   */
  export type ConnectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Connections to delete
     */
    where?: ConnectionWhereInput
  }

  /**
   * Connection.pairedWith
   */
  export type Connection$pairedWithArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Connection.memories
   */
  export type Connection$memoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Memory
     */
    select?: MemorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryInclude<ExtArgs> | null
    where?: MemoryWhereInput
    orderBy?: MemoryOrderByWithRelationInput | MemoryOrderByWithRelationInput[]
    cursor?: MemoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MemoryScalarFieldEnum | MemoryScalarFieldEnum[]
  }

  /**
   * Connection.notes
   */
  export type Connection$notesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Connection.specialDays
   */
  export type Connection$specialDaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialDay
     */
    select?: SpecialDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialDayInclude<ExtArgs> | null
    where?: SpecialDayWhereInput
    orderBy?: SpecialDayOrderByWithRelationInput | SpecialDayOrderByWithRelationInput[]
    cursor?: SpecialDayWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpecialDayScalarFieldEnum | SpecialDayScalarFieldEnum[]
  }

  /**
   * Connection.goals
   */
  export type Connection$goalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    where?: GoalWhereInput
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    cursor?: GoalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Connection.dreams
   */
  export type Connection$dreamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dream
     */
    select?: DreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamInclude<ExtArgs> | null
    where?: DreamWhereInput
    orderBy?: DreamOrderByWithRelationInput | DreamOrderByWithRelationInput[]
    cursor?: DreamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DreamScalarFieldEnum | DreamScalarFieldEnum[]
  }

  /**
   * Connection.tree
   */
  export type Connection$treeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tree
     */
    select?: TreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreeInclude<ExtArgs> | null
    where?: TreeWhereInput
  }

  /**
   * Connection.surprises
   */
  export type Connection$surprisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surprise
     */
    select?: SurpriseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurpriseInclude<ExtArgs> | null
    where?: SurpriseWhereInput
    orderBy?: SurpriseOrderByWithRelationInput | SurpriseOrderByWithRelationInput[]
    cursor?: SurpriseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SurpriseScalarFieldEnum | SurpriseScalarFieldEnum[]
  }

  /**
   * Connection.timeCapsules
   */
  export type Connection$timeCapsulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsule
     */
    select?: TimeCapsuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleInclude<ExtArgs> | null
    where?: TimeCapsuleWhereInput
    orderBy?: TimeCapsuleOrderByWithRelationInput | TimeCapsuleOrderByWithRelationInput[]
    cursor?: TimeCapsuleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimeCapsuleScalarFieldEnum | TimeCapsuleScalarFieldEnum[]
  }

  /**
   * Connection.chatMessages
   */
  export type Connection$chatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    cursor?: ChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * Connection without action
   */
  export type ConnectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
  }


  /**
   * Model Tree
   */

  export type AggregateTree = {
    _count: TreeCountAggregateOutputType | null
    _avg: TreeAvgAggregateOutputType | null
    _sum: TreeSumAggregateOutputType | null
    _min: TreeMinAggregateOutputType | null
    _max: TreeMaxAggregateOutputType | null
  }

  export type TreeAvgAggregateOutputType = {
    growthLevel: number | null
    growthXP: number | null
  }

  export type TreeSumAggregateOutputType = {
    growthLevel: number | null
    growthXP: number | null
  }

  export type TreeMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    growthLevel: number | null
    lastWatered: Date | null
    growthXP: number | null
    connectionId: string | null
  }

  export type TreeMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    growthLevel: number | null
    lastWatered: Date | null
    growthXP: number | null
    connectionId: string | null
  }

  export type TreeCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    growthLevel: number
    lastWatered: number
    growthXP: number
    connectionId: number
    _all: number
  }


  export type TreeAvgAggregateInputType = {
    growthLevel?: true
    growthXP?: true
  }

  export type TreeSumAggregateInputType = {
    growthLevel?: true
    growthXP?: true
  }

  export type TreeMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    growthLevel?: true
    lastWatered?: true
    growthXP?: true
    connectionId?: true
  }

  export type TreeMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    growthLevel?: true
    lastWatered?: true
    growthXP?: true
    connectionId?: true
  }

  export type TreeCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    growthLevel?: true
    lastWatered?: true
    growthXP?: true
    connectionId?: true
    _all?: true
  }

  export type TreeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tree to aggregate.
     */
    where?: TreeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trees to fetch.
     */
    orderBy?: TreeOrderByWithRelationInput | TreeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TreeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Trees
    **/
    _count?: true | TreeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TreeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TreeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TreeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TreeMaxAggregateInputType
  }

  export type GetTreeAggregateType<T extends TreeAggregateArgs> = {
        [P in keyof T & keyof AggregateTree]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTree[P]>
      : GetScalarType<T[P], AggregateTree[P]>
  }




  export type TreeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreeWhereInput
    orderBy?: TreeOrderByWithAggregationInput | TreeOrderByWithAggregationInput[]
    by: TreeScalarFieldEnum[] | TreeScalarFieldEnum
    having?: TreeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TreeCountAggregateInputType | true
    _avg?: TreeAvgAggregateInputType
    _sum?: TreeSumAggregateInputType
    _min?: TreeMinAggregateInputType
    _max?: TreeMaxAggregateInputType
  }

  export type TreeGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    growthLevel: number
    lastWatered: Date
    growthXP: number
    connectionId: string
    _count: TreeCountAggregateOutputType | null
    _avg: TreeAvgAggregateOutputType | null
    _sum: TreeSumAggregateOutputType | null
    _min: TreeMinAggregateOutputType | null
    _max: TreeMaxAggregateOutputType | null
  }

  type GetTreeGroupByPayload<T extends TreeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TreeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TreeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TreeGroupByOutputType[P]>
            : GetScalarType<T[P], TreeGroupByOutputType[P]>
        }
      >
    >


  export type TreeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    growthLevel?: boolean
    lastWatered?: boolean
    growthXP?: boolean
    connectionId?: boolean
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tree"]>

  export type TreeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    growthLevel?: boolean
    lastWatered?: boolean
    growthXP?: boolean
    connectionId?: boolean
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tree"]>

  export type TreeSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    growthLevel?: boolean
    lastWatered?: boolean
    growthXP?: boolean
    connectionId?: boolean
  }

  export type TreeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }
  export type TreeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }

  export type $TreePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tree"
    objects: {
      connection: Prisma.$ConnectionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      growthLevel: number
      lastWatered: Date
      growthXP: number
      connectionId: string
    }, ExtArgs["result"]["tree"]>
    composites: {}
  }

  type TreeGetPayload<S extends boolean | null | undefined | TreeDefaultArgs> = $Result.GetResult<Prisma.$TreePayload, S>

  type TreeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TreeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TreeCountAggregateInputType | true
    }

  export interface TreeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tree'], meta: { name: 'Tree' } }
    /**
     * Find zero or one Tree that matches the filter.
     * @param {TreeFindUniqueArgs} args - Arguments to find a Tree
     * @example
     * // Get one Tree
     * const tree = await prisma.tree.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TreeFindUniqueArgs>(args: SelectSubset<T, TreeFindUniqueArgs<ExtArgs>>): Prisma__TreeClient<$Result.GetResult<Prisma.$TreePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tree that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TreeFindUniqueOrThrowArgs} args - Arguments to find a Tree
     * @example
     * // Get one Tree
     * const tree = await prisma.tree.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TreeFindUniqueOrThrowArgs>(args: SelectSubset<T, TreeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TreeClient<$Result.GetResult<Prisma.$TreePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tree that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreeFindFirstArgs} args - Arguments to find a Tree
     * @example
     * // Get one Tree
     * const tree = await prisma.tree.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TreeFindFirstArgs>(args?: SelectSubset<T, TreeFindFirstArgs<ExtArgs>>): Prisma__TreeClient<$Result.GetResult<Prisma.$TreePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tree that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreeFindFirstOrThrowArgs} args - Arguments to find a Tree
     * @example
     * // Get one Tree
     * const tree = await prisma.tree.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TreeFindFirstOrThrowArgs>(args?: SelectSubset<T, TreeFindFirstOrThrowArgs<ExtArgs>>): Prisma__TreeClient<$Result.GetResult<Prisma.$TreePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Trees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trees
     * const trees = await prisma.tree.findMany()
     * 
     * // Get first 10 Trees
     * const trees = await prisma.tree.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const treeWithIdOnly = await prisma.tree.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TreeFindManyArgs>(args?: SelectSubset<T, TreeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tree.
     * @param {TreeCreateArgs} args - Arguments to create a Tree.
     * @example
     * // Create one Tree
     * const Tree = await prisma.tree.create({
     *   data: {
     *     // ... data to create a Tree
     *   }
     * })
     * 
     */
    create<T extends TreeCreateArgs>(args: SelectSubset<T, TreeCreateArgs<ExtArgs>>): Prisma__TreeClient<$Result.GetResult<Prisma.$TreePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Trees.
     * @param {TreeCreateManyArgs} args - Arguments to create many Trees.
     * @example
     * // Create many Trees
     * const tree = await prisma.tree.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TreeCreateManyArgs>(args?: SelectSubset<T, TreeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Trees and returns the data saved in the database.
     * @param {TreeCreateManyAndReturnArgs} args - Arguments to create many Trees.
     * @example
     * // Create many Trees
     * const tree = await prisma.tree.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Trees and only return the `id`
     * const treeWithIdOnly = await prisma.tree.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TreeCreateManyAndReturnArgs>(args?: SelectSubset<T, TreeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tree.
     * @param {TreeDeleteArgs} args - Arguments to delete one Tree.
     * @example
     * // Delete one Tree
     * const Tree = await prisma.tree.delete({
     *   where: {
     *     // ... filter to delete one Tree
     *   }
     * })
     * 
     */
    delete<T extends TreeDeleteArgs>(args: SelectSubset<T, TreeDeleteArgs<ExtArgs>>): Prisma__TreeClient<$Result.GetResult<Prisma.$TreePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tree.
     * @param {TreeUpdateArgs} args - Arguments to update one Tree.
     * @example
     * // Update one Tree
     * const tree = await prisma.tree.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TreeUpdateArgs>(args: SelectSubset<T, TreeUpdateArgs<ExtArgs>>): Prisma__TreeClient<$Result.GetResult<Prisma.$TreePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Trees.
     * @param {TreeDeleteManyArgs} args - Arguments to filter Trees to delete.
     * @example
     * // Delete a few Trees
     * const { count } = await prisma.tree.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TreeDeleteManyArgs>(args?: SelectSubset<T, TreeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trees
     * const tree = await prisma.tree.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TreeUpdateManyArgs>(args: SelectSubset<T, TreeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tree.
     * @param {TreeUpsertArgs} args - Arguments to update or create a Tree.
     * @example
     * // Update or create a Tree
     * const tree = await prisma.tree.upsert({
     *   create: {
     *     // ... data to create a Tree
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tree we want to update
     *   }
     * })
     */
    upsert<T extends TreeUpsertArgs>(args: SelectSubset<T, TreeUpsertArgs<ExtArgs>>): Prisma__TreeClient<$Result.GetResult<Prisma.$TreePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Trees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreeCountArgs} args - Arguments to filter Trees to count.
     * @example
     * // Count the number of Trees
     * const count = await prisma.tree.count({
     *   where: {
     *     // ... the filter for the Trees we want to count
     *   }
     * })
    **/
    count<T extends TreeCountArgs>(
      args?: Subset<T, TreeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TreeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tree.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TreeAggregateArgs>(args: Subset<T, TreeAggregateArgs>): Prisma.PrismaPromise<GetTreeAggregateType<T>>

    /**
     * Group by Tree.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TreeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TreeGroupByArgs['orderBy'] }
        : { orderBy?: TreeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TreeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTreeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tree model
   */
  readonly fields: TreeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tree.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TreeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    connection<T extends ConnectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConnectionDefaultArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tree model
   */ 
  interface TreeFieldRefs {
    readonly id: FieldRef<"Tree", 'String'>
    readonly createdAt: FieldRef<"Tree", 'DateTime'>
    readonly updatedAt: FieldRef<"Tree", 'DateTime'>
    readonly growthLevel: FieldRef<"Tree", 'Int'>
    readonly lastWatered: FieldRef<"Tree", 'DateTime'>
    readonly growthXP: FieldRef<"Tree", 'Int'>
    readonly connectionId: FieldRef<"Tree", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Tree findUnique
   */
  export type TreeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tree
     */
    select?: TreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreeInclude<ExtArgs> | null
    /**
     * Filter, which Tree to fetch.
     */
    where: TreeWhereUniqueInput
  }

  /**
   * Tree findUniqueOrThrow
   */
  export type TreeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tree
     */
    select?: TreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreeInclude<ExtArgs> | null
    /**
     * Filter, which Tree to fetch.
     */
    where: TreeWhereUniqueInput
  }

  /**
   * Tree findFirst
   */
  export type TreeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tree
     */
    select?: TreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreeInclude<ExtArgs> | null
    /**
     * Filter, which Tree to fetch.
     */
    where?: TreeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trees to fetch.
     */
    orderBy?: TreeOrderByWithRelationInput | TreeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trees.
     */
    cursor?: TreeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trees.
     */
    distinct?: TreeScalarFieldEnum | TreeScalarFieldEnum[]
  }

  /**
   * Tree findFirstOrThrow
   */
  export type TreeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tree
     */
    select?: TreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreeInclude<ExtArgs> | null
    /**
     * Filter, which Tree to fetch.
     */
    where?: TreeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trees to fetch.
     */
    orderBy?: TreeOrderByWithRelationInput | TreeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trees.
     */
    cursor?: TreeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trees.
     */
    distinct?: TreeScalarFieldEnum | TreeScalarFieldEnum[]
  }

  /**
   * Tree findMany
   */
  export type TreeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tree
     */
    select?: TreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreeInclude<ExtArgs> | null
    /**
     * Filter, which Trees to fetch.
     */
    where?: TreeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trees to fetch.
     */
    orderBy?: TreeOrderByWithRelationInput | TreeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Trees.
     */
    cursor?: TreeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trees.
     */
    skip?: number
    distinct?: TreeScalarFieldEnum | TreeScalarFieldEnum[]
  }

  /**
   * Tree create
   */
  export type TreeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tree
     */
    select?: TreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreeInclude<ExtArgs> | null
    /**
     * The data needed to create a Tree.
     */
    data: XOR<TreeCreateInput, TreeUncheckedCreateInput>
  }

  /**
   * Tree createMany
   */
  export type TreeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Trees.
     */
    data: TreeCreateManyInput | TreeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tree createManyAndReturn
   */
  export type TreeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tree
     */
    select?: TreeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Trees.
     */
    data: TreeCreateManyInput | TreeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tree update
   */
  export type TreeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tree
     */
    select?: TreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreeInclude<ExtArgs> | null
    /**
     * The data needed to update a Tree.
     */
    data: XOR<TreeUpdateInput, TreeUncheckedUpdateInput>
    /**
     * Choose, which Tree to update.
     */
    where: TreeWhereUniqueInput
  }

  /**
   * Tree updateMany
   */
  export type TreeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Trees.
     */
    data: XOR<TreeUpdateManyMutationInput, TreeUncheckedUpdateManyInput>
    /**
     * Filter which Trees to update
     */
    where?: TreeWhereInput
  }

  /**
   * Tree upsert
   */
  export type TreeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tree
     */
    select?: TreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreeInclude<ExtArgs> | null
    /**
     * The filter to search for the Tree to update in case it exists.
     */
    where: TreeWhereUniqueInput
    /**
     * In case the Tree found by the `where` argument doesn't exist, create a new Tree with this data.
     */
    create: XOR<TreeCreateInput, TreeUncheckedCreateInput>
    /**
     * In case the Tree was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TreeUpdateInput, TreeUncheckedUpdateInput>
  }

  /**
   * Tree delete
   */
  export type TreeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tree
     */
    select?: TreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreeInclude<ExtArgs> | null
    /**
     * Filter which Tree to delete.
     */
    where: TreeWhereUniqueInput
  }

  /**
   * Tree deleteMany
   */
  export type TreeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trees to delete
     */
    where?: TreeWhereInput
  }

  /**
   * Tree without action
   */
  export type TreeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tree
     */
    select?: TreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreeInclude<ExtArgs> | null
  }


  /**
   * Model Memory
   */

  export type AggregateMemory = {
    _count: MemoryCountAggregateOutputType | null
    _min: MemoryMinAggregateOutputType | null
    _max: MemoryMaxAggregateOutputType | null
  }

  export type MemoryMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    imageUrl: string | null
    date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    connectionId: string | null
  }

  export type MemoryMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    imageUrl: string | null
    date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    connectionId: string | null
  }

  export type MemoryCountAggregateOutputType = {
    id: number
    title: number
    description: number
    imageUrl: number
    date: number
    createdAt: number
    updatedAt: number
    userId: number
    connectionId: number
    _all: number
  }


  export type MemoryMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    imageUrl?: true
    date?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    connectionId?: true
  }

  export type MemoryMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    imageUrl?: true
    date?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    connectionId?: true
  }

  export type MemoryCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    imageUrl?: true
    date?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    connectionId?: true
    _all?: true
  }

  export type MemoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Memory to aggregate.
     */
    where?: MemoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Memories to fetch.
     */
    orderBy?: MemoryOrderByWithRelationInput | MemoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MemoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Memories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Memories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Memories
    **/
    _count?: true | MemoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MemoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MemoryMaxAggregateInputType
  }

  export type GetMemoryAggregateType<T extends MemoryAggregateArgs> = {
        [P in keyof T & keyof AggregateMemory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMemory[P]>
      : GetScalarType<T[P], AggregateMemory[P]>
  }




  export type MemoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemoryWhereInput
    orderBy?: MemoryOrderByWithAggregationInput | MemoryOrderByWithAggregationInput[]
    by: MemoryScalarFieldEnum[] | MemoryScalarFieldEnum
    having?: MemoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MemoryCountAggregateInputType | true
    _min?: MemoryMinAggregateInputType
    _max?: MemoryMaxAggregateInputType
  }

  export type MemoryGroupByOutputType = {
    id: string
    title: string
    description: string
    imageUrl: string | null
    date: Date
    createdAt: Date
    updatedAt: Date
    userId: string
    connectionId: string
    _count: MemoryCountAggregateOutputType | null
    _min: MemoryMinAggregateOutputType | null
    _max: MemoryMaxAggregateOutputType | null
  }

  type GetMemoryGroupByPayload<T extends MemoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MemoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MemoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MemoryGroupByOutputType[P]>
            : GetScalarType<T[P], MemoryGroupByOutputType[P]>
        }
      >
    >


  export type MemorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    imageUrl?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    connectionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["memory"]>

  export type MemorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    imageUrl?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    connectionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["memory"]>

  export type MemorySelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    imageUrl?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    connectionId?: boolean
  }

  export type MemoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }
  export type MemoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }

  export type $MemoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Memory"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      connection: Prisma.$ConnectionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      imageUrl: string | null
      date: Date
      createdAt: Date
      updatedAt: Date
      userId: string
      connectionId: string
    }, ExtArgs["result"]["memory"]>
    composites: {}
  }

  type MemoryGetPayload<S extends boolean | null | undefined | MemoryDefaultArgs> = $Result.GetResult<Prisma.$MemoryPayload, S>

  type MemoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MemoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MemoryCountAggregateInputType | true
    }

  export interface MemoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Memory'], meta: { name: 'Memory' } }
    /**
     * Find zero or one Memory that matches the filter.
     * @param {MemoryFindUniqueArgs} args - Arguments to find a Memory
     * @example
     * // Get one Memory
     * const memory = await prisma.memory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MemoryFindUniqueArgs>(args: SelectSubset<T, MemoryFindUniqueArgs<ExtArgs>>): Prisma__MemoryClient<$Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Memory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MemoryFindUniqueOrThrowArgs} args - Arguments to find a Memory
     * @example
     * // Get one Memory
     * const memory = await prisma.memory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MemoryFindUniqueOrThrowArgs>(args: SelectSubset<T, MemoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MemoryClient<$Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Memory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemoryFindFirstArgs} args - Arguments to find a Memory
     * @example
     * // Get one Memory
     * const memory = await prisma.memory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MemoryFindFirstArgs>(args?: SelectSubset<T, MemoryFindFirstArgs<ExtArgs>>): Prisma__MemoryClient<$Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Memory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemoryFindFirstOrThrowArgs} args - Arguments to find a Memory
     * @example
     * // Get one Memory
     * const memory = await prisma.memory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MemoryFindFirstOrThrowArgs>(args?: SelectSubset<T, MemoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__MemoryClient<$Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Memories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Memories
     * const memories = await prisma.memory.findMany()
     * 
     * // Get first 10 Memories
     * const memories = await prisma.memory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const memoryWithIdOnly = await prisma.memory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MemoryFindManyArgs>(args?: SelectSubset<T, MemoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Memory.
     * @param {MemoryCreateArgs} args - Arguments to create a Memory.
     * @example
     * // Create one Memory
     * const Memory = await prisma.memory.create({
     *   data: {
     *     // ... data to create a Memory
     *   }
     * })
     * 
     */
    create<T extends MemoryCreateArgs>(args: SelectSubset<T, MemoryCreateArgs<ExtArgs>>): Prisma__MemoryClient<$Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Memories.
     * @param {MemoryCreateManyArgs} args - Arguments to create many Memories.
     * @example
     * // Create many Memories
     * const memory = await prisma.memory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MemoryCreateManyArgs>(args?: SelectSubset<T, MemoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Memories and returns the data saved in the database.
     * @param {MemoryCreateManyAndReturnArgs} args - Arguments to create many Memories.
     * @example
     * // Create many Memories
     * const memory = await prisma.memory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Memories and only return the `id`
     * const memoryWithIdOnly = await prisma.memory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MemoryCreateManyAndReturnArgs>(args?: SelectSubset<T, MemoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Memory.
     * @param {MemoryDeleteArgs} args - Arguments to delete one Memory.
     * @example
     * // Delete one Memory
     * const Memory = await prisma.memory.delete({
     *   where: {
     *     // ... filter to delete one Memory
     *   }
     * })
     * 
     */
    delete<T extends MemoryDeleteArgs>(args: SelectSubset<T, MemoryDeleteArgs<ExtArgs>>): Prisma__MemoryClient<$Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Memory.
     * @param {MemoryUpdateArgs} args - Arguments to update one Memory.
     * @example
     * // Update one Memory
     * const memory = await prisma.memory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MemoryUpdateArgs>(args: SelectSubset<T, MemoryUpdateArgs<ExtArgs>>): Prisma__MemoryClient<$Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Memories.
     * @param {MemoryDeleteManyArgs} args - Arguments to filter Memories to delete.
     * @example
     * // Delete a few Memories
     * const { count } = await prisma.memory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MemoryDeleteManyArgs>(args?: SelectSubset<T, MemoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Memories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Memories
     * const memory = await prisma.memory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MemoryUpdateManyArgs>(args: SelectSubset<T, MemoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Memory.
     * @param {MemoryUpsertArgs} args - Arguments to update or create a Memory.
     * @example
     * // Update or create a Memory
     * const memory = await prisma.memory.upsert({
     *   create: {
     *     // ... data to create a Memory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Memory we want to update
     *   }
     * })
     */
    upsert<T extends MemoryUpsertArgs>(args: SelectSubset<T, MemoryUpsertArgs<ExtArgs>>): Prisma__MemoryClient<$Result.GetResult<Prisma.$MemoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Memories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemoryCountArgs} args - Arguments to filter Memories to count.
     * @example
     * // Count the number of Memories
     * const count = await prisma.memory.count({
     *   where: {
     *     // ... the filter for the Memories we want to count
     *   }
     * })
    **/
    count<T extends MemoryCountArgs>(
      args?: Subset<T, MemoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MemoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Memory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MemoryAggregateArgs>(args: Subset<T, MemoryAggregateArgs>): Prisma.PrismaPromise<GetMemoryAggregateType<T>>

    /**
     * Group by Memory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MemoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MemoryGroupByArgs['orderBy'] }
        : { orderBy?: MemoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MemoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMemoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Memory model
   */
  readonly fields: MemoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Memory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MemoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    connection<T extends ConnectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConnectionDefaultArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Memory model
   */ 
  interface MemoryFieldRefs {
    readonly id: FieldRef<"Memory", 'String'>
    readonly title: FieldRef<"Memory", 'String'>
    readonly description: FieldRef<"Memory", 'String'>
    readonly imageUrl: FieldRef<"Memory", 'String'>
    readonly date: FieldRef<"Memory", 'DateTime'>
    readonly createdAt: FieldRef<"Memory", 'DateTime'>
    readonly updatedAt: FieldRef<"Memory", 'DateTime'>
    readonly userId: FieldRef<"Memory", 'String'>
    readonly connectionId: FieldRef<"Memory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Memory findUnique
   */
  export type MemoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Memory
     */
    select?: MemorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryInclude<ExtArgs> | null
    /**
     * Filter, which Memory to fetch.
     */
    where: MemoryWhereUniqueInput
  }

  /**
   * Memory findUniqueOrThrow
   */
  export type MemoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Memory
     */
    select?: MemorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryInclude<ExtArgs> | null
    /**
     * Filter, which Memory to fetch.
     */
    where: MemoryWhereUniqueInput
  }

  /**
   * Memory findFirst
   */
  export type MemoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Memory
     */
    select?: MemorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryInclude<ExtArgs> | null
    /**
     * Filter, which Memory to fetch.
     */
    where?: MemoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Memories to fetch.
     */
    orderBy?: MemoryOrderByWithRelationInput | MemoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Memories.
     */
    cursor?: MemoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Memories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Memories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Memories.
     */
    distinct?: MemoryScalarFieldEnum | MemoryScalarFieldEnum[]
  }

  /**
   * Memory findFirstOrThrow
   */
  export type MemoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Memory
     */
    select?: MemorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryInclude<ExtArgs> | null
    /**
     * Filter, which Memory to fetch.
     */
    where?: MemoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Memories to fetch.
     */
    orderBy?: MemoryOrderByWithRelationInput | MemoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Memories.
     */
    cursor?: MemoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Memories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Memories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Memories.
     */
    distinct?: MemoryScalarFieldEnum | MemoryScalarFieldEnum[]
  }

  /**
   * Memory findMany
   */
  export type MemoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Memory
     */
    select?: MemorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryInclude<ExtArgs> | null
    /**
     * Filter, which Memories to fetch.
     */
    where?: MemoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Memories to fetch.
     */
    orderBy?: MemoryOrderByWithRelationInput | MemoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Memories.
     */
    cursor?: MemoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Memories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Memories.
     */
    skip?: number
    distinct?: MemoryScalarFieldEnum | MemoryScalarFieldEnum[]
  }

  /**
   * Memory create
   */
  export type MemoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Memory
     */
    select?: MemorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Memory.
     */
    data: XOR<MemoryCreateInput, MemoryUncheckedCreateInput>
  }

  /**
   * Memory createMany
   */
  export type MemoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Memories.
     */
    data: MemoryCreateManyInput | MemoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Memory createManyAndReturn
   */
  export type MemoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Memory
     */
    select?: MemorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Memories.
     */
    data: MemoryCreateManyInput | MemoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Memory update
   */
  export type MemoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Memory
     */
    select?: MemorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Memory.
     */
    data: XOR<MemoryUpdateInput, MemoryUncheckedUpdateInput>
    /**
     * Choose, which Memory to update.
     */
    where: MemoryWhereUniqueInput
  }

  /**
   * Memory updateMany
   */
  export type MemoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Memories.
     */
    data: XOR<MemoryUpdateManyMutationInput, MemoryUncheckedUpdateManyInput>
    /**
     * Filter which Memories to update
     */
    where?: MemoryWhereInput
  }

  /**
   * Memory upsert
   */
  export type MemoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Memory
     */
    select?: MemorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Memory to update in case it exists.
     */
    where: MemoryWhereUniqueInput
    /**
     * In case the Memory found by the `where` argument doesn't exist, create a new Memory with this data.
     */
    create: XOR<MemoryCreateInput, MemoryUncheckedCreateInput>
    /**
     * In case the Memory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MemoryUpdateInput, MemoryUncheckedUpdateInput>
  }

  /**
   * Memory delete
   */
  export type MemoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Memory
     */
    select?: MemorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryInclude<ExtArgs> | null
    /**
     * Filter which Memory to delete.
     */
    where: MemoryWhereUniqueInput
  }

  /**
   * Memory deleteMany
   */
  export type MemoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Memories to delete
     */
    where?: MemoryWhereInput
  }

  /**
   * Memory without action
   */
  export type MemoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Memory
     */
    select?: MemorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemoryInclude<ExtArgs> | null
  }


  /**
   * Model Note
   */

  export type AggregateNote = {
    _count: NoteCountAggregateOutputType | null
    _avg: NoteAvgAggregateOutputType | null
    _sum: NoteSumAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  export type NoteAvgAggregateOutputType = {
    rating: number | null
  }

  export type NoteSumAggregateOutputType = {
    rating: number | null
  }

  export type NoteMinAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    isTemporary: boolean | null
    expiresAt: Date | null
    rating: number | null
    createdAt: Date | null
    updatedAt: Date | null
    authorId: string | null
    connectionId: string | null
  }

  export type NoteMaxAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    isTemporary: boolean | null
    expiresAt: Date | null
    rating: number | null
    createdAt: Date | null
    updatedAt: Date | null
    authorId: string | null
    connectionId: string | null
  }

  export type NoteCountAggregateOutputType = {
    id: number
    title: number
    content: number
    isTemporary: number
    expiresAt: number
    rating: number
    createdAt: number
    updatedAt: number
    authorId: number
    connectionId: number
    _all: number
  }


  export type NoteAvgAggregateInputType = {
    rating?: true
  }

  export type NoteSumAggregateInputType = {
    rating?: true
  }

  export type NoteMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    isTemporary?: true
    expiresAt?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
    connectionId?: true
  }

  export type NoteMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    isTemporary?: true
    expiresAt?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
    connectionId?: true
  }

  export type NoteCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    isTemporary?: true
    expiresAt?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
    connectionId?: true
    _all?: true
  }

  export type NoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Note to aggregate.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notes
    **/
    _count?: true | NoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoteMaxAggregateInputType
  }

  export type GetNoteAggregateType<T extends NoteAggregateArgs> = {
        [P in keyof T & keyof AggregateNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNote[P]>
      : GetScalarType<T[P], AggregateNote[P]>
  }




  export type NoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithAggregationInput | NoteOrderByWithAggregationInput[]
    by: NoteScalarFieldEnum[] | NoteScalarFieldEnum
    having?: NoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoteCountAggregateInputType | true
    _avg?: NoteAvgAggregateInputType
    _sum?: NoteSumAggregateInputType
    _min?: NoteMinAggregateInputType
    _max?: NoteMaxAggregateInputType
  }

  export type NoteGroupByOutputType = {
    id: string
    title: string
    content: string
    isTemporary: boolean
    expiresAt: Date | null
    rating: number | null
    createdAt: Date
    updatedAt: Date
    authorId: string
    connectionId: string
    _count: NoteCountAggregateOutputType | null
    _avg: NoteAvgAggregateOutputType | null
    _sum: NoteSumAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  type GetNoteGroupByPayload<T extends NoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoteGroupByOutputType[P]>
            : GetScalarType<T[P], NoteGroupByOutputType[P]>
        }
      >
    >


  export type NoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    isTemporary?: boolean
    expiresAt?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    connectionId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    isTemporary?: boolean
    expiresAt?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    connectionId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    isTemporary?: boolean
    expiresAt?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    connectionId?: boolean
  }

  export type NoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }
  export type NoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }

  export type $NotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Note"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      connection: Prisma.$ConnectionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      content: string
      isTemporary: boolean
      expiresAt: Date | null
      rating: number | null
      createdAt: Date
      updatedAt: Date
      authorId: string
      connectionId: string
    }, ExtArgs["result"]["note"]>
    composites: {}
  }

  type NoteGetPayload<S extends boolean | null | undefined | NoteDefaultArgs> = $Result.GetResult<Prisma.$NotePayload, S>

  type NoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NoteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NoteCountAggregateInputType | true
    }

  export interface NoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Note'], meta: { name: 'Note' } }
    /**
     * Find zero or one Note that matches the filter.
     * @param {NoteFindUniqueArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NoteFindUniqueArgs>(args: SelectSubset<T, NoteFindUniqueArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Note that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NoteFindUniqueOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NoteFindUniqueOrThrowArgs>(args: SelectSubset<T, NoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Note that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NoteFindFirstArgs>(args?: SelectSubset<T, NoteFindFirstArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Note that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NoteFindFirstOrThrowArgs>(args?: SelectSubset<T, NoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notes
     * const notes = await prisma.note.findMany()
     * 
     * // Get first 10 Notes
     * const notes = await prisma.note.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noteWithIdOnly = await prisma.note.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NoteFindManyArgs>(args?: SelectSubset<T, NoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Note.
     * @param {NoteCreateArgs} args - Arguments to create a Note.
     * @example
     * // Create one Note
     * const Note = await prisma.note.create({
     *   data: {
     *     // ... data to create a Note
     *   }
     * })
     * 
     */
    create<T extends NoteCreateArgs>(args: SelectSubset<T, NoteCreateArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notes.
     * @param {NoteCreateManyArgs} args - Arguments to create many Notes.
     * @example
     * // Create many Notes
     * const note = await prisma.note.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NoteCreateManyArgs>(args?: SelectSubset<T, NoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notes and returns the data saved in the database.
     * @param {NoteCreateManyAndReturnArgs} args - Arguments to create many Notes.
     * @example
     * // Create many Notes
     * const note = await prisma.note.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notes and only return the `id`
     * const noteWithIdOnly = await prisma.note.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NoteCreateManyAndReturnArgs>(args?: SelectSubset<T, NoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Note.
     * @param {NoteDeleteArgs} args - Arguments to delete one Note.
     * @example
     * // Delete one Note
     * const Note = await prisma.note.delete({
     *   where: {
     *     // ... filter to delete one Note
     *   }
     * })
     * 
     */
    delete<T extends NoteDeleteArgs>(args: SelectSubset<T, NoteDeleteArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Note.
     * @param {NoteUpdateArgs} args - Arguments to update one Note.
     * @example
     * // Update one Note
     * const note = await prisma.note.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NoteUpdateArgs>(args: SelectSubset<T, NoteUpdateArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notes.
     * @param {NoteDeleteManyArgs} args - Arguments to filter Notes to delete.
     * @example
     * // Delete a few Notes
     * const { count } = await prisma.note.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NoteDeleteManyArgs>(args?: SelectSubset<T, NoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notes
     * const note = await prisma.note.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NoteUpdateManyArgs>(args: SelectSubset<T, NoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Note.
     * @param {NoteUpsertArgs} args - Arguments to update or create a Note.
     * @example
     * // Update or create a Note
     * const note = await prisma.note.upsert({
     *   create: {
     *     // ... data to create a Note
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Note we want to update
     *   }
     * })
     */
    upsert<T extends NoteUpsertArgs>(args: SelectSubset<T, NoteUpsertArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteCountArgs} args - Arguments to filter Notes to count.
     * @example
     * // Count the number of Notes
     * const count = await prisma.note.count({
     *   where: {
     *     // ... the filter for the Notes we want to count
     *   }
     * })
    **/
    count<T extends NoteCountArgs>(
      args?: Subset<T, NoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoteAggregateArgs>(args: Subset<T, NoteAggregateArgs>): Prisma.PrismaPromise<GetNoteAggregateType<T>>

    /**
     * Group by Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoteGroupByArgs['orderBy'] }
        : { orderBy?: NoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Note model
   */
  readonly fields: NoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Note.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    connection<T extends ConnectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConnectionDefaultArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Note model
   */ 
  interface NoteFieldRefs {
    readonly id: FieldRef<"Note", 'String'>
    readonly title: FieldRef<"Note", 'String'>
    readonly content: FieldRef<"Note", 'String'>
    readonly isTemporary: FieldRef<"Note", 'Boolean'>
    readonly expiresAt: FieldRef<"Note", 'DateTime'>
    readonly rating: FieldRef<"Note", 'Int'>
    readonly createdAt: FieldRef<"Note", 'DateTime'>
    readonly updatedAt: FieldRef<"Note", 'DateTime'>
    readonly authorId: FieldRef<"Note", 'String'>
    readonly connectionId: FieldRef<"Note", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Note findUnique
   */
  export type NoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note findUniqueOrThrow
   */
  export type NoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note findFirst
   */
  export type NoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note findFirstOrThrow
   */
  export type NoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note findMany
   */
  export type NoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Notes to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note create
   */
  export type NoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Note.
     */
    data: XOR<NoteCreateInput, NoteUncheckedCreateInput>
  }

  /**
   * Note createMany
   */
  export type NoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notes.
     */
    data: NoteCreateManyInput | NoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Note createManyAndReturn
   */
  export type NoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notes.
     */
    data: NoteCreateManyInput | NoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Note update
   */
  export type NoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Note.
     */
    data: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
    /**
     * Choose, which Note to update.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note updateMany
   */
  export type NoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notes.
     */
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyInput>
    /**
     * Filter which Notes to update
     */
    where?: NoteWhereInput
  }

  /**
   * Note upsert
   */
  export type NoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Note to update in case it exists.
     */
    where: NoteWhereUniqueInput
    /**
     * In case the Note found by the `where` argument doesn't exist, create a new Note with this data.
     */
    create: XOR<NoteCreateInput, NoteUncheckedCreateInput>
    /**
     * In case the Note was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
  }

  /**
   * Note delete
   */
  export type NoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter which Note to delete.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note deleteMany
   */
  export type NoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notes to delete
     */
    where?: NoteWhereInput
  }

  /**
   * Note without action
   */
  export type NoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
  }


  /**
   * Model SpecialDay
   */

  export type AggregateSpecialDay = {
    _count: SpecialDayCountAggregateOutputType | null
    _min: SpecialDayMinAggregateOutputType | null
    _max: SpecialDayMaxAggregateOutputType | null
  }

  export type SpecialDayMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    date: Date | null
    isRecurring: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    isConfirmed: boolean | null
    confirmedAt: Date | null
    confirmedById: string | null
    userId: string | null
    connectionId: string | null
  }

  export type SpecialDayMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    date: Date | null
    isRecurring: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    isConfirmed: boolean | null
    confirmedAt: Date | null
    confirmedById: string | null
    userId: string | null
    connectionId: string | null
  }

  export type SpecialDayCountAggregateOutputType = {
    id: number
    title: number
    description: number
    date: number
    isRecurring: number
    createdAt: number
    updatedAt: number
    isConfirmed: number
    confirmedAt: number
    confirmedById: number
    userId: number
    connectionId: number
    _all: number
  }


  export type SpecialDayMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    date?: true
    isRecurring?: true
    createdAt?: true
    updatedAt?: true
    isConfirmed?: true
    confirmedAt?: true
    confirmedById?: true
    userId?: true
    connectionId?: true
  }

  export type SpecialDayMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    date?: true
    isRecurring?: true
    createdAt?: true
    updatedAt?: true
    isConfirmed?: true
    confirmedAt?: true
    confirmedById?: true
    userId?: true
    connectionId?: true
  }

  export type SpecialDayCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    date?: true
    isRecurring?: true
    createdAt?: true
    updatedAt?: true
    isConfirmed?: true
    confirmedAt?: true
    confirmedById?: true
    userId?: true
    connectionId?: true
    _all?: true
  }

  export type SpecialDayAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpecialDay to aggregate.
     */
    where?: SpecialDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpecialDays to fetch.
     */
    orderBy?: SpecialDayOrderByWithRelationInput | SpecialDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SpecialDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpecialDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpecialDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SpecialDays
    **/
    _count?: true | SpecialDayCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpecialDayMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpecialDayMaxAggregateInputType
  }

  export type GetSpecialDayAggregateType<T extends SpecialDayAggregateArgs> = {
        [P in keyof T & keyof AggregateSpecialDay]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpecialDay[P]>
      : GetScalarType<T[P], AggregateSpecialDay[P]>
  }




  export type SpecialDayGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpecialDayWhereInput
    orderBy?: SpecialDayOrderByWithAggregationInput | SpecialDayOrderByWithAggregationInput[]
    by: SpecialDayScalarFieldEnum[] | SpecialDayScalarFieldEnum
    having?: SpecialDayScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpecialDayCountAggregateInputType | true
    _min?: SpecialDayMinAggregateInputType
    _max?: SpecialDayMaxAggregateInputType
  }

  export type SpecialDayGroupByOutputType = {
    id: string
    title: string
    description: string | null
    date: Date
    isRecurring: boolean
    createdAt: Date
    updatedAt: Date
    isConfirmed: boolean
    confirmedAt: Date | null
    confirmedById: string | null
    userId: string
    connectionId: string
    _count: SpecialDayCountAggregateOutputType | null
    _min: SpecialDayMinAggregateOutputType | null
    _max: SpecialDayMaxAggregateOutputType | null
  }

  type GetSpecialDayGroupByPayload<T extends SpecialDayGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SpecialDayGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpecialDayGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpecialDayGroupByOutputType[P]>
            : GetScalarType<T[P], SpecialDayGroupByOutputType[P]>
        }
      >
    >


  export type SpecialDaySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    date?: boolean
    isRecurring?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isConfirmed?: boolean
    confirmedAt?: boolean
    confirmedById?: boolean
    userId?: boolean
    connectionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["specialDay"]>

  export type SpecialDaySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    date?: boolean
    isRecurring?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isConfirmed?: boolean
    confirmedAt?: boolean
    confirmedById?: boolean
    userId?: boolean
    connectionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["specialDay"]>

  export type SpecialDaySelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    date?: boolean
    isRecurring?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isConfirmed?: boolean
    confirmedAt?: boolean
    confirmedById?: boolean
    userId?: boolean
    connectionId?: boolean
  }

  export type SpecialDayInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }
  export type SpecialDayIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }

  export type $SpecialDayPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SpecialDay"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      connection: Prisma.$ConnectionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      date: Date
      isRecurring: boolean
      createdAt: Date
      updatedAt: Date
      isConfirmed: boolean
      confirmedAt: Date | null
      confirmedById: string | null
      userId: string
      connectionId: string
    }, ExtArgs["result"]["specialDay"]>
    composites: {}
  }

  type SpecialDayGetPayload<S extends boolean | null | undefined | SpecialDayDefaultArgs> = $Result.GetResult<Prisma.$SpecialDayPayload, S>

  type SpecialDayCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SpecialDayFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SpecialDayCountAggregateInputType | true
    }

  export interface SpecialDayDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SpecialDay'], meta: { name: 'SpecialDay' } }
    /**
     * Find zero or one SpecialDay that matches the filter.
     * @param {SpecialDayFindUniqueArgs} args - Arguments to find a SpecialDay
     * @example
     * // Get one SpecialDay
     * const specialDay = await prisma.specialDay.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SpecialDayFindUniqueArgs>(args: SelectSubset<T, SpecialDayFindUniqueArgs<ExtArgs>>): Prisma__SpecialDayClient<$Result.GetResult<Prisma.$SpecialDayPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SpecialDay that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SpecialDayFindUniqueOrThrowArgs} args - Arguments to find a SpecialDay
     * @example
     * // Get one SpecialDay
     * const specialDay = await prisma.specialDay.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SpecialDayFindUniqueOrThrowArgs>(args: SelectSubset<T, SpecialDayFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SpecialDayClient<$Result.GetResult<Prisma.$SpecialDayPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SpecialDay that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialDayFindFirstArgs} args - Arguments to find a SpecialDay
     * @example
     * // Get one SpecialDay
     * const specialDay = await prisma.specialDay.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SpecialDayFindFirstArgs>(args?: SelectSubset<T, SpecialDayFindFirstArgs<ExtArgs>>): Prisma__SpecialDayClient<$Result.GetResult<Prisma.$SpecialDayPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SpecialDay that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialDayFindFirstOrThrowArgs} args - Arguments to find a SpecialDay
     * @example
     * // Get one SpecialDay
     * const specialDay = await prisma.specialDay.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SpecialDayFindFirstOrThrowArgs>(args?: SelectSubset<T, SpecialDayFindFirstOrThrowArgs<ExtArgs>>): Prisma__SpecialDayClient<$Result.GetResult<Prisma.$SpecialDayPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SpecialDays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialDayFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SpecialDays
     * const specialDays = await prisma.specialDay.findMany()
     * 
     * // Get first 10 SpecialDays
     * const specialDays = await prisma.specialDay.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const specialDayWithIdOnly = await prisma.specialDay.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SpecialDayFindManyArgs>(args?: SelectSubset<T, SpecialDayFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpecialDayPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SpecialDay.
     * @param {SpecialDayCreateArgs} args - Arguments to create a SpecialDay.
     * @example
     * // Create one SpecialDay
     * const SpecialDay = await prisma.specialDay.create({
     *   data: {
     *     // ... data to create a SpecialDay
     *   }
     * })
     * 
     */
    create<T extends SpecialDayCreateArgs>(args: SelectSubset<T, SpecialDayCreateArgs<ExtArgs>>): Prisma__SpecialDayClient<$Result.GetResult<Prisma.$SpecialDayPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SpecialDays.
     * @param {SpecialDayCreateManyArgs} args - Arguments to create many SpecialDays.
     * @example
     * // Create many SpecialDays
     * const specialDay = await prisma.specialDay.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SpecialDayCreateManyArgs>(args?: SelectSubset<T, SpecialDayCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SpecialDays and returns the data saved in the database.
     * @param {SpecialDayCreateManyAndReturnArgs} args - Arguments to create many SpecialDays.
     * @example
     * // Create many SpecialDays
     * const specialDay = await prisma.specialDay.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SpecialDays and only return the `id`
     * const specialDayWithIdOnly = await prisma.specialDay.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SpecialDayCreateManyAndReturnArgs>(args?: SelectSubset<T, SpecialDayCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpecialDayPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SpecialDay.
     * @param {SpecialDayDeleteArgs} args - Arguments to delete one SpecialDay.
     * @example
     * // Delete one SpecialDay
     * const SpecialDay = await prisma.specialDay.delete({
     *   where: {
     *     // ... filter to delete one SpecialDay
     *   }
     * })
     * 
     */
    delete<T extends SpecialDayDeleteArgs>(args: SelectSubset<T, SpecialDayDeleteArgs<ExtArgs>>): Prisma__SpecialDayClient<$Result.GetResult<Prisma.$SpecialDayPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SpecialDay.
     * @param {SpecialDayUpdateArgs} args - Arguments to update one SpecialDay.
     * @example
     * // Update one SpecialDay
     * const specialDay = await prisma.specialDay.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SpecialDayUpdateArgs>(args: SelectSubset<T, SpecialDayUpdateArgs<ExtArgs>>): Prisma__SpecialDayClient<$Result.GetResult<Prisma.$SpecialDayPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SpecialDays.
     * @param {SpecialDayDeleteManyArgs} args - Arguments to filter SpecialDays to delete.
     * @example
     * // Delete a few SpecialDays
     * const { count } = await prisma.specialDay.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SpecialDayDeleteManyArgs>(args?: SelectSubset<T, SpecialDayDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SpecialDays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialDayUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SpecialDays
     * const specialDay = await prisma.specialDay.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SpecialDayUpdateManyArgs>(args: SelectSubset<T, SpecialDayUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SpecialDay.
     * @param {SpecialDayUpsertArgs} args - Arguments to update or create a SpecialDay.
     * @example
     * // Update or create a SpecialDay
     * const specialDay = await prisma.specialDay.upsert({
     *   create: {
     *     // ... data to create a SpecialDay
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SpecialDay we want to update
     *   }
     * })
     */
    upsert<T extends SpecialDayUpsertArgs>(args: SelectSubset<T, SpecialDayUpsertArgs<ExtArgs>>): Prisma__SpecialDayClient<$Result.GetResult<Prisma.$SpecialDayPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SpecialDays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialDayCountArgs} args - Arguments to filter SpecialDays to count.
     * @example
     * // Count the number of SpecialDays
     * const count = await prisma.specialDay.count({
     *   where: {
     *     // ... the filter for the SpecialDays we want to count
     *   }
     * })
    **/
    count<T extends SpecialDayCountArgs>(
      args?: Subset<T, SpecialDayCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpecialDayCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SpecialDay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialDayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpecialDayAggregateArgs>(args: Subset<T, SpecialDayAggregateArgs>): Prisma.PrismaPromise<GetSpecialDayAggregateType<T>>

    /**
     * Group by SpecialDay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialDayGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpecialDayGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpecialDayGroupByArgs['orderBy'] }
        : { orderBy?: SpecialDayGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpecialDayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpecialDayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SpecialDay model
   */
  readonly fields: SpecialDayFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SpecialDay.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SpecialDayClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    connection<T extends ConnectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConnectionDefaultArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SpecialDay model
   */ 
  interface SpecialDayFieldRefs {
    readonly id: FieldRef<"SpecialDay", 'String'>
    readonly title: FieldRef<"SpecialDay", 'String'>
    readonly description: FieldRef<"SpecialDay", 'String'>
    readonly date: FieldRef<"SpecialDay", 'DateTime'>
    readonly isRecurring: FieldRef<"SpecialDay", 'Boolean'>
    readonly createdAt: FieldRef<"SpecialDay", 'DateTime'>
    readonly updatedAt: FieldRef<"SpecialDay", 'DateTime'>
    readonly isConfirmed: FieldRef<"SpecialDay", 'Boolean'>
    readonly confirmedAt: FieldRef<"SpecialDay", 'DateTime'>
    readonly confirmedById: FieldRef<"SpecialDay", 'String'>
    readonly userId: FieldRef<"SpecialDay", 'String'>
    readonly connectionId: FieldRef<"SpecialDay", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SpecialDay findUnique
   */
  export type SpecialDayFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialDay
     */
    select?: SpecialDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialDayInclude<ExtArgs> | null
    /**
     * Filter, which SpecialDay to fetch.
     */
    where: SpecialDayWhereUniqueInput
  }

  /**
   * SpecialDay findUniqueOrThrow
   */
  export type SpecialDayFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialDay
     */
    select?: SpecialDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialDayInclude<ExtArgs> | null
    /**
     * Filter, which SpecialDay to fetch.
     */
    where: SpecialDayWhereUniqueInput
  }

  /**
   * SpecialDay findFirst
   */
  export type SpecialDayFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialDay
     */
    select?: SpecialDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialDayInclude<ExtArgs> | null
    /**
     * Filter, which SpecialDay to fetch.
     */
    where?: SpecialDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpecialDays to fetch.
     */
    orderBy?: SpecialDayOrderByWithRelationInput | SpecialDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpecialDays.
     */
    cursor?: SpecialDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpecialDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpecialDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpecialDays.
     */
    distinct?: SpecialDayScalarFieldEnum | SpecialDayScalarFieldEnum[]
  }

  /**
   * SpecialDay findFirstOrThrow
   */
  export type SpecialDayFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialDay
     */
    select?: SpecialDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialDayInclude<ExtArgs> | null
    /**
     * Filter, which SpecialDay to fetch.
     */
    where?: SpecialDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpecialDays to fetch.
     */
    orderBy?: SpecialDayOrderByWithRelationInput | SpecialDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpecialDays.
     */
    cursor?: SpecialDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpecialDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpecialDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpecialDays.
     */
    distinct?: SpecialDayScalarFieldEnum | SpecialDayScalarFieldEnum[]
  }

  /**
   * SpecialDay findMany
   */
  export type SpecialDayFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialDay
     */
    select?: SpecialDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialDayInclude<ExtArgs> | null
    /**
     * Filter, which SpecialDays to fetch.
     */
    where?: SpecialDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpecialDays to fetch.
     */
    orderBy?: SpecialDayOrderByWithRelationInput | SpecialDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SpecialDays.
     */
    cursor?: SpecialDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpecialDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpecialDays.
     */
    skip?: number
    distinct?: SpecialDayScalarFieldEnum | SpecialDayScalarFieldEnum[]
  }

  /**
   * SpecialDay create
   */
  export type SpecialDayCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialDay
     */
    select?: SpecialDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialDayInclude<ExtArgs> | null
    /**
     * The data needed to create a SpecialDay.
     */
    data: XOR<SpecialDayCreateInput, SpecialDayUncheckedCreateInput>
  }

  /**
   * SpecialDay createMany
   */
  export type SpecialDayCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SpecialDays.
     */
    data: SpecialDayCreateManyInput | SpecialDayCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SpecialDay createManyAndReturn
   */
  export type SpecialDayCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialDay
     */
    select?: SpecialDaySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SpecialDays.
     */
    data: SpecialDayCreateManyInput | SpecialDayCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialDayIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SpecialDay update
   */
  export type SpecialDayUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialDay
     */
    select?: SpecialDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialDayInclude<ExtArgs> | null
    /**
     * The data needed to update a SpecialDay.
     */
    data: XOR<SpecialDayUpdateInput, SpecialDayUncheckedUpdateInput>
    /**
     * Choose, which SpecialDay to update.
     */
    where: SpecialDayWhereUniqueInput
  }

  /**
   * SpecialDay updateMany
   */
  export type SpecialDayUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SpecialDays.
     */
    data: XOR<SpecialDayUpdateManyMutationInput, SpecialDayUncheckedUpdateManyInput>
    /**
     * Filter which SpecialDays to update
     */
    where?: SpecialDayWhereInput
  }

  /**
   * SpecialDay upsert
   */
  export type SpecialDayUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialDay
     */
    select?: SpecialDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialDayInclude<ExtArgs> | null
    /**
     * The filter to search for the SpecialDay to update in case it exists.
     */
    where: SpecialDayWhereUniqueInput
    /**
     * In case the SpecialDay found by the `where` argument doesn't exist, create a new SpecialDay with this data.
     */
    create: XOR<SpecialDayCreateInput, SpecialDayUncheckedCreateInput>
    /**
     * In case the SpecialDay was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SpecialDayUpdateInput, SpecialDayUncheckedUpdateInput>
  }

  /**
   * SpecialDay delete
   */
  export type SpecialDayDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialDay
     */
    select?: SpecialDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialDayInclude<ExtArgs> | null
    /**
     * Filter which SpecialDay to delete.
     */
    where: SpecialDayWhereUniqueInput
  }

  /**
   * SpecialDay deleteMany
   */
  export type SpecialDayDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpecialDays to delete
     */
    where?: SpecialDayWhereInput
  }

  /**
   * SpecialDay without action
   */
  export type SpecialDayDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialDay
     */
    select?: SpecialDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialDayInclude<ExtArgs> | null
  }


  /**
   * Model Goal
   */

  export type AggregateGoal = {
    _count: GoalCountAggregateOutputType | null
    _min: GoalMinAggregateOutputType | null
    _max: GoalMaxAggregateOutputType | null
  }

  export type GoalMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    isCompleted: boolean | null
    dueDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    connectionId: string | null
  }

  export type GoalMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    isCompleted: boolean | null
    dueDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    connectionId: string | null
  }

  export type GoalCountAggregateOutputType = {
    id: number
    title: number
    description: number
    isCompleted: number
    dueDate: number
    createdAt: number
    updatedAt: number
    userId: number
    connectionId: number
    _all: number
  }


  export type GoalMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    isCompleted?: true
    dueDate?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    connectionId?: true
  }

  export type GoalMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    isCompleted?: true
    dueDate?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    connectionId?: true
  }

  export type GoalCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    isCompleted?: true
    dueDate?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    connectionId?: true
    _all?: true
  }

  export type GoalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Goal to aggregate.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Goals
    **/
    _count?: true | GoalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoalMaxAggregateInputType
  }

  export type GetGoalAggregateType<T extends GoalAggregateArgs> = {
        [P in keyof T & keyof AggregateGoal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoal[P]>
      : GetScalarType<T[P], AggregateGoal[P]>
  }




  export type GoalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
    orderBy?: GoalOrderByWithAggregationInput | GoalOrderByWithAggregationInput[]
    by: GoalScalarFieldEnum[] | GoalScalarFieldEnum
    having?: GoalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoalCountAggregateInputType | true
    _min?: GoalMinAggregateInputType
    _max?: GoalMaxAggregateInputType
  }

  export type GoalGroupByOutputType = {
    id: string
    title: string
    description: string | null
    isCompleted: boolean
    dueDate: Date | null
    createdAt: Date
    updatedAt: Date
    userId: string
    connectionId: string
    _count: GoalCountAggregateOutputType | null
    _min: GoalMinAggregateOutputType | null
    _max: GoalMaxAggregateOutputType | null
  }

  type GetGoalGroupByPayload<T extends GoalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoalGroupByOutputType[P]>
            : GetScalarType<T[P], GoalGroupByOutputType[P]>
        }
      >
    >


  export type GoalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    isCompleted?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    connectionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goal"]>

  export type GoalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    isCompleted?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    connectionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goal"]>

  export type GoalSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    isCompleted?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    connectionId?: boolean
  }

  export type GoalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }
  export type GoalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }

  export type $GoalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Goal"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      connection: Prisma.$ConnectionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      isCompleted: boolean
      dueDate: Date | null
      createdAt: Date
      updatedAt: Date
      userId: string
      connectionId: string
    }, ExtArgs["result"]["goal"]>
    composites: {}
  }

  type GoalGetPayload<S extends boolean | null | undefined | GoalDefaultArgs> = $Result.GetResult<Prisma.$GoalPayload, S>

  type GoalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GoalFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GoalCountAggregateInputType | true
    }

  export interface GoalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Goal'], meta: { name: 'Goal' } }
    /**
     * Find zero or one Goal that matches the filter.
     * @param {GoalFindUniqueArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GoalFindUniqueArgs>(args: SelectSubset<T, GoalFindUniqueArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Goal that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GoalFindUniqueOrThrowArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GoalFindUniqueOrThrowArgs>(args: SelectSubset<T, GoalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Goal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindFirstArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GoalFindFirstArgs>(args?: SelectSubset<T, GoalFindFirstArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Goal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindFirstOrThrowArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GoalFindFirstOrThrowArgs>(args?: SelectSubset<T, GoalFindFirstOrThrowArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Goals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Goals
     * const goals = await prisma.goal.findMany()
     * 
     * // Get first 10 Goals
     * const goals = await prisma.goal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goalWithIdOnly = await prisma.goal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GoalFindManyArgs>(args?: SelectSubset<T, GoalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Goal.
     * @param {GoalCreateArgs} args - Arguments to create a Goal.
     * @example
     * // Create one Goal
     * const Goal = await prisma.goal.create({
     *   data: {
     *     // ... data to create a Goal
     *   }
     * })
     * 
     */
    create<T extends GoalCreateArgs>(args: SelectSubset<T, GoalCreateArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Goals.
     * @param {GoalCreateManyArgs} args - Arguments to create many Goals.
     * @example
     * // Create many Goals
     * const goal = await prisma.goal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GoalCreateManyArgs>(args?: SelectSubset<T, GoalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Goals and returns the data saved in the database.
     * @param {GoalCreateManyAndReturnArgs} args - Arguments to create many Goals.
     * @example
     * // Create many Goals
     * const goal = await prisma.goal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Goals and only return the `id`
     * const goalWithIdOnly = await prisma.goal.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GoalCreateManyAndReturnArgs>(args?: SelectSubset<T, GoalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Goal.
     * @param {GoalDeleteArgs} args - Arguments to delete one Goal.
     * @example
     * // Delete one Goal
     * const Goal = await prisma.goal.delete({
     *   where: {
     *     // ... filter to delete one Goal
     *   }
     * })
     * 
     */
    delete<T extends GoalDeleteArgs>(args: SelectSubset<T, GoalDeleteArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Goal.
     * @param {GoalUpdateArgs} args - Arguments to update one Goal.
     * @example
     * // Update one Goal
     * const goal = await prisma.goal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GoalUpdateArgs>(args: SelectSubset<T, GoalUpdateArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Goals.
     * @param {GoalDeleteManyArgs} args - Arguments to filter Goals to delete.
     * @example
     * // Delete a few Goals
     * const { count } = await prisma.goal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GoalDeleteManyArgs>(args?: SelectSubset<T, GoalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Goals
     * const goal = await prisma.goal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GoalUpdateManyArgs>(args: SelectSubset<T, GoalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Goal.
     * @param {GoalUpsertArgs} args - Arguments to update or create a Goal.
     * @example
     * // Update or create a Goal
     * const goal = await prisma.goal.upsert({
     *   create: {
     *     // ... data to create a Goal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Goal we want to update
     *   }
     * })
     */
    upsert<T extends GoalUpsertArgs>(args: SelectSubset<T, GoalUpsertArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalCountArgs} args - Arguments to filter Goals to count.
     * @example
     * // Count the number of Goals
     * const count = await prisma.goal.count({
     *   where: {
     *     // ... the filter for the Goals we want to count
     *   }
     * })
    **/
    count<T extends GoalCountArgs>(
      args?: Subset<T, GoalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Goal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoalAggregateArgs>(args: Subset<T, GoalAggregateArgs>): Prisma.PrismaPromise<GetGoalAggregateType<T>>

    /**
     * Group by Goal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoalGroupByArgs['orderBy'] }
        : { orderBy?: GoalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Goal model
   */
  readonly fields: GoalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Goal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GoalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    connection<T extends ConnectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConnectionDefaultArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Goal model
   */ 
  interface GoalFieldRefs {
    readonly id: FieldRef<"Goal", 'String'>
    readonly title: FieldRef<"Goal", 'String'>
    readonly description: FieldRef<"Goal", 'String'>
    readonly isCompleted: FieldRef<"Goal", 'Boolean'>
    readonly dueDate: FieldRef<"Goal", 'DateTime'>
    readonly createdAt: FieldRef<"Goal", 'DateTime'>
    readonly updatedAt: FieldRef<"Goal", 'DateTime'>
    readonly userId: FieldRef<"Goal", 'String'>
    readonly connectionId: FieldRef<"Goal", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Goal findUnique
   */
  export type GoalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal findUniqueOrThrow
   */
  export type GoalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal findFirst
   */
  export type GoalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goals.
     */
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal findFirstOrThrow
   */
  export type GoalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goals.
     */
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal findMany
   */
  export type GoalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goals to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal create
   */
  export type GoalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The data needed to create a Goal.
     */
    data: XOR<GoalCreateInput, GoalUncheckedCreateInput>
  }

  /**
   * Goal createMany
   */
  export type GoalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Goals.
     */
    data: GoalCreateManyInput | GoalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Goal createManyAndReturn
   */
  export type GoalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Goals.
     */
    data: GoalCreateManyInput | GoalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Goal update
   */
  export type GoalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The data needed to update a Goal.
     */
    data: XOR<GoalUpdateInput, GoalUncheckedUpdateInput>
    /**
     * Choose, which Goal to update.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal updateMany
   */
  export type GoalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Goals.
     */
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyInput>
    /**
     * Filter which Goals to update
     */
    where?: GoalWhereInput
  }

  /**
   * Goal upsert
   */
  export type GoalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The filter to search for the Goal to update in case it exists.
     */
    where: GoalWhereUniqueInput
    /**
     * In case the Goal found by the `where` argument doesn't exist, create a new Goal with this data.
     */
    create: XOR<GoalCreateInput, GoalUncheckedCreateInput>
    /**
     * In case the Goal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GoalUpdateInput, GoalUncheckedUpdateInput>
  }

  /**
   * Goal delete
   */
  export type GoalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter which Goal to delete.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal deleteMany
   */
  export type GoalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Goals to delete
     */
    where?: GoalWhereInput
  }

  /**
   * Goal without action
   */
  export type GoalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
  }


  /**
   * Model Dream
   */

  export type AggregateDream = {
    _count: DreamCountAggregateOutputType | null
    _avg: DreamAvgAggregateOutputType | null
    _sum: DreamSumAggregateOutputType | null
    _min: DreamMinAggregateOutputType | null
    _max: DreamMaxAggregateOutputType | null
  }

  export type DreamAvgAggregateOutputType = {
    position: number | null
  }

  export type DreamSumAggregateOutputType = {
    position: number | null
  }

  export type DreamMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    imageUrl: string | null
    linkUrl: string | null
    category: $Enums.DreamCategory | null
    position: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    connectionId: string | null
  }

  export type DreamMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    imageUrl: string | null
    linkUrl: string | null
    category: $Enums.DreamCategory | null
    position: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    connectionId: string | null
  }

  export type DreamCountAggregateOutputType = {
    id: number
    title: number
    description: number
    imageUrl: number
    linkUrl: number
    category: number
    position: number
    createdAt: number
    updatedAt: number
    userId: number
    connectionId: number
    _all: number
  }


  export type DreamAvgAggregateInputType = {
    position?: true
  }

  export type DreamSumAggregateInputType = {
    position?: true
  }

  export type DreamMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    imageUrl?: true
    linkUrl?: true
    category?: true
    position?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    connectionId?: true
  }

  export type DreamMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    imageUrl?: true
    linkUrl?: true
    category?: true
    position?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    connectionId?: true
  }

  export type DreamCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    imageUrl?: true
    linkUrl?: true
    category?: true
    position?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    connectionId?: true
    _all?: true
  }

  export type DreamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dream to aggregate.
     */
    where?: DreamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dreams to fetch.
     */
    orderBy?: DreamOrderByWithRelationInput | DreamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DreamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dreams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dreams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Dreams
    **/
    _count?: true | DreamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DreamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DreamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DreamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DreamMaxAggregateInputType
  }

  export type GetDreamAggregateType<T extends DreamAggregateArgs> = {
        [P in keyof T & keyof AggregateDream]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDream[P]>
      : GetScalarType<T[P], AggregateDream[P]>
  }




  export type DreamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DreamWhereInput
    orderBy?: DreamOrderByWithAggregationInput | DreamOrderByWithAggregationInput[]
    by: DreamScalarFieldEnum[] | DreamScalarFieldEnum
    having?: DreamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DreamCountAggregateInputType | true
    _avg?: DreamAvgAggregateInputType
    _sum?: DreamSumAggregateInputType
    _min?: DreamMinAggregateInputType
    _max?: DreamMaxAggregateInputType
  }

  export type DreamGroupByOutputType = {
    id: string
    title: string
    description: string
    imageUrl: string | null
    linkUrl: string | null
    category: $Enums.DreamCategory
    position: number
    createdAt: Date
    updatedAt: Date
    userId: string
    connectionId: string
    _count: DreamCountAggregateOutputType | null
    _avg: DreamAvgAggregateOutputType | null
    _sum: DreamSumAggregateOutputType | null
    _min: DreamMinAggregateOutputType | null
    _max: DreamMaxAggregateOutputType | null
  }

  type GetDreamGroupByPayload<T extends DreamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DreamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DreamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DreamGroupByOutputType[P]>
            : GetScalarType<T[P], DreamGroupByOutputType[P]>
        }
      >
    >


  export type DreamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    imageUrl?: boolean
    linkUrl?: boolean
    category?: boolean
    position?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    connectionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
    comments?: boolean | Dream$commentsArgs<ExtArgs>
    _count?: boolean | DreamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dream"]>

  export type DreamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    imageUrl?: boolean
    linkUrl?: boolean
    category?: boolean
    position?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    connectionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dream"]>

  export type DreamSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    imageUrl?: boolean
    linkUrl?: boolean
    category?: boolean
    position?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    connectionId?: boolean
  }

  export type DreamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
    comments?: boolean | Dream$commentsArgs<ExtArgs>
    _count?: boolean | DreamCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DreamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }

  export type $DreamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Dream"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      connection: Prisma.$ConnectionPayload<ExtArgs>
      comments: Prisma.$DreamCommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      imageUrl: string | null
      linkUrl: string | null
      category: $Enums.DreamCategory
      position: number
      createdAt: Date
      updatedAt: Date
      userId: string
      connectionId: string
    }, ExtArgs["result"]["dream"]>
    composites: {}
  }

  type DreamGetPayload<S extends boolean | null | undefined | DreamDefaultArgs> = $Result.GetResult<Prisma.$DreamPayload, S>

  type DreamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DreamFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DreamCountAggregateInputType | true
    }

  export interface DreamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Dream'], meta: { name: 'Dream' } }
    /**
     * Find zero or one Dream that matches the filter.
     * @param {DreamFindUniqueArgs} args - Arguments to find a Dream
     * @example
     * // Get one Dream
     * const dream = await prisma.dream.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DreamFindUniqueArgs>(args: SelectSubset<T, DreamFindUniqueArgs<ExtArgs>>): Prisma__DreamClient<$Result.GetResult<Prisma.$DreamPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Dream that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DreamFindUniqueOrThrowArgs} args - Arguments to find a Dream
     * @example
     * // Get one Dream
     * const dream = await prisma.dream.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DreamFindUniqueOrThrowArgs>(args: SelectSubset<T, DreamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DreamClient<$Result.GetResult<Prisma.$DreamPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Dream that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DreamFindFirstArgs} args - Arguments to find a Dream
     * @example
     * // Get one Dream
     * const dream = await prisma.dream.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DreamFindFirstArgs>(args?: SelectSubset<T, DreamFindFirstArgs<ExtArgs>>): Prisma__DreamClient<$Result.GetResult<Prisma.$DreamPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Dream that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DreamFindFirstOrThrowArgs} args - Arguments to find a Dream
     * @example
     * // Get one Dream
     * const dream = await prisma.dream.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DreamFindFirstOrThrowArgs>(args?: SelectSubset<T, DreamFindFirstOrThrowArgs<ExtArgs>>): Prisma__DreamClient<$Result.GetResult<Prisma.$DreamPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Dreams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DreamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dreams
     * const dreams = await prisma.dream.findMany()
     * 
     * // Get first 10 Dreams
     * const dreams = await prisma.dream.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dreamWithIdOnly = await prisma.dream.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DreamFindManyArgs>(args?: SelectSubset<T, DreamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DreamPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Dream.
     * @param {DreamCreateArgs} args - Arguments to create a Dream.
     * @example
     * // Create one Dream
     * const Dream = await prisma.dream.create({
     *   data: {
     *     // ... data to create a Dream
     *   }
     * })
     * 
     */
    create<T extends DreamCreateArgs>(args: SelectSubset<T, DreamCreateArgs<ExtArgs>>): Prisma__DreamClient<$Result.GetResult<Prisma.$DreamPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Dreams.
     * @param {DreamCreateManyArgs} args - Arguments to create many Dreams.
     * @example
     * // Create many Dreams
     * const dream = await prisma.dream.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DreamCreateManyArgs>(args?: SelectSubset<T, DreamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Dreams and returns the data saved in the database.
     * @param {DreamCreateManyAndReturnArgs} args - Arguments to create many Dreams.
     * @example
     * // Create many Dreams
     * const dream = await prisma.dream.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Dreams and only return the `id`
     * const dreamWithIdOnly = await prisma.dream.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DreamCreateManyAndReturnArgs>(args?: SelectSubset<T, DreamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DreamPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Dream.
     * @param {DreamDeleteArgs} args - Arguments to delete one Dream.
     * @example
     * // Delete one Dream
     * const Dream = await prisma.dream.delete({
     *   where: {
     *     // ... filter to delete one Dream
     *   }
     * })
     * 
     */
    delete<T extends DreamDeleteArgs>(args: SelectSubset<T, DreamDeleteArgs<ExtArgs>>): Prisma__DreamClient<$Result.GetResult<Prisma.$DreamPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Dream.
     * @param {DreamUpdateArgs} args - Arguments to update one Dream.
     * @example
     * // Update one Dream
     * const dream = await prisma.dream.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DreamUpdateArgs>(args: SelectSubset<T, DreamUpdateArgs<ExtArgs>>): Prisma__DreamClient<$Result.GetResult<Prisma.$DreamPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Dreams.
     * @param {DreamDeleteManyArgs} args - Arguments to filter Dreams to delete.
     * @example
     * // Delete a few Dreams
     * const { count } = await prisma.dream.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DreamDeleteManyArgs>(args?: SelectSubset<T, DreamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dreams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DreamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dreams
     * const dream = await prisma.dream.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DreamUpdateManyArgs>(args: SelectSubset<T, DreamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Dream.
     * @param {DreamUpsertArgs} args - Arguments to update or create a Dream.
     * @example
     * // Update or create a Dream
     * const dream = await prisma.dream.upsert({
     *   create: {
     *     // ... data to create a Dream
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dream we want to update
     *   }
     * })
     */
    upsert<T extends DreamUpsertArgs>(args: SelectSubset<T, DreamUpsertArgs<ExtArgs>>): Prisma__DreamClient<$Result.GetResult<Prisma.$DreamPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Dreams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DreamCountArgs} args - Arguments to filter Dreams to count.
     * @example
     * // Count the number of Dreams
     * const count = await prisma.dream.count({
     *   where: {
     *     // ... the filter for the Dreams we want to count
     *   }
     * })
    **/
    count<T extends DreamCountArgs>(
      args?: Subset<T, DreamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DreamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dream.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DreamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DreamAggregateArgs>(args: Subset<T, DreamAggregateArgs>): Prisma.PrismaPromise<GetDreamAggregateType<T>>

    /**
     * Group by Dream.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DreamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DreamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DreamGroupByArgs['orderBy'] }
        : { orderBy?: DreamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DreamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDreamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Dream model
   */
  readonly fields: DreamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Dream.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DreamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    connection<T extends ConnectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConnectionDefaultArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    comments<T extends Dream$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Dream$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DreamCommentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Dream model
   */ 
  interface DreamFieldRefs {
    readonly id: FieldRef<"Dream", 'String'>
    readonly title: FieldRef<"Dream", 'String'>
    readonly description: FieldRef<"Dream", 'String'>
    readonly imageUrl: FieldRef<"Dream", 'String'>
    readonly linkUrl: FieldRef<"Dream", 'String'>
    readonly category: FieldRef<"Dream", 'DreamCategory'>
    readonly position: FieldRef<"Dream", 'Int'>
    readonly createdAt: FieldRef<"Dream", 'DateTime'>
    readonly updatedAt: FieldRef<"Dream", 'DateTime'>
    readonly userId: FieldRef<"Dream", 'String'>
    readonly connectionId: FieldRef<"Dream", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Dream findUnique
   */
  export type DreamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dream
     */
    select?: DreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamInclude<ExtArgs> | null
    /**
     * Filter, which Dream to fetch.
     */
    where: DreamWhereUniqueInput
  }

  /**
   * Dream findUniqueOrThrow
   */
  export type DreamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dream
     */
    select?: DreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamInclude<ExtArgs> | null
    /**
     * Filter, which Dream to fetch.
     */
    where: DreamWhereUniqueInput
  }

  /**
   * Dream findFirst
   */
  export type DreamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dream
     */
    select?: DreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamInclude<ExtArgs> | null
    /**
     * Filter, which Dream to fetch.
     */
    where?: DreamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dreams to fetch.
     */
    orderBy?: DreamOrderByWithRelationInput | DreamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dreams.
     */
    cursor?: DreamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dreams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dreams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dreams.
     */
    distinct?: DreamScalarFieldEnum | DreamScalarFieldEnum[]
  }

  /**
   * Dream findFirstOrThrow
   */
  export type DreamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dream
     */
    select?: DreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamInclude<ExtArgs> | null
    /**
     * Filter, which Dream to fetch.
     */
    where?: DreamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dreams to fetch.
     */
    orderBy?: DreamOrderByWithRelationInput | DreamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dreams.
     */
    cursor?: DreamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dreams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dreams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dreams.
     */
    distinct?: DreamScalarFieldEnum | DreamScalarFieldEnum[]
  }

  /**
   * Dream findMany
   */
  export type DreamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dream
     */
    select?: DreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamInclude<ExtArgs> | null
    /**
     * Filter, which Dreams to fetch.
     */
    where?: DreamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dreams to fetch.
     */
    orderBy?: DreamOrderByWithRelationInput | DreamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Dreams.
     */
    cursor?: DreamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dreams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dreams.
     */
    skip?: number
    distinct?: DreamScalarFieldEnum | DreamScalarFieldEnum[]
  }

  /**
   * Dream create
   */
  export type DreamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dream
     */
    select?: DreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamInclude<ExtArgs> | null
    /**
     * The data needed to create a Dream.
     */
    data: XOR<DreamCreateInput, DreamUncheckedCreateInput>
  }

  /**
   * Dream createMany
   */
  export type DreamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Dreams.
     */
    data: DreamCreateManyInput | DreamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Dream createManyAndReturn
   */
  export type DreamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dream
     */
    select?: DreamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Dreams.
     */
    data: DreamCreateManyInput | DreamCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Dream update
   */
  export type DreamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dream
     */
    select?: DreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamInclude<ExtArgs> | null
    /**
     * The data needed to update a Dream.
     */
    data: XOR<DreamUpdateInput, DreamUncheckedUpdateInput>
    /**
     * Choose, which Dream to update.
     */
    where: DreamWhereUniqueInput
  }

  /**
   * Dream updateMany
   */
  export type DreamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Dreams.
     */
    data: XOR<DreamUpdateManyMutationInput, DreamUncheckedUpdateManyInput>
    /**
     * Filter which Dreams to update
     */
    where?: DreamWhereInput
  }

  /**
   * Dream upsert
   */
  export type DreamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dream
     */
    select?: DreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamInclude<ExtArgs> | null
    /**
     * The filter to search for the Dream to update in case it exists.
     */
    where: DreamWhereUniqueInput
    /**
     * In case the Dream found by the `where` argument doesn't exist, create a new Dream with this data.
     */
    create: XOR<DreamCreateInput, DreamUncheckedCreateInput>
    /**
     * In case the Dream was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DreamUpdateInput, DreamUncheckedUpdateInput>
  }

  /**
   * Dream delete
   */
  export type DreamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dream
     */
    select?: DreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamInclude<ExtArgs> | null
    /**
     * Filter which Dream to delete.
     */
    where: DreamWhereUniqueInput
  }

  /**
   * Dream deleteMany
   */
  export type DreamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dreams to delete
     */
    where?: DreamWhereInput
  }

  /**
   * Dream.comments
   */
  export type Dream$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DreamComment
     */
    select?: DreamCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamCommentInclude<ExtArgs> | null
    where?: DreamCommentWhereInput
    orderBy?: DreamCommentOrderByWithRelationInput | DreamCommentOrderByWithRelationInput[]
    cursor?: DreamCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DreamCommentScalarFieldEnum | DreamCommentScalarFieldEnum[]
  }

  /**
   * Dream without action
   */
  export type DreamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dream
     */
    select?: DreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamInclude<ExtArgs> | null
  }


  /**
   * Model DreamComment
   */

  export type AggregateDreamComment = {
    _count: DreamCommentCountAggregateOutputType | null
    _min: DreamCommentMinAggregateOutputType | null
    _max: DreamCommentMaxAggregateOutputType | null
  }

  export type DreamCommentMinAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    dreamId: string | null
    userId: string | null
  }

  export type DreamCommentMaxAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    dreamId: string | null
    userId: string | null
  }

  export type DreamCommentCountAggregateOutputType = {
    id: number
    content: number
    createdAt: number
    updatedAt: number
    dreamId: number
    userId: number
    _all: number
  }


  export type DreamCommentMinAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    dreamId?: true
    userId?: true
  }

  export type DreamCommentMaxAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    dreamId?: true
    userId?: true
  }

  export type DreamCommentCountAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    dreamId?: true
    userId?: true
    _all?: true
  }

  export type DreamCommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DreamComment to aggregate.
     */
    where?: DreamCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DreamComments to fetch.
     */
    orderBy?: DreamCommentOrderByWithRelationInput | DreamCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DreamCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DreamComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DreamComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DreamComments
    **/
    _count?: true | DreamCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DreamCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DreamCommentMaxAggregateInputType
  }

  export type GetDreamCommentAggregateType<T extends DreamCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateDreamComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDreamComment[P]>
      : GetScalarType<T[P], AggregateDreamComment[P]>
  }




  export type DreamCommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DreamCommentWhereInput
    orderBy?: DreamCommentOrderByWithAggregationInput | DreamCommentOrderByWithAggregationInput[]
    by: DreamCommentScalarFieldEnum[] | DreamCommentScalarFieldEnum
    having?: DreamCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DreamCommentCountAggregateInputType | true
    _min?: DreamCommentMinAggregateInputType
    _max?: DreamCommentMaxAggregateInputType
  }

  export type DreamCommentGroupByOutputType = {
    id: string
    content: string
    createdAt: Date
    updatedAt: Date
    dreamId: string
    userId: string
    _count: DreamCommentCountAggregateOutputType | null
    _min: DreamCommentMinAggregateOutputType | null
    _max: DreamCommentMaxAggregateOutputType | null
  }

  type GetDreamCommentGroupByPayload<T extends DreamCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DreamCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DreamCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DreamCommentGroupByOutputType[P]>
            : GetScalarType<T[P], DreamCommentGroupByOutputType[P]>
        }
      >
    >


  export type DreamCommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dreamId?: boolean
    userId?: boolean
    dream?: boolean | DreamDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dreamComment"]>

  export type DreamCommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dreamId?: boolean
    userId?: boolean
    dream?: boolean | DreamDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dreamComment"]>

  export type DreamCommentSelectScalar = {
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dreamId?: boolean
    userId?: boolean
  }

  export type DreamCommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dream?: boolean | DreamDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DreamCommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dream?: boolean | DreamDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DreamCommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DreamComment"
    objects: {
      dream: Prisma.$DreamPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      createdAt: Date
      updatedAt: Date
      dreamId: string
      userId: string
    }, ExtArgs["result"]["dreamComment"]>
    composites: {}
  }

  type DreamCommentGetPayload<S extends boolean | null | undefined | DreamCommentDefaultArgs> = $Result.GetResult<Prisma.$DreamCommentPayload, S>

  type DreamCommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DreamCommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DreamCommentCountAggregateInputType | true
    }

  export interface DreamCommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DreamComment'], meta: { name: 'DreamComment' } }
    /**
     * Find zero or one DreamComment that matches the filter.
     * @param {DreamCommentFindUniqueArgs} args - Arguments to find a DreamComment
     * @example
     * // Get one DreamComment
     * const dreamComment = await prisma.dreamComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DreamCommentFindUniqueArgs>(args: SelectSubset<T, DreamCommentFindUniqueArgs<ExtArgs>>): Prisma__DreamCommentClient<$Result.GetResult<Prisma.$DreamCommentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DreamComment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DreamCommentFindUniqueOrThrowArgs} args - Arguments to find a DreamComment
     * @example
     * // Get one DreamComment
     * const dreamComment = await prisma.dreamComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DreamCommentFindUniqueOrThrowArgs>(args: SelectSubset<T, DreamCommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DreamCommentClient<$Result.GetResult<Prisma.$DreamCommentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DreamComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DreamCommentFindFirstArgs} args - Arguments to find a DreamComment
     * @example
     * // Get one DreamComment
     * const dreamComment = await prisma.dreamComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DreamCommentFindFirstArgs>(args?: SelectSubset<T, DreamCommentFindFirstArgs<ExtArgs>>): Prisma__DreamCommentClient<$Result.GetResult<Prisma.$DreamCommentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DreamComment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DreamCommentFindFirstOrThrowArgs} args - Arguments to find a DreamComment
     * @example
     * // Get one DreamComment
     * const dreamComment = await prisma.dreamComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DreamCommentFindFirstOrThrowArgs>(args?: SelectSubset<T, DreamCommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DreamCommentClient<$Result.GetResult<Prisma.$DreamCommentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DreamComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DreamCommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DreamComments
     * const dreamComments = await prisma.dreamComment.findMany()
     * 
     * // Get first 10 DreamComments
     * const dreamComments = await prisma.dreamComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dreamCommentWithIdOnly = await prisma.dreamComment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DreamCommentFindManyArgs>(args?: SelectSubset<T, DreamCommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DreamCommentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DreamComment.
     * @param {DreamCommentCreateArgs} args - Arguments to create a DreamComment.
     * @example
     * // Create one DreamComment
     * const DreamComment = await prisma.dreamComment.create({
     *   data: {
     *     // ... data to create a DreamComment
     *   }
     * })
     * 
     */
    create<T extends DreamCommentCreateArgs>(args: SelectSubset<T, DreamCommentCreateArgs<ExtArgs>>): Prisma__DreamCommentClient<$Result.GetResult<Prisma.$DreamCommentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DreamComments.
     * @param {DreamCommentCreateManyArgs} args - Arguments to create many DreamComments.
     * @example
     * // Create many DreamComments
     * const dreamComment = await prisma.dreamComment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DreamCommentCreateManyArgs>(args?: SelectSubset<T, DreamCommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DreamComments and returns the data saved in the database.
     * @param {DreamCommentCreateManyAndReturnArgs} args - Arguments to create many DreamComments.
     * @example
     * // Create many DreamComments
     * const dreamComment = await prisma.dreamComment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DreamComments and only return the `id`
     * const dreamCommentWithIdOnly = await prisma.dreamComment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DreamCommentCreateManyAndReturnArgs>(args?: SelectSubset<T, DreamCommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DreamCommentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DreamComment.
     * @param {DreamCommentDeleteArgs} args - Arguments to delete one DreamComment.
     * @example
     * // Delete one DreamComment
     * const DreamComment = await prisma.dreamComment.delete({
     *   where: {
     *     // ... filter to delete one DreamComment
     *   }
     * })
     * 
     */
    delete<T extends DreamCommentDeleteArgs>(args: SelectSubset<T, DreamCommentDeleteArgs<ExtArgs>>): Prisma__DreamCommentClient<$Result.GetResult<Prisma.$DreamCommentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DreamComment.
     * @param {DreamCommentUpdateArgs} args - Arguments to update one DreamComment.
     * @example
     * // Update one DreamComment
     * const dreamComment = await prisma.dreamComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DreamCommentUpdateArgs>(args: SelectSubset<T, DreamCommentUpdateArgs<ExtArgs>>): Prisma__DreamCommentClient<$Result.GetResult<Prisma.$DreamCommentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DreamComments.
     * @param {DreamCommentDeleteManyArgs} args - Arguments to filter DreamComments to delete.
     * @example
     * // Delete a few DreamComments
     * const { count } = await prisma.dreamComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DreamCommentDeleteManyArgs>(args?: SelectSubset<T, DreamCommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DreamComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DreamCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DreamComments
     * const dreamComment = await prisma.dreamComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DreamCommentUpdateManyArgs>(args: SelectSubset<T, DreamCommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DreamComment.
     * @param {DreamCommentUpsertArgs} args - Arguments to update or create a DreamComment.
     * @example
     * // Update or create a DreamComment
     * const dreamComment = await prisma.dreamComment.upsert({
     *   create: {
     *     // ... data to create a DreamComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DreamComment we want to update
     *   }
     * })
     */
    upsert<T extends DreamCommentUpsertArgs>(args: SelectSubset<T, DreamCommentUpsertArgs<ExtArgs>>): Prisma__DreamCommentClient<$Result.GetResult<Prisma.$DreamCommentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DreamComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DreamCommentCountArgs} args - Arguments to filter DreamComments to count.
     * @example
     * // Count the number of DreamComments
     * const count = await prisma.dreamComment.count({
     *   where: {
     *     // ... the filter for the DreamComments we want to count
     *   }
     * })
    **/
    count<T extends DreamCommentCountArgs>(
      args?: Subset<T, DreamCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DreamCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DreamComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DreamCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DreamCommentAggregateArgs>(args: Subset<T, DreamCommentAggregateArgs>): Prisma.PrismaPromise<GetDreamCommentAggregateType<T>>

    /**
     * Group by DreamComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DreamCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DreamCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DreamCommentGroupByArgs['orderBy'] }
        : { orderBy?: DreamCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DreamCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDreamCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DreamComment model
   */
  readonly fields: DreamCommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DreamComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DreamCommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dream<T extends DreamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DreamDefaultArgs<ExtArgs>>): Prisma__DreamClient<$Result.GetResult<Prisma.$DreamPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DreamComment model
   */ 
  interface DreamCommentFieldRefs {
    readonly id: FieldRef<"DreamComment", 'String'>
    readonly content: FieldRef<"DreamComment", 'String'>
    readonly createdAt: FieldRef<"DreamComment", 'DateTime'>
    readonly updatedAt: FieldRef<"DreamComment", 'DateTime'>
    readonly dreamId: FieldRef<"DreamComment", 'String'>
    readonly userId: FieldRef<"DreamComment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DreamComment findUnique
   */
  export type DreamCommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DreamComment
     */
    select?: DreamCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamCommentInclude<ExtArgs> | null
    /**
     * Filter, which DreamComment to fetch.
     */
    where: DreamCommentWhereUniqueInput
  }

  /**
   * DreamComment findUniqueOrThrow
   */
  export type DreamCommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DreamComment
     */
    select?: DreamCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamCommentInclude<ExtArgs> | null
    /**
     * Filter, which DreamComment to fetch.
     */
    where: DreamCommentWhereUniqueInput
  }

  /**
   * DreamComment findFirst
   */
  export type DreamCommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DreamComment
     */
    select?: DreamCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamCommentInclude<ExtArgs> | null
    /**
     * Filter, which DreamComment to fetch.
     */
    where?: DreamCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DreamComments to fetch.
     */
    orderBy?: DreamCommentOrderByWithRelationInput | DreamCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DreamComments.
     */
    cursor?: DreamCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DreamComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DreamComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DreamComments.
     */
    distinct?: DreamCommentScalarFieldEnum | DreamCommentScalarFieldEnum[]
  }

  /**
   * DreamComment findFirstOrThrow
   */
  export type DreamCommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DreamComment
     */
    select?: DreamCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamCommentInclude<ExtArgs> | null
    /**
     * Filter, which DreamComment to fetch.
     */
    where?: DreamCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DreamComments to fetch.
     */
    orderBy?: DreamCommentOrderByWithRelationInput | DreamCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DreamComments.
     */
    cursor?: DreamCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DreamComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DreamComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DreamComments.
     */
    distinct?: DreamCommentScalarFieldEnum | DreamCommentScalarFieldEnum[]
  }

  /**
   * DreamComment findMany
   */
  export type DreamCommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DreamComment
     */
    select?: DreamCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamCommentInclude<ExtArgs> | null
    /**
     * Filter, which DreamComments to fetch.
     */
    where?: DreamCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DreamComments to fetch.
     */
    orderBy?: DreamCommentOrderByWithRelationInput | DreamCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DreamComments.
     */
    cursor?: DreamCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DreamComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DreamComments.
     */
    skip?: number
    distinct?: DreamCommentScalarFieldEnum | DreamCommentScalarFieldEnum[]
  }

  /**
   * DreamComment create
   */
  export type DreamCommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DreamComment
     */
    select?: DreamCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamCommentInclude<ExtArgs> | null
    /**
     * The data needed to create a DreamComment.
     */
    data: XOR<DreamCommentCreateInput, DreamCommentUncheckedCreateInput>
  }

  /**
   * DreamComment createMany
   */
  export type DreamCommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DreamComments.
     */
    data: DreamCommentCreateManyInput | DreamCommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DreamComment createManyAndReturn
   */
  export type DreamCommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DreamComment
     */
    select?: DreamCommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DreamComments.
     */
    data: DreamCommentCreateManyInput | DreamCommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamCommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DreamComment update
   */
  export type DreamCommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DreamComment
     */
    select?: DreamCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamCommentInclude<ExtArgs> | null
    /**
     * The data needed to update a DreamComment.
     */
    data: XOR<DreamCommentUpdateInput, DreamCommentUncheckedUpdateInput>
    /**
     * Choose, which DreamComment to update.
     */
    where: DreamCommentWhereUniqueInput
  }

  /**
   * DreamComment updateMany
   */
  export type DreamCommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DreamComments.
     */
    data: XOR<DreamCommentUpdateManyMutationInput, DreamCommentUncheckedUpdateManyInput>
    /**
     * Filter which DreamComments to update
     */
    where?: DreamCommentWhereInput
  }

  /**
   * DreamComment upsert
   */
  export type DreamCommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DreamComment
     */
    select?: DreamCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamCommentInclude<ExtArgs> | null
    /**
     * The filter to search for the DreamComment to update in case it exists.
     */
    where: DreamCommentWhereUniqueInput
    /**
     * In case the DreamComment found by the `where` argument doesn't exist, create a new DreamComment with this data.
     */
    create: XOR<DreamCommentCreateInput, DreamCommentUncheckedCreateInput>
    /**
     * In case the DreamComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DreamCommentUpdateInput, DreamCommentUncheckedUpdateInput>
  }

  /**
   * DreamComment delete
   */
  export type DreamCommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DreamComment
     */
    select?: DreamCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamCommentInclude<ExtArgs> | null
    /**
     * Filter which DreamComment to delete.
     */
    where: DreamCommentWhereUniqueInput
  }

  /**
   * DreamComment deleteMany
   */
  export type DreamCommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DreamComments to delete
     */
    where?: DreamCommentWhereInput
  }

  /**
   * DreamComment without action
   */
  export type DreamCommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DreamComment
     */
    select?: DreamCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DreamCommentInclude<ExtArgs> | null
  }


  /**
   * Model Surprise
   */

  export type AggregateSurprise = {
    _count: SurpriseCountAggregateOutputType | null
    _min: SurpriseMinAggregateOutputType | null
    _max: SurpriseMaxAggregateOutputType | null
  }

  export type SurpriseMinAggregateOutputType = {
    id: string | null
    imageUrl: string | null
    message: string | null
    createdAt: Date | null
    isSeenByAuthor: boolean | null
    isSeenByPartner: boolean | null
    userId: string | null
    connectionId: string | null
  }

  export type SurpriseMaxAggregateOutputType = {
    id: string | null
    imageUrl: string | null
    message: string | null
    createdAt: Date | null
    isSeenByAuthor: boolean | null
    isSeenByPartner: boolean | null
    userId: string | null
    connectionId: string | null
  }

  export type SurpriseCountAggregateOutputType = {
    id: number
    imageUrl: number
    message: number
    createdAt: number
    isSeenByAuthor: number
    isSeenByPartner: number
    userId: number
    connectionId: number
    _all: number
  }


  export type SurpriseMinAggregateInputType = {
    id?: true
    imageUrl?: true
    message?: true
    createdAt?: true
    isSeenByAuthor?: true
    isSeenByPartner?: true
    userId?: true
    connectionId?: true
  }

  export type SurpriseMaxAggregateInputType = {
    id?: true
    imageUrl?: true
    message?: true
    createdAt?: true
    isSeenByAuthor?: true
    isSeenByPartner?: true
    userId?: true
    connectionId?: true
  }

  export type SurpriseCountAggregateInputType = {
    id?: true
    imageUrl?: true
    message?: true
    createdAt?: true
    isSeenByAuthor?: true
    isSeenByPartner?: true
    userId?: true
    connectionId?: true
    _all?: true
  }

  export type SurpriseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Surprise to aggregate.
     */
    where?: SurpriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surprises to fetch.
     */
    orderBy?: SurpriseOrderByWithRelationInput | SurpriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SurpriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Surprises
    **/
    _count?: true | SurpriseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SurpriseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SurpriseMaxAggregateInputType
  }

  export type GetSurpriseAggregateType<T extends SurpriseAggregateArgs> = {
        [P in keyof T & keyof AggregateSurprise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSurprise[P]>
      : GetScalarType<T[P], AggregateSurprise[P]>
  }




  export type SurpriseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurpriseWhereInput
    orderBy?: SurpriseOrderByWithAggregationInput | SurpriseOrderByWithAggregationInput[]
    by: SurpriseScalarFieldEnum[] | SurpriseScalarFieldEnum
    having?: SurpriseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SurpriseCountAggregateInputType | true
    _min?: SurpriseMinAggregateInputType
    _max?: SurpriseMaxAggregateInputType
  }

  export type SurpriseGroupByOutputType = {
    id: string
    imageUrl: string
    message: string | null
    createdAt: Date
    isSeenByAuthor: boolean
    isSeenByPartner: boolean
    userId: string
    connectionId: string
    _count: SurpriseCountAggregateOutputType | null
    _min: SurpriseMinAggregateOutputType | null
    _max: SurpriseMaxAggregateOutputType | null
  }

  type GetSurpriseGroupByPayload<T extends SurpriseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SurpriseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SurpriseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SurpriseGroupByOutputType[P]>
            : GetScalarType<T[P], SurpriseGroupByOutputType[P]>
        }
      >
    >


  export type SurpriseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    imageUrl?: boolean
    message?: boolean
    createdAt?: boolean
    isSeenByAuthor?: boolean
    isSeenByPartner?: boolean
    userId?: boolean
    connectionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["surprise"]>

  export type SurpriseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    imageUrl?: boolean
    message?: boolean
    createdAt?: boolean
    isSeenByAuthor?: boolean
    isSeenByPartner?: boolean
    userId?: boolean
    connectionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["surprise"]>

  export type SurpriseSelectScalar = {
    id?: boolean
    imageUrl?: boolean
    message?: boolean
    createdAt?: boolean
    isSeenByAuthor?: boolean
    isSeenByPartner?: boolean
    userId?: boolean
    connectionId?: boolean
  }

  export type SurpriseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }
  export type SurpriseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }

  export type $SurprisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Surprise"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      connection: Prisma.$ConnectionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      imageUrl: string
      message: string | null
      createdAt: Date
      isSeenByAuthor: boolean
      isSeenByPartner: boolean
      userId: string
      connectionId: string
    }, ExtArgs["result"]["surprise"]>
    composites: {}
  }

  type SurpriseGetPayload<S extends boolean | null | undefined | SurpriseDefaultArgs> = $Result.GetResult<Prisma.$SurprisePayload, S>

  type SurpriseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SurpriseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SurpriseCountAggregateInputType | true
    }

  export interface SurpriseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Surprise'], meta: { name: 'Surprise' } }
    /**
     * Find zero or one Surprise that matches the filter.
     * @param {SurpriseFindUniqueArgs} args - Arguments to find a Surprise
     * @example
     * // Get one Surprise
     * const surprise = await prisma.surprise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SurpriseFindUniqueArgs>(args: SelectSubset<T, SurpriseFindUniqueArgs<ExtArgs>>): Prisma__SurpriseClient<$Result.GetResult<Prisma.$SurprisePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Surprise that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SurpriseFindUniqueOrThrowArgs} args - Arguments to find a Surprise
     * @example
     * // Get one Surprise
     * const surprise = await prisma.surprise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SurpriseFindUniqueOrThrowArgs>(args: SelectSubset<T, SurpriseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SurpriseClient<$Result.GetResult<Prisma.$SurprisePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Surprise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurpriseFindFirstArgs} args - Arguments to find a Surprise
     * @example
     * // Get one Surprise
     * const surprise = await prisma.surprise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SurpriseFindFirstArgs>(args?: SelectSubset<T, SurpriseFindFirstArgs<ExtArgs>>): Prisma__SurpriseClient<$Result.GetResult<Prisma.$SurprisePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Surprise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurpriseFindFirstOrThrowArgs} args - Arguments to find a Surprise
     * @example
     * // Get one Surprise
     * const surprise = await prisma.surprise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SurpriseFindFirstOrThrowArgs>(args?: SelectSubset<T, SurpriseFindFirstOrThrowArgs<ExtArgs>>): Prisma__SurpriseClient<$Result.GetResult<Prisma.$SurprisePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Surprises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurpriseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Surprises
     * const surprises = await prisma.surprise.findMany()
     * 
     * // Get first 10 Surprises
     * const surprises = await prisma.surprise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const surpriseWithIdOnly = await prisma.surprise.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SurpriseFindManyArgs>(args?: SelectSubset<T, SurpriseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurprisePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Surprise.
     * @param {SurpriseCreateArgs} args - Arguments to create a Surprise.
     * @example
     * // Create one Surprise
     * const Surprise = await prisma.surprise.create({
     *   data: {
     *     // ... data to create a Surprise
     *   }
     * })
     * 
     */
    create<T extends SurpriseCreateArgs>(args: SelectSubset<T, SurpriseCreateArgs<ExtArgs>>): Prisma__SurpriseClient<$Result.GetResult<Prisma.$SurprisePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Surprises.
     * @param {SurpriseCreateManyArgs} args - Arguments to create many Surprises.
     * @example
     * // Create many Surprises
     * const surprise = await prisma.surprise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SurpriseCreateManyArgs>(args?: SelectSubset<T, SurpriseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Surprises and returns the data saved in the database.
     * @param {SurpriseCreateManyAndReturnArgs} args - Arguments to create many Surprises.
     * @example
     * // Create many Surprises
     * const surprise = await prisma.surprise.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Surprises and only return the `id`
     * const surpriseWithIdOnly = await prisma.surprise.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SurpriseCreateManyAndReturnArgs>(args?: SelectSubset<T, SurpriseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurprisePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Surprise.
     * @param {SurpriseDeleteArgs} args - Arguments to delete one Surprise.
     * @example
     * // Delete one Surprise
     * const Surprise = await prisma.surprise.delete({
     *   where: {
     *     // ... filter to delete one Surprise
     *   }
     * })
     * 
     */
    delete<T extends SurpriseDeleteArgs>(args: SelectSubset<T, SurpriseDeleteArgs<ExtArgs>>): Prisma__SurpriseClient<$Result.GetResult<Prisma.$SurprisePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Surprise.
     * @param {SurpriseUpdateArgs} args - Arguments to update one Surprise.
     * @example
     * // Update one Surprise
     * const surprise = await prisma.surprise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SurpriseUpdateArgs>(args: SelectSubset<T, SurpriseUpdateArgs<ExtArgs>>): Prisma__SurpriseClient<$Result.GetResult<Prisma.$SurprisePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Surprises.
     * @param {SurpriseDeleteManyArgs} args - Arguments to filter Surprises to delete.
     * @example
     * // Delete a few Surprises
     * const { count } = await prisma.surprise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SurpriseDeleteManyArgs>(args?: SelectSubset<T, SurpriseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Surprises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurpriseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Surprises
     * const surprise = await prisma.surprise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SurpriseUpdateManyArgs>(args: SelectSubset<T, SurpriseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Surprise.
     * @param {SurpriseUpsertArgs} args - Arguments to update or create a Surprise.
     * @example
     * // Update or create a Surprise
     * const surprise = await prisma.surprise.upsert({
     *   create: {
     *     // ... data to create a Surprise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Surprise we want to update
     *   }
     * })
     */
    upsert<T extends SurpriseUpsertArgs>(args: SelectSubset<T, SurpriseUpsertArgs<ExtArgs>>): Prisma__SurpriseClient<$Result.GetResult<Prisma.$SurprisePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Surprises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurpriseCountArgs} args - Arguments to filter Surprises to count.
     * @example
     * // Count the number of Surprises
     * const count = await prisma.surprise.count({
     *   where: {
     *     // ... the filter for the Surprises we want to count
     *   }
     * })
    **/
    count<T extends SurpriseCountArgs>(
      args?: Subset<T, SurpriseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SurpriseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Surprise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurpriseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SurpriseAggregateArgs>(args: Subset<T, SurpriseAggregateArgs>): Prisma.PrismaPromise<GetSurpriseAggregateType<T>>

    /**
     * Group by Surprise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurpriseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SurpriseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SurpriseGroupByArgs['orderBy'] }
        : { orderBy?: SurpriseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SurpriseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSurpriseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Surprise model
   */
  readonly fields: SurpriseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Surprise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SurpriseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    connection<T extends ConnectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConnectionDefaultArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Surprise model
   */ 
  interface SurpriseFieldRefs {
    readonly id: FieldRef<"Surprise", 'String'>
    readonly imageUrl: FieldRef<"Surprise", 'String'>
    readonly message: FieldRef<"Surprise", 'String'>
    readonly createdAt: FieldRef<"Surprise", 'DateTime'>
    readonly isSeenByAuthor: FieldRef<"Surprise", 'Boolean'>
    readonly isSeenByPartner: FieldRef<"Surprise", 'Boolean'>
    readonly userId: FieldRef<"Surprise", 'String'>
    readonly connectionId: FieldRef<"Surprise", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Surprise findUnique
   */
  export type SurpriseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surprise
     */
    select?: SurpriseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurpriseInclude<ExtArgs> | null
    /**
     * Filter, which Surprise to fetch.
     */
    where: SurpriseWhereUniqueInput
  }

  /**
   * Surprise findUniqueOrThrow
   */
  export type SurpriseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surprise
     */
    select?: SurpriseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurpriseInclude<ExtArgs> | null
    /**
     * Filter, which Surprise to fetch.
     */
    where: SurpriseWhereUniqueInput
  }

  /**
   * Surprise findFirst
   */
  export type SurpriseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surprise
     */
    select?: SurpriseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurpriseInclude<ExtArgs> | null
    /**
     * Filter, which Surprise to fetch.
     */
    where?: SurpriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surprises to fetch.
     */
    orderBy?: SurpriseOrderByWithRelationInput | SurpriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Surprises.
     */
    cursor?: SurpriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Surprises.
     */
    distinct?: SurpriseScalarFieldEnum | SurpriseScalarFieldEnum[]
  }

  /**
   * Surprise findFirstOrThrow
   */
  export type SurpriseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surprise
     */
    select?: SurpriseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurpriseInclude<ExtArgs> | null
    /**
     * Filter, which Surprise to fetch.
     */
    where?: SurpriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surprises to fetch.
     */
    orderBy?: SurpriseOrderByWithRelationInput | SurpriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Surprises.
     */
    cursor?: SurpriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surprises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Surprises.
     */
    distinct?: SurpriseScalarFieldEnum | SurpriseScalarFieldEnum[]
  }

  /**
   * Surprise findMany
   */
  export type SurpriseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surprise
     */
    select?: SurpriseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurpriseInclude<ExtArgs> | null
    /**
     * Filter, which Surprises to fetch.
     */
    where?: SurpriseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surprises to fetch.
     */
    orderBy?: SurpriseOrderByWithRelationInput | SurpriseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Surprises.
     */
    cursor?: SurpriseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surprises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surprises.
     */
    skip?: number
    distinct?: SurpriseScalarFieldEnum | SurpriseScalarFieldEnum[]
  }

  /**
   * Surprise create
   */
  export type SurpriseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surprise
     */
    select?: SurpriseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurpriseInclude<ExtArgs> | null
    /**
     * The data needed to create a Surprise.
     */
    data: XOR<SurpriseCreateInput, SurpriseUncheckedCreateInput>
  }

  /**
   * Surprise createMany
   */
  export type SurpriseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Surprises.
     */
    data: SurpriseCreateManyInput | SurpriseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Surprise createManyAndReturn
   */
  export type SurpriseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surprise
     */
    select?: SurpriseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Surprises.
     */
    data: SurpriseCreateManyInput | SurpriseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurpriseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Surprise update
   */
  export type SurpriseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surprise
     */
    select?: SurpriseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurpriseInclude<ExtArgs> | null
    /**
     * The data needed to update a Surprise.
     */
    data: XOR<SurpriseUpdateInput, SurpriseUncheckedUpdateInput>
    /**
     * Choose, which Surprise to update.
     */
    where: SurpriseWhereUniqueInput
  }

  /**
   * Surprise updateMany
   */
  export type SurpriseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Surprises.
     */
    data: XOR<SurpriseUpdateManyMutationInput, SurpriseUncheckedUpdateManyInput>
    /**
     * Filter which Surprises to update
     */
    where?: SurpriseWhereInput
  }

  /**
   * Surprise upsert
   */
  export type SurpriseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surprise
     */
    select?: SurpriseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurpriseInclude<ExtArgs> | null
    /**
     * The filter to search for the Surprise to update in case it exists.
     */
    where: SurpriseWhereUniqueInput
    /**
     * In case the Surprise found by the `where` argument doesn't exist, create a new Surprise with this data.
     */
    create: XOR<SurpriseCreateInput, SurpriseUncheckedCreateInput>
    /**
     * In case the Surprise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SurpriseUpdateInput, SurpriseUncheckedUpdateInput>
  }

  /**
   * Surprise delete
   */
  export type SurpriseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surprise
     */
    select?: SurpriseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurpriseInclude<ExtArgs> | null
    /**
     * Filter which Surprise to delete.
     */
    where: SurpriseWhereUniqueInput
  }

  /**
   * Surprise deleteMany
   */
  export type SurpriseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Surprises to delete
     */
    where?: SurpriseWhereInput
  }

  /**
   * Surprise without action
   */
  export type SurpriseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Surprise
     */
    select?: SurpriseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurpriseInclude<ExtArgs> | null
  }


  /**
   * Model TimeCapsule
   */

  export type AggregateTimeCapsule = {
    _count: TimeCapsuleCountAggregateOutputType | null
    _min: TimeCapsuleMinAggregateOutputType | null
    _max: TimeCapsuleMaxAggregateOutputType | null
  }

  export type TimeCapsuleMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    imageUrl: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    openDate: Date | null
    isOpened: boolean | null
    openedAt: Date | null
    userId: string | null
    connectionId: string | null
  }

  export type TimeCapsuleMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    imageUrl: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    openDate: Date | null
    isOpened: boolean | null
    openedAt: Date | null
    userId: string | null
    connectionId: string | null
  }

  export type TimeCapsuleCountAggregateOutputType = {
    id: number
    title: number
    description: number
    imageUrl: number
    content: number
    createdAt: number
    updatedAt: number
    openDate: number
    isOpened: number
    openedAt: number
    userId: number
    connectionId: number
    _all: number
  }


  export type TimeCapsuleMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    imageUrl?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    openDate?: true
    isOpened?: true
    openedAt?: true
    userId?: true
    connectionId?: true
  }

  export type TimeCapsuleMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    imageUrl?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    openDate?: true
    isOpened?: true
    openedAt?: true
    userId?: true
    connectionId?: true
  }

  export type TimeCapsuleCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    imageUrl?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    openDate?: true
    isOpened?: true
    openedAt?: true
    userId?: true
    connectionId?: true
    _all?: true
  }

  export type TimeCapsuleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TimeCapsule to aggregate.
     */
    where?: TimeCapsuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeCapsules to fetch.
     */
    orderBy?: TimeCapsuleOrderByWithRelationInput | TimeCapsuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TimeCapsuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeCapsules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeCapsules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TimeCapsules
    **/
    _count?: true | TimeCapsuleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TimeCapsuleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TimeCapsuleMaxAggregateInputType
  }

  export type GetTimeCapsuleAggregateType<T extends TimeCapsuleAggregateArgs> = {
        [P in keyof T & keyof AggregateTimeCapsule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTimeCapsule[P]>
      : GetScalarType<T[P], AggregateTimeCapsule[P]>
  }




  export type TimeCapsuleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimeCapsuleWhereInput
    orderBy?: TimeCapsuleOrderByWithAggregationInput | TimeCapsuleOrderByWithAggregationInput[]
    by: TimeCapsuleScalarFieldEnum[] | TimeCapsuleScalarFieldEnum
    having?: TimeCapsuleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TimeCapsuleCountAggregateInputType | true
    _min?: TimeCapsuleMinAggregateInputType
    _max?: TimeCapsuleMaxAggregateInputType
  }

  export type TimeCapsuleGroupByOutputType = {
    id: string
    title: string
    description: string
    imageUrl: string | null
    content: string
    createdAt: Date
    updatedAt: Date
    openDate: Date
    isOpened: boolean
    openedAt: Date | null
    userId: string
    connectionId: string
    _count: TimeCapsuleCountAggregateOutputType | null
    _min: TimeCapsuleMinAggregateOutputType | null
    _max: TimeCapsuleMaxAggregateOutputType | null
  }

  type GetTimeCapsuleGroupByPayload<T extends TimeCapsuleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TimeCapsuleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TimeCapsuleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TimeCapsuleGroupByOutputType[P]>
            : GetScalarType<T[P], TimeCapsuleGroupByOutputType[P]>
        }
      >
    >


  export type TimeCapsuleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    imageUrl?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    openDate?: boolean
    isOpened?: boolean
    openedAt?: boolean
    userId?: boolean
    connectionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
    comments?: boolean | TimeCapsule$commentsArgs<ExtArgs>
    _count?: boolean | TimeCapsuleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["timeCapsule"]>

  export type TimeCapsuleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    imageUrl?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    openDate?: boolean
    isOpened?: boolean
    openedAt?: boolean
    userId?: boolean
    connectionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["timeCapsule"]>

  export type TimeCapsuleSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    imageUrl?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    openDate?: boolean
    isOpened?: boolean
    openedAt?: boolean
    userId?: boolean
    connectionId?: boolean
  }

  export type TimeCapsuleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
    comments?: boolean | TimeCapsule$commentsArgs<ExtArgs>
    _count?: boolean | TimeCapsuleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TimeCapsuleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }

  export type $TimeCapsulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TimeCapsule"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      connection: Prisma.$ConnectionPayload<ExtArgs>
      comments: Prisma.$TimeCapsuleCommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      imageUrl: string | null
      content: string
      createdAt: Date
      updatedAt: Date
      openDate: Date
      isOpened: boolean
      openedAt: Date | null
      userId: string
      connectionId: string
    }, ExtArgs["result"]["timeCapsule"]>
    composites: {}
  }

  type TimeCapsuleGetPayload<S extends boolean | null | undefined | TimeCapsuleDefaultArgs> = $Result.GetResult<Prisma.$TimeCapsulePayload, S>

  type TimeCapsuleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TimeCapsuleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TimeCapsuleCountAggregateInputType | true
    }

  export interface TimeCapsuleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TimeCapsule'], meta: { name: 'TimeCapsule' } }
    /**
     * Find zero or one TimeCapsule that matches the filter.
     * @param {TimeCapsuleFindUniqueArgs} args - Arguments to find a TimeCapsule
     * @example
     * // Get one TimeCapsule
     * const timeCapsule = await prisma.timeCapsule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TimeCapsuleFindUniqueArgs>(args: SelectSubset<T, TimeCapsuleFindUniqueArgs<ExtArgs>>): Prisma__TimeCapsuleClient<$Result.GetResult<Prisma.$TimeCapsulePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TimeCapsule that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TimeCapsuleFindUniqueOrThrowArgs} args - Arguments to find a TimeCapsule
     * @example
     * // Get one TimeCapsule
     * const timeCapsule = await prisma.timeCapsule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TimeCapsuleFindUniqueOrThrowArgs>(args: SelectSubset<T, TimeCapsuleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TimeCapsuleClient<$Result.GetResult<Prisma.$TimeCapsulePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TimeCapsule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeCapsuleFindFirstArgs} args - Arguments to find a TimeCapsule
     * @example
     * // Get one TimeCapsule
     * const timeCapsule = await prisma.timeCapsule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TimeCapsuleFindFirstArgs>(args?: SelectSubset<T, TimeCapsuleFindFirstArgs<ExtArgs>>): Prisma__TimeCapsuleClient<$Result.GetResult<Prisma.$TimeCapsulePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TimeCapsule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeCapsuleFindFirstOrThrowArgs} args - Arguments to find a TimeCapsule
     * @example
     * // Get one TimeCapsule
     * const timeCapsule = await prisma.timeCapsule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TimeCapsuleFindFirstOrThrowArgs>(args?: SelectSubset<T, TimeCapsuleFindFirstOrThrowArgs<ExtArgs>>): Prisma__TimeCapsuleClient<$Result.GetResult<Prisma.$TimeCapsulePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TimeCapsules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeCapsuleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TimeCapsules
     * const timeCapsules = await prisma.timeCapsule.findMany()
     * 
     * // Get first 10 TimeCapsules
     * const timeCapsules = await prisma.timeCapsule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const timeCapsuleWithIdOnly = await prisma.timeCapsule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TimeCapsuleFindManyArgs>(args?: SelectSubset<T, TimeCapsuleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeCapsulePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TimeCapsule.
     * @param {TimeCapsuleCreateArgs} args - Arguments to create a TimeCapsule.
     * @example
     * // Create one TimeCapsule
     * const TimeCapsule = await prisma.timeCapsule.create({
     *   data: {
     *     // ... data to create a TimeCapsule
     *   }
     * })
     * 
     */
    create<T extends TimeCapsuleCreateArgs>(args: SelectSubset<T, TimeCapsuleCreateArgs<ExtArgs>>): Prisma__TimeCapsuleClient<$Result.GetResult<Prisma.$TimeCapsulePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TimeCapsules.
     * @param {TimeCapsuleCreateManyArgs} args - Arguments to create many TimeCapsules.
     * @example
     * // Create many TimeCapsules
     * const timeCapsule = await prisma.timeCapsule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TimeCapsuleCreateManyArgs>(args?: SelectSubset<T, TimeCapsuleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TimeCapsules and returns the data saved in the database.
     * @param {TimeCapsuleCreateManyAndReturnArgs} args - Arguments to create many TimeCapsules.
     * @example
     * // Create many TimeCapsules
     * const timeCapsule = await prisma.timeCapsule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TimeCapsules and only return the `id`
     * const timeCapsuleWithIdOnly = await prisma.timeCapsule.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TimeCapsuleCreateManyAndReturnArgs>(args?: SelectSubset<T, TimeCapsuleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeCapsulePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TimeCapsule.
     * @param {TimeCapsuleDeleteArgs} args - Arguments to delete one TimeCapsule.
     * @example
     * // Delete one TimeCapsule
     * const TimeCapsule = await prisma.timeCapsule.delete({
     *   where: {
     *     // ... filter to delete one TimeCapsule
     *   }
     * })
     * 
     */
    delete<T extends TimeCapsuleDeleteArgs>(args: SelectSubset<T, TimeCapsuleDeleteArgs<ExtArgs>>): Prisma__TimeCapsuleClient<$Result.GetResult<Prisma.$TimeCapsulePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TimeCapsule.
     * @param {TimeCapsuleUpdateArgs} args - Arguments to update one TimeCapsule.
     * @example
     * // Update one TimeCapsule
     * const timeCapsule = await prisma.timeCapsule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TimeCapsuleUpdateArgs>(args: SelectSubset<T, TimeCapsuleUpdateArgs<ExtArgs>>): Prisma__TimeCapsuleClient<$Result.GetResult<Prisma.$TimeCapsulePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TimeCapsules.
     * @param {TimeCapsuleDeleteManyArgs} args - Arguments to filter TimeCapsules to delete.
     * @example
     * // Delete a few TimeCapsules
     * const { count } = await prisma.timeCapsule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TimeCapsuleDeleteManyArgs>(args?: SelectSubset<T, TimeCapsuleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TimeCapsules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeCapsuleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TimeCapsules
     * const timeCapsule = await prisma.timeCapsule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TimeCapsuleUpdateManyArgs>(args: SelectSubset<T, TimeCapsuleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TimeCapsule.
     * @param {TimeCapsuleUpsertArgs} args - Arguments to update or create a TimeCapsule.
     * @example
     * // Update or create a TimeCapsule
     * const timeCapsule = await prisma.timeCapsule.upsert({
     *   create: {
     *     // ... data to create a TimeCapsule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TimeCapsule we want to update
     *   }
     * })
     */
    upsert<T extends TimeCapsuleUpsertArgs>(args: SelectSubset<T, TimeCapsuleUpsertArgs<ExtArgs>>): Prisma__TimeCapsuleClient<$Result.GetResult<Prisma.$TimeCapsulePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TimeCapsules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeCapsuleCountArgs} args - Arguments to filter TimeCapsules to count.
     * @example
     * // Count the number of TimeCapsules
     * const count = await prisma.timeCapsule.count({
     *   where: {
     *     // ... the filter for the TimeCapsules we want to count
     *   }
     * })
    **/
    count<T extends TimeCapsuleCountArgs>(
      args?: Subset<T, TimeCapsuleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TimeCapsuleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TimeCapsule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeCapsuleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TimeCapsuleAggregateArgs>(args: Subset<T, TimeCapsuleAggregateArgs>): Prisma.PrismaPromise<GetTimeCapsuleAggregateType<T>>

    /**
     * Group by TimeCapsule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeCapsuleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TimeCapsuleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TimeCapsuleGroupByArgs['orderBy'] }
        : { orderBy?: TimeCapsuleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TimeCapsuleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTimeCapsuleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TimeCapsule model
   */
  readonly fields: TimeCapsuleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TimeCapsule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TimeCapsuleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    connection<T extends ConnectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConnectionDefaultArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    comments<T extends TimeCapsule$commentsArgs<ExtArgs> = {}>(args?: Subset<T, TimeCapsule$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeCapsuleCommentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TimeCapsule model
   */ 
  interface TimeCapsuleFieldRefs {
    readonly id: FieldRef<"TimeCapsule", 'String'>
    readonly title: FieldRef<"TimeCapsule", 'String'>
    readonly description: FieldRef<"TimeCapsule", 'String'>
    readonly imageUrl: FieldRef<"TimeCapsule", 'String'>
    readonly content: FieldRef<"TimeCapsule", 'String'>
    readonly createdAt: FieldRef<"TimeCapsule", 'DateTime'>
    readonly updatedAt: FieldRef<"TimeCapsule", 'DateTime'>
    readonly openDate: FieldRef<"TimeCapsule", 'DateTime'>
    readonly isOpened: FieldRef<"TimeCapsule", 'Boolean'>
    readonly openedAt: FieldRef<"TimeCapsule", 'DateTime'>
    readonly userId: FieldRef<"TimeCapsule", 'String'>
    readonly connectionId: FieldRef<"TimeCapsule", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TimeCapsule findUnique
   */
  export type TimeCapsuleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsule
     */
    select?: TimeCapsuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleInclude<ExtArgs> | null
    /**
     * Filter, which TimeCapsule to fetch.
     */
    where: TimeCapsuleWhereUniqueInput
  }

  /**
   * TimeCapsule findUniqueOrThrow
   */
  export type TimeCapsuleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsule
     */
    select?: TimeCapsuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleInclude<ExtArgs> | null
    /**
     * Filter, which TimeCapsule to fetch.
     */
    where: TimeCapsuleWhereUniqueInput
  }

  /**
   * TimeCapsule findFirst
   */
  export type TimeCapsuleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsule
     */
    select?: TimeCapsuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleInclude<ExtArgs> | null
    /**
     * Filter, which TimeCapsule to fetch.
     */
    where?: TimeCapsuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeCapsules to fetch.
     */
    orderBy?: TimeCapsuleOrderByWithRelationInput | TimeCapsuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TimeCapsules.
     */
    cursor?: TimeCapsuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeCapsules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeCapsules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TimeCapsules.
     */
    distinct?: TimeCapsuleScalarFieldEnum | TimeCapsuleScalarFieldEnum[]
  }

  /**
   * TimeCapsule findFirstOrThrow
   */
  export type TimeCapsuleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsule
     */
    select?: TimeCapsuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleInclude<ExtArgs> | null
    /**
     * Filter, which TimeCapsule to fetch.
     */
    where?: TimeCapsuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeCapsules to fetch.
     */
    orderBy?: TimeCapsuleOrderByWithRelationInput | TimeCapsuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TimeCapsules.
     */
    cursor?: TimeCapsuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeCapsules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeCapsules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TimeCapsules.
     */
    distinct?: TimeCapsuleScalarFieldEnum | TimeCapsuleScalarFieldEnum[]
  }

  /**
   * TimeCapsule findMany
   */
  export type TimeCapsuleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsule
     */
    select?: TimeCapsuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleInclude<ExtArgs> | null
    /**
     * Filter, which TimeCapsules to fetch.
     */
    where?: TimeCapsuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeCapsules to fetch.
     */
    orderBy?: TimeCapsuleOrderByWithRelationInput | TimeCapsuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TimeCapsules.
     */
    cursor?: TimeCapsuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeCapsules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeCapsules.
     */
    skip?: number
    distinct?: TimeCapsuleScalarFieldEnum | TimeCapsuleScalarFieldEnum[]
  }

  /**
   * TimeCapsule create
   */
  export type TimeCapsuleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsule
     */
    select?: TimeCapsuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleInclude<ExtArgs> | null
    /**
     * The data needed to create a TimeCapsule.
     */
    data: XOR<TimeCapsuleCreateInput, TimeCapsuleUncheckedCreateInput>
  }

  /**
   * TimeCapsule createMany
   */
  export type TimeCapsuleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TimeCapsules.
     */
    data: TimeCapsuleCreateManyInput | TimeCapsuleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TimeCapsule createManyAndReturn
   */
  export type TimeCapsuleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsule
     */
    select?: TimeCapsuleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TimeCapsules.
     */
    data: TimeCapsuleCreateManyInput | TimeCapsuleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TimeCapsule update
   */
  export type TimeCapsuleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsule
     */
    select?: TimeCapsuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleInclude<ExtArgs> | null
    /**
     * The data needed to update a TimeCapsule.
     */
    data: XOR<TimeCapsuleUpdateInput, TimeCapsuleUncheckedUpdateInput>
    /**
     * Choose, which TimeCapsule to update.
     */
    where: TimeCapsuleWhereUniqueInput
  }

  /**
   * TimeCapsule updateMany
   */
  export type TimeCapsuleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TimeCapsules.
     */
    data: XOR<TimeCapsuleUpdateManyMutationInput, TimeCapsuleUncheckedUpdateManyInput>
    /**
     * Filter which TimeCapsules to update
     */
    where?: TimeCapsuleWhereInput
  }

  /**
   * TimeCapsule upsert
   */
  export type TimeCapsuleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsule
     */
    select?: TimeCapsuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleInclude<ExtArgs> | null
    /**
     * The filter to search for the TimeCapsule to update in case it exists.
     */
    where: TimeCapsuleWhereUniqueInput
    /**
     * In case the TimeCapsule found by the `where` argument doesn't exist, create a new TimeCapsule with this data.
     */
    create: XOR<TimeCapsuleCreateInput, TimeCapsuleUncheckedCreateInput>
    /**
     * In case the TimeCapsule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TimeCapsuleUpdateInput, TimeCapsuleUncheckedUpdateInput>
  }

  /**
   * TimeCapsule delete
   */
  export type TimeCapsuleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsule
     */
    select?: TimeCapsuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleInclude<ExtArgs> | null
    /**
     * Filter which TimeCapsule to delete.
     */
    where: TimeCapsuleWhereUniqueInput
  }

  /**
   * TimeCapsule deleteMany
   */
  export type TimeCapsuleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TimeCapsules to delete
     */
    where?: TimeCapsuleWhereInput
  }

  /**
   * TimeCapsule.comments
   */
  export type TimeCapsule$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsuleComment
     */
    select?: TimeCapsuleCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleCommentInclude<ExtArgs> | null
    where?: TimeCapsuleCommentWhereInput
    orderBy?: TimeCapsuleCommentOrderByWithRelationInput | TimeCapsuleCommentOrderByWithRelationInput[]
    cursor?: TimeCapsuleCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimeCapsuleCommentScalarFieldEnum | TimeCapsuleCommentScalarFieldEnum[]
  }

  /**
   * TimeCapsule without action
   */
  export type TimeCapsuleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsule
     */
    select?: TimeCapsuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleInclude<ExtArgs> | null
  }


  /**
   * Model TimeCapsuleComment
   */

  export type AggregateTimeCapsuleComment = {
    _count: TimeCapsuleCommentCountAggregateOutputType | null
    _min: TimeCapsuleCommentMinAggregateOutputType | null
    _max: TimeCapsuleCommentMaxAggregateOutputType | null
  }

  export type TimeCapsuleCommentMinAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    timeCapsuleId: string | null
    userId: string | null
  }

  export type TimeCapsuleCommentMaxAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    timeCapsuleId: string | null
    userId: string | null
  }

  export type TimeCapsuleCommentCountAggregateOutputType = {
    id: number
    content: number
    createdAt: number
    updatedAt: number
    timeCapsuleId: number
    userId: number
    _all: number
  }


  export type TimeCapsuleCommentMinAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    timeCapsuleId?: true
    userId?: true
  }

  export type TimeCapsuleCommentMaxAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    timeCapsuleId?: true
    userId?: true
  }

  export type TimeCapsuleCommentCountAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    timeCapsuleId?: true
    userId?: true
    _all?: true
  }

  export type TimeCapsuleCommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TimeCapsuleComment to aggregate.
     */
    where?: TimeCapsuleCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeCapsuleComments to fetch.
     */
    orderBy?: TimeCapsuleCommentOrderByWithRelationInput | TimeCapsuleCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TimeCapsuleCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeCapsuleComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeCapsuleComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TimeCapsuleComments
    **/
    _count?: true | TimeCapsuleCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TimeCapsuleCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TimeCapsuleCommentMaxAggregateInputType
  }

  export type GetTimeCapsuleCommentAggregateType<T extends TimeCapsuleCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateTimeCapsuleComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTimeCapsuleComment[P]>
      : GetScalarType<T[P], AggregateTimeCapsuleComment[P]>
  }




  export type TimeCapsuleCommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimeCapsuleCommentWhereInput
    orderBy?: TimeCapsuleCommentOrderByWithAggregationInput | TimeCapsuleCommentOrderByWithAggregationInput[]
    by: TimeCapsuleCommentScalarFieldEnum[] | TimeCapsuleCommentScalarFieldEnum
    having?: TimeCapsuleCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TimeCapsuleCommentCountAggregateInputType | true
    _min?: TimeCapsuleCommentMinAggregateInputType
    _max?: TimeCapsuleCommentMaxAggregateInputType
  }

  export type TimeCapsuleCommentGroupByOutputType = {
    id: string
    content: string
    createdAt: Date
    updatedAt: Date
    timeCapsuleId: string
    userId: string
    _count: TimeCapsuleCommentCountAggregateOutputType | null
    _min: TimeCapsuleCommentMinAggregateOutputType | null
    _max: TimeCapsuleCommentMaxAggregateOutputType | null
  }

  type GetTimeCapsuleCommentGroupByPayload<T extends TimeCapsuleCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TimeCapsuleCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TimeCapsuleCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TimeCapsuleCommentGroupByOutputType[P]>
            : GetScalarType<T[P], TimeCapsuleCommentGroupByOutputType[P]>
        }
      >
    >


  export type TimeCapsuleCommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    timeCapsuleId?: boolean
    userId?: boolean
    timeCapsule?: boolean | TimeCapsuleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["timeCapsuleComment"]>

  export type TimeCapsuleCommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    timeCapsuleId?: boolean
    userId?: boolean
    timeCapsule?: boolean | TimeCapsuleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["timeCapsuleComment"]>

  export type TimeCapsuleCommentSelectScalar = {
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    timeCapsuleId?: boolean
    userId?: boolean
  }

  export type TimeCapsuleCommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    timeCapsule?: boolean | TimeCapsuleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TimeCapsuleCommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    timeCapsule?: boolean | TimeCapsuleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TimeCapsuleCommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TimeCapsuleComment"
    objects: {
      timeCapsule: Prisma.$TimeCapsulePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      createdAt: Date
      updatedAt: Date
      timeCapsuleId: string
      userId: string
    }, ExtArgs["result"]["timeCapsuleComment"]>
    composites: {}
  }

  type TimeCapsuleCommentGetPayload<S extends boolean | null | undefined | TimeCapsuleCommentDefaultArgs> = $Result.GetResult<Prisma.$TimeCapsuleCommentPayload, S>

  type TimeCapsuleCommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TimeCapsuleCommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TimeCapsuleCommentCountAggregateInputType | true
    }

  export interface TimeCapsuleCommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TimeCapsuleComment'], meta: { name: 'TimeCapsuleComment' } }
    /**
     * Find zero or one TimeCapsuleComment that matches the filter.
     * @param {TimeCapsuleCommentFindUniqueArgs} args - Arguments to find a TimeCapsuleComment
     * @example
     * // Get one TimeCapsuleComment
     * const timeCapsuleComment = await prisma.timeCapsuleComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TimeCapsuleCommentFindUniqueArgs>(args: SelectSubset<T, TimeCapsuleCommentFindUniqueArgs<ExtArgs>>): Prisma__TimeCapsuleCommentClient<$Result.GetResult<Prisma.$TimeCapsuleCommentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TimeCapsuleComment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TimeCapsuleCommentFindUniqueOrThrowArgs} args - Arguments to find a TimeCapsuleComment
     * @example
     * // Get one TimeCapsuleComment
     * const timeCapsuleComment = await prisma.timeCapsuleComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TimeCapsuleCommentFindUniqueOrThrowArgs>(args: SelectSubset<T, TimeCapsuleCommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TimeCapsuleCommentClient<$Result.GetResult<Prisma.$TimeCapsuleCommentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TimeCapsuleComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeCapsuleCommentFindFirstArgs} args - Arguments to find a TimeCapsuleComment
     * @example
     * // Get one TimeCapsuleComment
     * const timeCapsuleComment = await prisma.timeCapsuleComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TimeCapsuleCommentFindFirstArgs>(args?: SelectSubset<T, TimeCapsuleCommentFindFirstArgs<ExtArgs>>): Prisma__TimeCapsuleCommentClient<$Result.GetResult<Prisma.$TimeCapsuleCommentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TimeCapsuleComment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeCapsuleCommentFindFirstOrThrowArgs} args - Arguments to find a TimeCapsuleComment
     * @example
     * // Get one TimeCapsuleComment
     * const timeCapsuleComment = await prisma.timeCapsuleComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TimeCapsuleCommentFindFirstOrThrowArgs>(args?: SelectSubset<T, TimeCapsuleCommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__TimeCapsuleCommentClient<$Result.GetResult<Prisma.$TimeCapsuleCommentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TimeCapsuleComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeCapsuleCommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TimeCapsuleComments
     * const timeCapsuleComments = await prisma.timeCapsuleComment.findMany()
     * 
     * // Get first 10 TimeCapsuleComments
     * const timeCapsuleComments = await prisma.timeCapsuleComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const timeCapsuleCommentWithIdOnly = await prisma.timeCapsuleComment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TimeCapsuleCommentFindManyArgs>(args?: SelectSubset<T, TimeCapsuleCommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeCapsuleCommentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TimeCapsuleComment.
     * @param {TimeCapsuleCommentCreateArgs} args - Arguments to create a TimeCapsuleComment.
     * @example
     * // Create one TimeCapsuleComment
     * const TimeCapsuleComment = await prisma.timeCapsuleComment.create({
     *   data: {
     *     // ... data to create a TimeCapsuleComment
     *   }
     * })
     * 
     */
    create<T extends TimeCapsuleCommentCreateArgs>(args: SelectSubset<T, TimeCapsuleCommentCreateArgs<ExtArgs>>): Prisma__TimeCapsuleCommentClient<$Result.GetResult<Prisma.$TimeCapsuleCommentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TimeCapsuleComments.
     * @param {TimeCapsuleCommentCreateManyArgs} args - Arguments to create many TimeCapsuleComments.
     * @example
     * // Create many TimeCapsuleComments
     * const timeCapsuleComment = await prisma.timeCapsuleComment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TimeCapsuleCommentCreateManyArgs>(args?: SelectSubset<T, TimeCapsuleCommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TimeCapsuleComments and returns the data saved in the database.
     * @param {TimeCapsuleCommentCreateManyAndReturnArgs} args - Arguments to create many TimeCapsuleComments.
     * @example
     * // Create many TimeCapsuleComments
     * const timeCapsuleComment = await prisma.timeCapsuleComment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TimeCapsuleComments and only return the `id`
     * const timeCapsuleCommentWithIdOnly = await prisma.timeCapsuleComment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TimeCapsuleCommentCreateManyAndReturnArgs>(args?: SelectSubset<T, TimeCapsuleCommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeCapsuleCommentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TimeCapsuleComment.
     * @param {TimeCapsuleCommentDeleteArgs} args - Arguments to delete one TimeCapsuleComment.
     * @example
     * // Delete one TimeCapsuleComment
     * const TimeCapsuleComment = await prisma.timeCapsuleComment.delete({
     *   where: {
     *     // ... filter to delete one TimeCapsuleComment
     *   }
     * })
     * 
     */
    delete<T extends TimeCapsuleCommentDeleteArgs>(args: SelectSubset<T, TimeCapsuleCommentDeleteArgs<ExtArgs>>): Prisma__TimeCapsuleCommentClient<$Result.GetResult<Prisma.$TimeCapsuleCommentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TimeCapsuleComment.
     * @param {TimeCapsuleCommentUpdateArgs} args - Arguments to update one TimeCapsuleComment.
     * @example
     * // Update one TimeCapsuleComment
     * const timeCapsuleComment = await prisma.timeCapsuleComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TimeCapsuleCommentUpdateArgs>(args: SelectSubset<T, TimeCapsuleCommentUpdateArgs<ExtArgs>>): Prisma__TimeCapsuleCommentClient<$Result.GetResult<Prisma.$TimeCapsuleCommentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TimeCapsuleComments.
     * @param {TimeCapsuleCommentDeleteManyArgs} args - Arguments to filter TimeCapsuleComments to delete.
     * @example
     * // Delete a few TimeCapsuleComments
     * const { count } = await prisma.timeCapsuleComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TimeCapsuleCommentDeleteManyArgs>(args?: SelectSubset<T, TimeCapsuleCommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TimeCapsuleComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeCapsuleCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TimeCapsuleComments
     * const timeCapsuleComment = await prisma.timeCapsuleComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TimeCapsuleCommentUpdateManyArgs>(args: SelectSubset<T, TimeCapsuleCommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TimeCapsuleComment.
     * @param {TimeCapsuleCommentUpsertArgs} args - Arguments to update or create a TimeCapsuleComment.
     * @example
     * // Update or create a TimeCapsuleComment
     * const timeCapsuleComment = await prisma.timeCapsuleComment.upsert({
     *   create: {
     *     // ... data to create a TimeCapsuleComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TimeCapsuleComment we want to update
     *   }
     * })
     */
    upsert<T extends TimeCapsuleCommentUpsertArgs>(args: SelectSubset<T, TimeCapsuleCommentUpsertArgs<ExtArgs>>): Prisma__TimeCapsuleCommentClient<$Result.GetResult<Prisma.$TimeCapsuleCommentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TimeCapsuleComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeCapsuleCommentCountArgs} args - Arguments to filter TimeCapsuleComments to count.
     * @example
     * // Count the number of TimeCapsuleComments
     * const count = await prisma.timeCapsuleComment.count({
     *   where: {
     *     // ... the filter for the TimeCapsuleComments we want to count
     *   }
     * })
    **/
    count<T extends TimeCapsuleCommentCountArgs>(
      args?: Subset<T, TimeCapsuleCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TimeCapsuleCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TimeCapsuleComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeCapsuleCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TimeCapsuleCommentAggregateArgs>(args: Subset<T, TimeCapsuleCommentAggregateArgs>): Prisma.PrismaPromise<GetTimeCapsuleCommentAggregateType<T>>

    /**
     * Group by TimeCapsuleComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeCapsuleCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TimeCapsuleCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TimeCapsuleCommentGroupByArgs['orderBy'] }
        : { orderBy?: TimeCapsuleCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TimeCapsuleCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTimeCapsuleCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TimeCapsuleComment model
   */
  readonly fields: TimeCapsuleCommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TimeCapsuleComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TimeCapsuleCommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    timeCapsule<T extends TimeCapsuleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TimeCapsuleDefaultArgs<ExtArgs>>): Prisma__TimeCapsuleClient<$Result.GetResult<Prisma.$TimeCapsulePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TimeCapsuleComment model
   */ 
  interface TimeCapsuleCommentFieldRefs {
    readonly id: FieldRef<"TimeCapsuleComment", 'String'>
    readonly content: FieldRef<"TimeCapsuleComment", 'String'>
    readonly createdAt: FieldRef<"TimeCapsuleComment", 'DateTime'>
    readonly updatedAt: FieldRef<"TimeCapsuleComment", 'DateTime'>
    readonly timeCapsuleId: FieldRef<"TimeCapsuleComment", 'String'>
    readonly userId: FieldRef<"TimeCapsuleComment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TimeCapsuleComment findUnique
   */
  export type TimeCapsuleCommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsuleComment
     */
    select?: TimeCapsuleCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleCommentInclude<ExtArgs> | null
    /**
     * Filter, which TimeCapsuleComment to fetch.
     */
    where: TimeCapsuleCommentWhereUniqueInput
  }

  /**
   * TimeCapsuleComment findUniqueOrThrow
   */
  export type TimeCapsuleCommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsuleComment
     */
    select?: TimeCapsuleCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleCommentInclude<ExtArgs> | null
    /**
     * Filter, which TimeCapsuleComment to fetch.
     */
    where: TimeCapsuleCommentWhereUniqueInput
  }

  /**
   * TimeCapsuleComment findFirst
   */
  export type TimeCapsuleCommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsuleComment
     */
    select?: TimeCapsuleCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleCommentInclude<ExtArgs> | null
    /**
     * Filter, which TimeCapsuleComment to fetch.
     */
    where?: TimeCapsuleCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeCapsuleComments to fetch.
     */
    orderBy?: TimeCapsuleCommentOrderByWithRelationInput | TimeCapsuleCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TimeCapsuleComments.
     */
    cursor?: TimeCapsuleCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeCapsuleComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeCapsuleComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TimeCapsuleComments.
     */
    distinct?: TimeCapsuleCommentScalarFieldEnum | TimeCapsuleCommentScalarFieldEnum[]
  }

  /**
   * TimeCapsuleComment findFirstOrThrow
   */
  export type TimeCapsuleCommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsuleComment
     */
    select?: TimeCapsuleCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleCommentInclude<ExtArgs> | null
    /**
     * Filter, which TimeCapsuleComment to fetch.
     */
    where?: TimeCapsuleCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeCapsuleComments to fetch.
     */
    orderBy?: TimeCapsuleCommentOrderByWithRelationInput | TimeCapsuleCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TimeCapsuleComments.
     */
    cursor?: TimeCapsuleCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeCapsuleComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeCapsuleComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TimeCapsuleComments.
     */
    distinct?: TimeCapsuleCommentScalarFieldEnum | TimeCapsuleCommentScalarFieldEnum[]
  }

  /**
   * TimeCapsuleComment findMany
   */
  export type TimeCapsuleCommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsuleComment
     */
    select?: TimeCapsuleCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleCommentInclude<ExtArgs> | null
    /**
     * Filter, which TimeCapsuleComments to fetch.
     */
    where?: TimeCapsuleCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeCapsuleComments to fetch.
     */
    orderBy?: TimeCapsuleCommentOrderByWithRelationInput | TimeCapsuleCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TimeCapsuleComments.
     */
    cursor?: TimeCapsuleCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeCapsuleComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeCapsuleComments.
     */
    skip?: number
    distinct?: TimeCapsuleCommentScalarFieldEnum | TimeCapsuleCommentScalarFieldEnum[]
  }

  /**
   * TimeCapsuleComment create
   */
  export type TimeCapsuleCommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsuleComment
     */
    select?: TimeCapsuleCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleCommentInclude<ExtArgs> | null
    /**
     * The data needed to create a TimeCapsuleComment.
     */
    data: XOR<TimeCapsuleCommentCreateInput, TimeCapsuleCommentUncheckedCreateInput>
  }

  /**
   * TimeCapsuleComment createMany
   */
  export type TimeCapsuleCommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TimeCapsuleComments.
     */
    data: TimeCapsuleCommentCreateManyInput | TimeCapsuleCommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TimeCapsuleComment createManyAndReturn
   */
  export type TimeCapsuleCommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsuleComment
     */
    select?: TimeCapsuleCommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TimeCapsuleComments.
     */
    data: TimeCapsuleCommentCreateManyInput | TimeCapsuleCommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleCommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TimeCapsuleComment update
   */
  export type TimeCapsuleCommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsuleComment
     */
    select?: TimeCapsuleCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleCommentInclude<ExtArgs> | null
    /**
     * The data needed to update a TimeCapsuleComment.
     */
    data: XOR<TimeCapsuleCommentUpdateInput, TimeCapsuleCommentUncheckedUpdateInput>
    /**
     * Choose, which TimeCapsuleComment to update.
     */
    where: TimeCapsuleCommentWhereUniqueInput
  }

  /**
   * TimeCapsuleComment updateMany
   */
  export type TimeCapsuleCommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TimeCapsuleComments.
     */
    data: XOR<TimeCapsuleCommentUpdateManyMutationInput, TimeCapsuleCommentUncheckedUpdateManyInput>
    /**
     * Filter which TimeCapsuleComments to update
     */
    where?: TimeCapsuleCommentWhereInput
  }

  /**
   * TimeCapsuleComment upsert
   */
  export type TimeCapsuleCommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsuleComment
     */
    select?: TimeCapsuleCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleCommentInclude<ExtArgs> | null
    /**
     * The filter to search for the TimeCapsuleComment to update in case it exists.
     */
    where: TimeCapsuleCommentWhereUniqueInput
    /**
     * In case the TimeCapsuleComment found by the `where` argument doesn't exist, create a new TimeCapsuleComment with this data.
     */
    create: XOR<TimeCapsuleCommentCreateInput, TimeCapsuleCommentUncheckedCreateInput>
    /**
     * In case the TimeCapsuleComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TimeCapsuleCommentUpdateInput, TimeCapsuleCommentUncheckedUpdateInput>
  }

  /**
   * TimeCapsuleComment delete
   */
  export type TimeCapsuleCommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsuleComment
     */
    select?: TimeCapsuleCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleCommentInclude<ExtArgs> | null
    /**
     * Filter which TimeCapsuleComment to delete.
     */
    where: TimeCapsuleCommentWhereUniqueInput
  }

  /**
   * TimeCapsuleComment deleteMany
   */
  export type TimeCapsuleCommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TimeCapsuleComments to delete
     */
    where?: TimeCapsuleCommentWhereInput
  }

  /**
   * TimeCapsuleComment without action
   */
  export type TimeCapsuleCommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCapsuleComment
     */
    select?: TimeCapsuleCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCapsuleCommentInclude<ExtArgs> | null
  }


  /**
   * Model ChatMessage
   */

  export type AggregateChatMessage = {
    _count: ChatMessageCountAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  export type ChatMessageMinAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isRead: boolean | null
    userId: string | null
    connectionId: string | null
  }

  export type ChatMessageMaxAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isRead: boolean | null
    userId: string | null
    connectionId: string | null
  }

  export type ChatMessageCountAggregateOutputType = {
    id: number
    content: number
    createdAt: number
    updatedAt: number
    isRead: number
    userId: number
    connectionId: number
    _all: number
  }


  export type ChatMessageMinAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    isRead?: true
    userId?: true
    connectionId?: true
  }

  export type ChatMessageMaxAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    isRead?: true
    userId?: true
    connectionId?: true
  }

  export type ChatMessageCountAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    isRead?: true
    userId?: true
    connectionId?: true
    _all?: true
  }

  export type ChatMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessage to aggregate.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatMessages
    **/
    _count?: true | ChatMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMessageMaxAggregateInputType
  }

  export type GetChatMessageAggregateType<T extends ChatMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateChatMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatMessage[P]>
      : GetScalarType<T[P], AggregateChatMessage[P]>
  }




  export type ChatMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithAggregationInput | ChatMessageOrderByWithAggregationInput[]
    by: ChatMessageScalarFieldEnum[] | ChatMessageScalarFieldEnum
    having?: ChatMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatMessageCountAggregateInputType | true
    _min?: ChatMessageMinAggregateInputType
    _max?: ChatMessageMaxAggregateInputType
  }

  export type ChatMessageGroupByOutputType = {
    id: string
    content: string
    createdAt: Date
    updatedAt: Date
    isRead: boolean
    userId: string
    connectionId: string
    _count: ChatMessageCountAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  type GetChatMessageGroupByPayload<T extends ChatMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
            : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
        }
      >
    >


  export type ChatMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isRead?: boolean
    userId?: boolean
    connectionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isRead?: boolean
    userId?: boolean
    connectionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectScalar = {
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isRead?: boolean
    userId?: boolean
    connectionId?: boolean
  }

  export type ChatMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }
  export type ChatMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    connection?: boolean | ConnectionDefaultArgs<ExtArgs>
  }

  export type $ChatMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatMessage"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      connection: Prisma.$ConnectionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      createdAt: Date
      updatedAt: Date
      isRead: boolean
      userId: string
      connectionId: string
    }, ExtArgs["result"]["chatMessage"]>
    composites: {}
  }

  type ChatMessageGetPayload<S extends boolean | null | undefined | ChatMessageDefaultArgs> = $Result.GetResult<Prisma.$ChatMessagePayload, S>

  type ChatMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChatMessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChatMessageCountAggregateInputType | true
    }

  export interface ChatMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatMessage'], meta: { name: 'ChatMessage' } }
    /**
     * Find zero or one ChatMessage that matches the filter.
     * @param {ChatMessageFindUniqueArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatMessageFindUniqueArgs>(args: SelectSubset<T, ChatMessageFindUniqueArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ChatMessage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChatMessageFindUniqueOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ChatMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatMessageFindFirstArgs>(args?: SelectSubset<T, ChatMessageFindFirstArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ChatMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ChatMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany()
     * 
     * // Get first 10 ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatMessageFindManyArgs>(args?: SelectSubset<T, ChatMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ChatMessage.
     * @param {ChatMessageCreateArgs} args - Arguments to create a ChatMessage.
     * @example
     * // Create one ChatMessage
     * const ChatMessage = await prisma.chatMessage.create({
     *   data: {
     *     // ... data to create a ChatMessage
     *   }
     * })
     * 
     */
    create<T extends ChatMessageCreateArgs>(args: SelectSubset<T, ChatMessageCreateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ChatMessages.
     * @param {ChatMessageCreateManyArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatMessageCreateManyArgs>(args?: SelectSubset<T, ChatMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatMessages and returns the data saved in the database.
     * @param {ChatMessageCreateManyAndReturnArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatMessages and only return the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ChatMessage.
     * @param {ChatMessageDeleteArgs} args - Arguments to delete one ChatMessage.
     * @example
     * // Delete one ChatMessage
     * const ChatMessage = await prisma.chatMessage.delete({
     *   where: {
     *     // ... filter to delete one ChatMessage
     *   }
     * })
     * 
     */
    delete<T extends ChatMessageDeleteArgs>(args: SelectSubset<T, ChatMessageDeleteArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ChatMessage.
     * @param {ChatMessageUpdateArgs} args - Arguments to update one ChatMessage.
     * @example
     * // Update one ChatMessage
     * const chatMessage = await prisma.chatMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatMessageUpdateArgs>(args: SelectSubset<T, ChatMessageUpdateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ChatMessages.
     * @param {ChatMessageDeleteManyArgs} args - Arguments to filter ChatMessages to delete.
     * @example
     * // Delete a few ChatMessages
     * const { count } = await prisma.chatMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatMessageDeleteManyArgs>(args?: SelectSubset<T, ChatMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatMessageUpdateManyArgs>(args: SelectSubset<T, ChatMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatMessage.
     * @param {ChatMessageUpsertArgs} args - Arguments to update or create a ChatMessage.
     * @example
     * // Update or create a ChatMessage
     * const chatMessage = await prisma.chatMessage.upsert({
     *   create: {
     *     // ... data to create a ChatMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatMessage we want to update
     *   }
     * })
     */
    upsert<T extends ChatMessageUpsertArgs>(args: SelectSubset<T, ChatMessageUpsertArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageCountArgs} args - Arguments to filter ChatMessages to count.
     * @example
     * // Count the number of ChatMessages
     * const count = await prisma.chatMessage.count({
     *   where: {
     *     // ... the filter for the ChatMessages we want to count
     *   }
     * })
    **/
    count<T extends ChatMessageCountArgs>(
      args?: Subset<T, ChatMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatMessageAggregateArgs>(args: Subset<T, ChatMessageAggregateArgs>): Prisma.PrismaPromise<GetChatMessageAggregateType<T>>

    /**
     * Group by ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatMessageGroupByArgs['orderBy'] }
        : { orderBy?: ChatMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatMessage model
   */
  readonly fields: ChatMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    connection<T extends ConnectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConnectionDefaultArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatMessage model
   */ 
  interface ChatMessageFieldRefs {
    readonly id: FieldRef<"ChatMessage", 'String'>
    readonly content: FieldRef<"ChatMessage", 'String'>
    readonly createdAt: FieldRef<"ChatMessage", 'DateTime'>
    readonly updatedAt: FieldRef<"ChatMessage", 'DateTime'>
    readonly isRead: FieldRef<"ChatMessage", 'Boolean'>
    readonly userId: FieldRef<"ChatMessage", 'String'>
    readonly connectionId: FieldRef<"ChatMessage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ChatMessage findUnique
   */
  export type ChatMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findUniqueOrThrow
   */
  export type ChatMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findFirst
   */
  export type ChatMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findFirstOrThrow
   */
  export type ChatMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findMany
   */
  export type ChatMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessages to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage create
   */
  export type ChatMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatMessage.
     */
    data: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
  }

  /**
   * ChatMessage createMany
   */
  export type ChatMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatMessage createManyAndReturn
   */
  export type ChatMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatMessage update
   */
  export type ChatMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatMessage.
     */
    data: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
    /**
     * Choose, which ChatMessage to update.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage updateMany
   */
  export type ChatMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput
  }

  /**
   * ChatMessage upsert
   */
  export type ChatMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatMessage to update in case it exists.
     */
    where: ChatMessageWhereUniqueInput
    /**
     * In case the ChatMessage found by the `where` argument doesn't exist, create a new ChatMessage with this data.
     */
    create: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
    /**
     * In case the ChatMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
  }

  /**
   * ChatMessage delete
   */
  export type ChatMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter which ChatMessage to delete.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage deleteMany
   */
  export type ChatMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessages to delete
     */
    where?: ChatMessageWhereInput
  }

  /**
   * ChatMessage without action
   */
  export type ChatMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    image: 'image',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    role: 'role',
    fcmToken: 'fcmToken'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    title: 'title',
    body: 'body',
    type: 'type',
    isRead: 'isRead',
    data: 'data',
    createdAt: 'createdAt',
    sentAt: 'sentAt',
    userId: 'userId'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const ConnectionScalarFieldEnum: {
    id: 'id',
    connectionCode: 'connectionCode',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    pairedWithId: 'pairedWithId'
  };

  export type ConnectionScalarFieldEnum = (typeof ConnectionScalarFieldEnum)[keyof typeof ConnectionScalarFieldEnum]


  export const TreeScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    growthLevel: 'growthLevel',
    lastWatered: 'lastWatered',
    growthXP: 'growthXP',
    connectionId: 'connectionId'
  };

  export type TreeScalarFieldEnum = (typeof TreeScalarFieldEnum)[keyof typeof TreeScalarFieldEnum]


  export const MemoryScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    imageUrl: 'imageUrl',
    date: 'date',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    connectionId: 'connectionId'
  };

  export type MemoryScalarFieldEnum = (typeof MemoryScalarFieldEnum)[keyof typeof MemoryScalarFieldEnum]


  export const NoteScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    isTemporary: 'isTemporary',
    expiresAt: 'expiresAt',
    rating: 'rating',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    authorId: 'authorId',
    connectionId: 'connectionId'
  };

  export type NoteScalarFieldEnum = (typeof NoteScalarFieldEnum)[keyof typeof NoteScalarFieldEnum]


  export const SpecialDayScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    date: 'date',
    isRecurring: 'isRecurring',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isConfirmed: 'isConfirmed',
    confirmedAt: 'confirmedAt',
    confirmedById: 'confirmedById',
    userId: 'userId',
    connectionId: 'connectionId'
  };

  export type SpecialDayScalarFieldEnum = (typeof SpecialDayScalarFieldEnum)[keyof typeof SpecialDayScalarFieldEnum]


  export const GoalScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    isCompleted: 'isCompleted',
    dueDate: 'dueDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    connectionId: 'connectionId'
  };

  export type GoalScalarFieldEnum = (typeof GoalScalarFieldEnum)[keyof typeof GoalScalarFieldEnum]


  export const DreamScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    imageUrl: 'imageUrl',
    linkUrl: 'linkUrl',
    category: 'category',
    position: 'position',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    connectionId: 'connectionId'
  };

  export type DreamScalarFieldEnum = (typeof DreamScalarFieldEnum)[keyof typeof DreamScalarFieldEnum]


  export const DreamCommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    dreamId: 'dreamId',
    userId: 'userId'
  };

  export type DreamCommentScalarFieldEnum = (typeof DreamCommentScalarFieldEnum)[keyof typeof DreamCommentScalarFieldEnum]


  export const SurpriseScalarFieldEnum: {
    id: 'id',
    imageUrl: 'imageUrl',
    message: 'message',
    createdAt: 'createdAt',
    isSeenByAuthor: 'isSeenByAuthor',
    isSeenByPartner: 'isSeenByPartner',
    userId: 'userId',
    connectionId: 'connectionId'
  };

  export type SurpriseScalarFieldEnum = (typeof SurpriseScalarFieldEnum)[keyof typeof SurpriseScalarFieldEnum]


  export const TimeCapsuleScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    imageUrl: 'imageUrl',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    openDate: 'openDate',
    isOpened: 'isOpened',
    openedAt: 'openedAt',
    userId: 'userId',
    connectionId: 'connectionId'
  };

  export type TimeCapsuleScalarFieldEnum = (typeof TimeCapsuleScalarFieldEnum)[keyof typeof TimeCapsuleScalarFieldEnum]


  export const TimeCapsuleCommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    timeCapsuleId: 'timeCapsuleId',
    userId: 'userId'
  };

  export type TimeCapsuleCommentScalarFieldEnum = (typeof TimeCapsuleCommentScalarFieldEnum)[keyof typeof TimeCapsuleCommentScalarFieldEnum]


  export const ChatMessageScalarFieldEnum: {
    id: 'id',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isRead: 'isRead',
    userId: 'userId',
    connectionId: 'connectionId'
  };

  export type ChatMessageScalarFieldEnum = (typeof ChatMessageScalarFieldEnum)[keyof typeof ChatMessageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DreamCategory'
   */
  export type EnumDreamCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DreamCategory'>
    


  /**
   * Reference to a field of type 'DreamCategory[]'
   */
  export type ListEnumDreamCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DreamCategory[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    fcmToken?: StringNullableFilter<"User"> | string | null
    connections?: ConnectionListRelationFilter
    pairedWith?: ConnectionListRelationFilter
    memories?: MemoryListRelationFilter
    notes?: NoteListRelationFilter
    specialDays?: SpecialDayListRelationFilter
    goals?: GoalListRelationFilter
    dreams?: DreamListRelationFilter
    comments?: DreamCommentListRelationFilter
    receivedNotifications?: NotificationListRelationFilter
    surprises?: SurpriseListRelationFilter
    timeCapsules?: TimeCapsuleListRelationFilter
    timeCapsuleComments?: TimeCapsuleCommentListRelationFilter
    chatMessages?: ChatMessageListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    fcmToken?: SortOrderInput | SortOrder
    connections?: ConnectionOrderByRelationAggregateInput
    pairedWith?: ConnectionOrderByRelationAggregateInput
    memories?: MemoryOrderByRelationAggregateInput
    notes?: NoteOrderByRelationAggregateInput
    specialDays?: SpecialDayOrderByRelationAggregateInput
    goals?: GoalOrderByRelationAggregateInput
    dreams?: DreamOrderByRelationAggregateInput
    comments?: DreamCommentOrderByRelationAggregateInput
    receivedNotifications?: NotificationOrderByRelationAggregateInput
    surprises?: SurpriseOrderByRelationAggregateInput
    timeCapsules?: TimeCapsuleOrderByRelationAggregateInput
    timeCapsuleComments?: TimeCapsuleCommentOrderByRelationAggregateInput
    chatMessages?: ChatMessageOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    fcmToken?: StringNullableFilter<"User"> | string | null
    connections?: ConnectionListRelationFilter
    pairedWith?: ConnectionListRelationFilter
    memories?: MemoryListRelationFilter
    notes?: NoteListRelationFilter
    specialDays?: SpecialDayListRelationFilter
    goals?: GoalListRelationFilter
    dreams?: DreamListRelationFilter
    comments?: DreamCommentListRelationFilter
    receivedNotifications?: NotificationListRelationFilter
    surprises?: SurpriseListRelationFilter
    timeCapsules?: TimeCapsuleListRelationFilter
    timeCapsuleComments?: TimeCapsuleCommentListRelationFilter
    chatMessages?: ChatMessageListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    fcmToken?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    fcmToken?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    body?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolFilter<"Notification"> | boolean
    data?: JsonNullableFilter<"Notification">
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    sentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    userId?: StringFilter<"Notification"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    body?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    data?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    sentAt?: SortOrderInput | SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    title?: StringFilter<"Notification"> | string
    body?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolFilter<"Notification"> | boolean
    data?: JsonNullableFilter<"Notification">
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    sentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    userId?: StringFilter<"Notification"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    body?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    data?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    sentAt?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    body?: StringWithAggregatesFilter<"Notification"> | string
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    data?: JsonNullableWithAggregatesFilter<"Notification">
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    sentAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    userId?: StringWithAggregatesFilter<"Notification"> | string
  }

  export type ConnectionWhereInput = {
    AND?: ConnectionWhereInput | ConnectionWhereInput[]
    OR?: ConnectionWhereInput[]
    NOT?: ConnectionWhereInput | ConnectionWhereInput[]
    id?: StringFilter<"Connection"> | string
    connectionCode?: StringFilter<"Connection"> | string
    createdAt?: DateTimeFilter<"Connection"> | Date | string
    updatedAt?: DateTimeFilter<"Connection"> | Date | string
    userId?: StringFilter<"Connection"> | string
    pairedWithId?: StringNullableFilter<"Connection"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    pairedWith?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    memories?: MemoryListRelationFilter
    notes?: NoteListRelationFilter
    specialDays?: SpecialDayListRelationFilter
    goals?: GoalListRelationFilter
    dreams?: DreamListRelationFilter
    tree?: XOR<TreeNullableRelationFilter, TreeWhereInput> | null
    surprises?: SurpriseListRelationFilter
    timeCapsules?: TimeCapsuleListRelationFilter
    chatMessages?: ChatMessageListRelationFilter
  }

  export type ConnectionOrderByWithRelationInput = {
    id?: SortOrder
    connectionCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    pairedWithId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    pairedWith?: UserOrderByWithRelationInput
    memories?: MemoryOrderByRelationAggregateInput
    notes?: NoteOrderByRelationAggregateInput
    specialDays?: SpecialDayOrderByRelationAggregateInput
    goals?: GoalOrderByRelationAggregateInput
    dreams?: DreamOrderByRelationAggregateInput
    tree?: TreeOrderByWithRelationInput
    surprises?: SurpriseOrderByRelationAggregateInput
    timeCapsules?: TimeCapsuleOrderByRelationAggregateInput
    chatMessages?: ChatMessageOrderByRelationAggregateInput
  }

  export type ConnectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    connectionCode?: string
    AND?: ConnectionWhereInput | ConnectionWhereInput[]
    OR?: ConnectionWhereInput[]
    NOT?: ConnectionWhereInput | ConnectionWhereInput[]
    createdAt?: DateTimeFilter<"Connection"> | Date | string
    updatedAt?: DateTimeFilter<"Connection"> | Date | string
    userId?: StringFilter<"Connection"> | string
    pairedWithId?: StringNullableFilter<"Connection"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    pairedWith?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    memories?: MemoryListRelationFilter
    notes?: NoteListRelationFilter
    specialDays?: SpecialDayListRelationFilter
    goals?: GoalListRelationFilter
    dreams?: DreamListRelationFilter
    tree?: XOR<TreeNullableRelationFilter, TreeWhereInput> | null
    surprises?: SurpriseListRelationFilter
    timeCapsules?: TimeCapsuleListRelationFilter
    chatMessages?: ChatMessageListRelationFilter
  }, "id" | "connectionCode">

  export type ConnectionOrderByWithAggregationInput = {
    id?: SortOrder
    connectionCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    pairedWithId?: SortOrderInput | SortOrder
    _count?: ConnectionCountOrderByAggregateInput
    _max?: ConnectionMaxOrderByAggregateInput
    _min?: ConnectionMinOrderByAggregateInput
  }

  export type ConnectionScalarWhereWithAggregatesInput = {
    AND?: ConnectionScalarWhereWithAggregatesInput | ConnectionScalarWhereWithAggregatesInput[]
    OR?: ConnectionScalarWhereWithAggregatesInput[]
    NOT?: ConnectionScalarWhereWithAggregatesInput | ConnectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Connection"> | string
    connectionCode?: StringWithAggregatesFilter<"Connection"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Connection"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Connection"> | Date | string
    userId?: StringWithAggregatesFilter<"Connection"> | string
    pairedWithId?: StringNullableWithAggregatesFilter<"Connection"> | string | null
  }

  export type TreeWhereInput = {
    AND?: TreeWhereInput | TreeWhereInput[]
    OR?: TreeWhereInput[]
    NOT?: TreeWhereInput | TreeWhereInput[]
    id?: StringFilter<"Tree"> | string
    createdAt?: DateTimeFilter<"Tree"> | Date | string
    updatedAt?: DateTimeFilter<"Tree"> | Date | string
    growthLevel?: IntFilter<"Tree"> | number
    lastWatered?: DateTimeFilter<"Tree"> | Date | string
    growthXP?: IntFilter<"Tree"> | number
    connectionId?: StringFilter<"Tree"> | string
    connection?: XOR<ConnectionRelationFilter, ConnectionWhereInput>
  }

  export type TreeOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    growthLevel?: SortOrder
    lastWatered?: SortOrder
    growthXP?: SortOrder
    connectionId?: SortOrder
    connection?: ConnectionOrderByWithRelationInput
  }

  export type TreeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    connectionId?: string
    AND?: TreeWhereInput | TreeWhereInput[]
    OR?: TreeWhereInput[]
    NOT?: TreeWhereInput | TreeWhereInput[]
    createdAt?: DateTimeFilter<"Tree"> | Date | string
    updatedAt?: DateTimeFilter<"Tree"> | Date | string
    growthLevel?: IntFilter<"Tree"> | number
    lastWatered?: DateTimeFilter<"Tree"> | Date | string
    growthXP?: IntFilter<"Tree"> | number
    connection?: XOR<ConnectionRelationFilter, ConnectionWhereInput>
  }, "id" | "connectionId">

  export type TreeOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    growthLevel?: SortOrder
    lastWatered?: SortOrder
    growthXP?: SortOrder
    connectionId?: SortOrder
    _count?: TreeCountOrderByAggregateInput
    _avg?: TreeAvgOrderByAggregateInput
    _max?: TreeMaxOrderByAggregateInput
    _min?: TreeMinOrderByAggregateInput
    _sum?: TreeSumOrderByAggregateInput
  }

  export type TreeScalarWhereWithAggregatesInput = {
    AND?: TreeScalarWhereWithAggregatesInput | TreeScalarWhereWithAggregatesInput[]
    OR?: TreeScalarWhereWithAggregatesInput[]
    NOT?: TreeScalarWhereWithAggregatesInput | TreeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tree"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Tree"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tree"> | Date | string
    growthLevel?: IntWithAggregatesFilter<"Tree"> | number
    lastWatered?: DateTimeWithAggregatesFilter<"Tree"> | Date | string
    growthXP?: IntWithAggregatesFilter<"Tree"> | number
    connectionId?: StringWithAggregatesFilter<"Tree"> | string
  }

  export type MemoryWhereInput = {
    AND?: MemoryWhereInput | MemoryWhereInput[]
    OR?: MemoryWhereInput[]
    NOT?: MemoryWhereInput | MemoryWhereInput[]
    id?: StringFilter<"Memory"> | string
    title?: StringFilter<"Memory"> | string
    description?: StringFilter<"Memory"> | string
    imageUrl?: StringNullableFilter<"Memory"> | string | null
    date?: DateTimeFilter<"Memory"> | Date | string
    createdAt?: DateTimeFilter<"Memory"> | Date | string
    updatedAt?: DateTimeFilter<"Memory"> | Date | string
    userId?: StringFilter<"Memory"> | string
    connectionId?: StringFilter<"Memory"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    connection?: XOR<ConnectionRelationFilter, ConnectionWhereInput>
  }

  export type MemoryOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
    user?: UserOrderByWithRelationInput
    connection?: ConnectionOrderByWithRelationInput
  }

  export type MemoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MemoryWhereInput | MemoryWhereInput[]
    OR?: MemoryWhereInput[]
    NOT?: MemoryWhereInput | MemoryWhereInput[]
    title?: StringFilter<"Memory"> | string
    description?: StringFilter<"Memory"> | string
    imageUrl?: StringNullableFilter<"Memory"> | string | null
    date?: DateTimeFilter<"Memory"> | Date | string
    createdAt?: DateTimeFilter<"Memory"> | Date | string
    updatedAt?: DateTimeFilter<"Memory"> | Date | string
    userId?: StringFilter<"Memory"> | string
    connectionId?: StringFilter<"Memory"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    connection?: XOR<ConnectionRelationFilter, ConnectionWhereInput>
  }, "id">

  export type MemoryOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
    _count?: MemoryCountOrderByAggregateInput
    _max?: MemoryMaxOrderByAggregateInput
    _min?: MemoryMinOrderByAggregateInput
  }

  export type MemoryScalarWhereWithAggregatesInput = {
    AND?: MemoryScalarWhereWithAggregatesInput | MemoryScalarWhereWithAggregatesInput[]
    OR?: MemoryScalarWhereWithAggregatesInput[]
    NOT?: MemoryScalarWhereWithAggregatesInput | MemoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Memory"> | string
    title?: StringWithAggregatesFilter<"Memory"> | string
    description?: StringWithAggregatesFilter<"Memory"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"Memory"> | string | null
    date?: DateTimeWithAggregatesFilter<"Memory"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Memory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Memory"> | Date | string
    userId?: StringWithAggregatesFilter<"Memory"> | string
    connectionId?: StringWithAggregatesFilter<"Memory"> | string
  }

  export type NoteWhereInput = {
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    id?: StringFilter<"Note"> | string
    title?: StringFilter<"Note"> | string
    content?: StringFilter<"Note"> | string
    isTemporary?: BoolFilter<"Note"> | boolean
    expiresAt?: DateTimeNullableFilter<"Note"> | Date | string | null
    rating?: IntNullableFilter<"Note"> | number | null
    createdAt?: DateTimeFilter<"Note"> | Date | string
    updatedAt?: DateTimeFilter<"Note"> | Date | string
    authorId?: StringFilter<"Note"> | string
    connectionId?: StringFilter<"Note"> | string
    author?: XOR<UserRelationFilter, UserWhereInput>
    connection?: XOR<ConnectionRelationFilter, ConnectionWhereInput>
  }

  export type NoteOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isTemporary?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    connectionId?: SortOrder
    author?: UserOrderByWithRelationInput
    connection?: ConnectionOrderByWithRelationInput
  }

  export type NoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    title?: StringFilter<"Note"> | string
    content?: StringFilter<"Note"> | string
    isTemporary?: BoolFilter<"Note"> | boolean
    expiresAt?: DateTimeNullableFilter<"Note"> | Date | string | null
    rating?: IntNullableFilter<"Note"> | number | null
    createdAt?: DateTimeFilter<"Note"> | Date | string
    updatedAt?: DateTimeFilter<"Note"> | Date | string
    authorId?: StringFilter<"Note"> | string
    connectionId?: StringFilter<"Note"> | string
    author?: XOR<UserRelationFilter, UserWhereInput>
    connection?: XOR<ConnectionRelationFilter, ConnectionWhereInput>
  }, "id">

  export type NoteOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isTemporary?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    connectionId?: SortOrder
    _count?: NoteCountOrderByAggregateInput
    _avg?: NoteAvgOrderByAggregateInput
    _max?: NoteMaxOrderByAggregateInput
    _min?: NoteMinOrderByAggregateInput
    _sum?: NoteSumOrderByAggregateInput
  }

  export type NoteScalarWhereWithAggregatesInput = {
    AND?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    OR?: NoteScalarWhereWithAggregatesInput[]
    NOT?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Note"> | string
    title?: StringWithAggregatesFilter<"Note"> | string
    content?: StringWithAggregatesFilter<"Note"> | string
    isTemporary?: BoolWithAggregatesFilter<"Note"> | boolean
    expiresAt?: DateTimeNullableWithAggregatesFilter<"Note"> | Date | string | null
    rating?: IntNullableWithAggregatesFilter<"Note"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Note"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Note"> | Date | string
    authorId?: StringWithAggregatesFilter<"Note"> | string
    connectionId?: StringWithAggregatesFilter<"Note"> | string
  }

  export type SpecialDayWhereInput = {
    AND?: SpecialDayWhereInput | SpecialDayWhereInput[]
    OR?: SpecialDayWhereInput[]
    NOT?: SpecialDayWhereInput | SpecialDayWhereInput[]
    id?: StringFilter<"SpecialDay"> | string
    title?: StringFilter<"SpecialDay"> | string
    description?: StringNullableFilter<"SpecialDay"> | string | null
    date?: DateTimeFilter<"SpecialDay"> | Date | string
    isRecurring?: BoolFilter<"SpecialDay"> | boolean
    createdAt?: DateTimeFilter<"SpecialDay"> | Date | string
    updatedAt?: DateTimeFilter<"SpecialDay"> | Date | string
    isConfirmed?: BoolFilter<"SpecialDay"> | boolean
    confirmedAt?: DateTimeNullableFilter<"SpecialDay"> | Date | string | null
    confirmedById?: StringNullableFilter<"SpecialDay"> | string | null
    userId?: StringFilter<"SpecialDay"> | string
    connectionId?: StringFilter<"SpecialDay"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    connection?: XOR<ConnectionRelationFilter, ConnectionWhereInput>
  }

  export type SpecialDayOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    date?: SortOrder
    isRecurring?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isConfirmed?: SortOrder
    confirmedAt?: SortOrderInput | SortOrder
    confirmedById?: SortOrderInput | SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
    user?: UserOrderByWithRelationInput
    connection?: ConnectionOrderByWithRelationInput
  }

  export type SpecialDayWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SpecialDayWhereInput | SpecialDayWhereInput[]
    OR?: SpecialDayWhereInput[]
    NOT?: SpecialDayWhereInput | SpecialDayWhereInput[]
    title?: StringFilter<"SpecialDay"> | string
    description?: StringNullableFilter<"SpecialDay"> | string | null
    date?: DateTimeFilter<"SpecialDay"> | Date | string
    isRecurring?: BoolFilter<"SpecialDay"> | boolean
    createdAt?: DateTimeFilter<"SpecialDay"> | Date | string
    updatedAt?: DateTimeFilter<"SpecialDay"> | Date | string
    isConfirmed?: BoolFilter<"SpecialDay"> | boolean
    confirmedAt?: DateTimeNullableFilter<"SpecialDay"> | Date | string | null
    confirmedById?: StringNullableFilter<"SpecialDay"> | string | null
    userId?: StringFilter<"SpecialDay"> | string
    connectionId?: StringFilter<"SpecialDay"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    connection?: XOR<ConnectionRelationFilter, ConnectionWhereInput>
  }, "id">

  export type SpecialDayOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    date?: SortOrder
    isRecurring?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isConfirmed?: SortOrder
    confirmedAt?: SortOrderInput | SortOrder
    confirmedById?: SortOrderInput | SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
    _count?: SpecialDayCountOrderByAggregateInput
    _max?: SpecialDayMaxOrderByAggregateInput
    _min?: SpecialDayMinOrderByAggregateInput
  }

  export type SpecialDayScalarWhereWithAggregatesInput = {
    AND?: SpecialDayScalarWhereWithAggregatesInput | SpecialDayScalarWhereWithAggregatesInput[]
    OR?: SpecialDayScalarWhereWithAggregatesInput[]
    NOT?: SpecialDayScalarWhereWithAggregatesInput | SpecialDayScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SpecialDay"> | string
    title?: StringWithAggregatesFilter<"SpecialDay"> | string
    description?: StringNullableWithAggregatesFilter<"SpecialDay"> | string | null
    date?: DateTimeWithAggregatesFilter<"SpecialDay"> | Date | string
    isRecurring?: BoolWithAggregatesFilter<"SpecialDay"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"SpecialDay"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SpecialDay"> | Date | string
    isConfirmed?: BoolWithAggregatesFilter<"SpecialDay"> | boolean
    confirmedAt?: DateTimeNullableWithAggregatesFilter<"SpecialDay"> | Date | string | null
    confirmedById?: StringNullableWithAggregatesFilter<"SpecialDay"> | string | null
    userId?: StringWithAggregatesFilter<"SpecialDay"> | string
    connectionId?: StringWithAggregatesFilter<"SpecialDay"> | string
  }

  export type GoalWhereInput = {
    AND?: GoalWhereInput | GoalWhereInput[]
    OR?: GoalWhereInput[]
    NOT?: GoalWhereInput | GoalWhereInput[]
    id?: StringFilter<"Goal"> | string
    title?: StringFilter<"Goal"> | string
    description?: StringNullableFilter<"Goal"> | string | null
    isCompleted?: BoolFilter<"Goal"> | boolean
    dueDate?: DateTimeNullableFilter<"Goal"> | Date | string | null
    createdAt?: DateTimeFilter<"Goal"> | Date | string
    updatedAt?: DateTimeFilter<"Goal"> | Date | string
    userId?: StringFilter<"Goal"> | string
    connectionId?: StringFilter<"Goal"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    connection?: XOR<ConnectionRelationFilter, ConnectionWhereInput>
  }

  export type GoalOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    isCompleted?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
    user?: UserOrderByWithRelationInput
    connection?: ConnectionOrderByWithRelationInput
  }

  export type GoalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GoalWhereInput | GoalWhereInput[]
    OR?: GoalWhereInput[]
    NOT?: GoalWhereInput | GoalWhereInput[]
    title?: StringFilter<"Goal"> | string
    description?: StringNullableFilter<"Goal"> | string | null
    isCompleted?: BoolFilter<"Goal"> | boolean
    dueDate?: DateTimeNullableFilter<"Goal"> | Date | string | null
    createdAt?: DateTimeFilter<"Goal"> | Date | string
    updatedAt?: DateTimeFilter<"Goal"> | Date | string
    userId?: StringFilter<"Goal"> | string
    connectionId?: StringFilter<"Goal"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    connection?: XOR<ConnectionRelationFilter, ConnectionWhereInput>
  }, "id">

  export type GoalOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    isCompleted?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
    _count?: GoalCountOrderByAggregateInput
    _max?: GoalMaxOrderByAggregateInput
    _min?: GoalMinOrderByAggregateInput
  }

  export type GoalScalarWhereWithAggregatesInput = {
    AND?: GoalScalarWhereWithAggregatesInput | GoalScalarWhereWithAggregatesInput[]
    OR?: GoalScalarWhereWithAggregatesInput[]
    NOT?: GoalScalarWhereWithAggregatesInput | GoalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Goal"> | string
    title?: StringWithAggregatesFilter<"Goal"> | string
    description?: StringNullableWithAggregatesFilter<"Goal"> | string | null
    isCompleted?: BoolWithAggregatesFilter<"Goal"> | boolean
    dueDate?: DateTimeNullableWithAggregatesFilter<"Goal"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Goal"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Goal"> | Date | string
    userId?: StringWithAggregatesFilter<"Goal"> | string
    connectionId?: StringWithAggregatesFilter<"Goal"> | string
  }

  export type DreamWhereInput = {
    AND?: DreamWhereInput | DreamWhereInput[]
    OR?: DreamWhereInput[]
    NOT?: DreamWhereInput | DreamWhereInput[]
    id?: StringFilter<"Dream"> | string
    title?: StringFilter<"Dream"> | string
    description?: StringFilter<"Dream"> | string
    imageUrl?: StringNullableFilter<"Dream"> | string | null
    linkUrl?: StringNullableFilter<"Dream"> | string | null
    category?: EnumDreamCategoryFilter<"Dream"> | $Enums.DreamCategory
    position?: IntFilter<"Dream"> | number
    createdAt?: DateTimeFilter<"Dream"> | Date | string
    updatedAt?: DateTimeFilter<"Dream"> | Date | string
    userId?: StringFilter<"Dream"> | string
    connectionId?: StringFilter<"Dream"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    connection?: XOR<ConnectionRelationFilter, ConnectionWhereInput>
    comments?: DreamCommentListRelationFilter
  }

  export type DreamOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    linkUrl?: SortOrderInput | SortOrder
    category?: SortOrder
    position?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
    user?: UserOrderByWithRelationInput
    connection?: ConnectionOrderByWithRelationInput
    comments?: DreamCommentOrderByRelationAggregateInput
  }

  export type DreamWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DreamWhereInput | DreamWhereInput[]
    OR?: DreamWhereInput[]
    NOT?: DreamWhereInput | DreamWhereInput[]
    title?: StringFilter<"Dream"> | string
    description?: StringFilter<"Dream"> | string
    imageUrl?: StringNullableFilter<"Dream"> | string | null
    linkUrl?: StringNullableFilter<"Dream"> | string | null
    category?: EnumDreamCategoryFilter<"Dream"> | $Enums.DreamCategory
    position?: IntFilter<"Dream"> | number
    createdAt?: DateTimeFilter<"Dream"> | Date | string
    updatedAt?: DateTimeFilter<"Dream"> | Date | string
    userId?: StringFilter<"Dream"> | string
    connectionId?: StringFilter<"Dream"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    connection?: XOR<ConnectionRelationFilter, ConnectionWhereInput>
    comments?: DreamCommentListRelationFilter
  }, "id">

  export type DreamOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    linkUrl?: SortOrderInput | SortOrder
    category?: SortOrder
    position?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
    _count?: DreamCountOrderByAggregateInput
    _avg?: DreamAvgOrderByAggregateInput
    _max?: DreamMaxOrderByAggregateInput
    _min?: DreamMinOrderByAggregateInput
    _sum?: DreamSumOrderByAggregateInput
  }

  export type DreamScalarWhereWithAggregatesInput = {
    AND?: DreamScalarWhereWithAggregatesInput | DreamScalarWhereWithAggregatesInput[]
    OR?: DreamScalarWhereWithAggregatesInput[]
    NOT?: DreamScalarWhereWithAggregatesInput | DreamScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Dream"> | string
    title?: StringWithAggregatesFilter<"Dream"> | string
    description?: StringWithAggregatesFilter<"Dream"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"Dream"> | string | null
    linkUrl?: StringNullableWithAggregatesFilter<"Dream"> | string | null
    category?: EnumDreamCategoryWithAggregatesFilter<"Dream"> | $Enums.DreamCategory
    position?: IntWithAggregatesFilter<"Dream"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Dream"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Dream"> | Date | string
    userId?: StringWithAggregatesFilter<"Dream"> | string
    connectionId?: StringWithAggregatesFilter<"Dream"> | string
  }

  export type DreamCommentWhereInput = {
    AND?: DreamCommentWhereInput | DreamCommentWhereInput[]
    OR?: DreamCommentWhereInput[]
    NOT?: DreamCommentWhereInput | DreamCommentWhereInput[]
    id?: StringFilter<"DreamComment"> | string
    content?: StringFilter<"DreamComment"> | string
    createdAt?: DateTimeFilter<"DreamComment"> | Date | string
    updatedAt?: DateTimeFilter<"DreamComment"> | Date | string
    dreamId?: StringFilter<"DreamComment"> | string
    userId?: StringFilter<"DreamComment"> | string
    dream?: XOR<DreamRelationFilter, DreamWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type DreamCommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dreamId?: SortOrder
    userId?: SortOrder
    dream?: DreamOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type DreamCommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DreamCommentWhereInput | DreamCommentWhereInput[]
    OR?: DreamCommentWhereInput[]
    NOT?: DreamCommentWhereInput | DreamCommentWhereInput[]
    content?: StringFilter<"DreamComment"> | string
    createdAt?: DateTimeFilter<"DreamComment"> | Date | string
    updatedAt?: DateTimeFilter<"DreamComment"> | Date | string
    dreamId?: StringFilter<"DreamComment"> | string
    userId?: StringFilter<"DreamComment"> | string
    dream?: XOR<DreamRelationFilter, DreamWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type DreamCommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dreamId?: SortOrder
    userId?: SortOrder
    _count?: DreamCommentCountOrderByAggregateInput
    _max?: DreamCommentMaxOrderByAggregateInput
    _min?: DreamCommentMinOrderByAggregateInput
  }

  export type DreamCommentScalarWhereWithAggregatesInput = {
    AND?: DreamCommentScalarWhereWithAggregatesInput | DreamCommentScalarWhereWithAggregatesInput[]
    OR?: DreamCommentScalarWhereWithAggregatesInput[]
    NOT?: DreamCommentScalarWhereWithAggregatesInput | DreamCommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DreamComment"> | string
    content?: StringWithAggregatesFilter<"DreamComment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DreamComment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DreamComment"> | Date | string
    dreamId?: StringWithAggregatesFilter<"DreamComment"> | string
    userId?: StringWithAggregatesFilter<"DreamComment"> | string
  }

  export type SurpriseWhereInput = {
    AND?: SurpriseWhereInput | SurpriseWhereInput[]
    OR?: SurpriseWhereInput[]
    NOT?: SurpriseWhereInput | SurpriseWhereInput[]
    id?: StringFilter<"Surprise"> | string
    imageUrl?: StringFilter<"Surprise"> | string
    message?: StringNullableFilter<"Surprise"> | string | null
    createdAt?: DateTimeFilter<"Surprise"> | Date | string
    isSeenByAuthor?: BoolFilter<"Surprise"> | boolean
    isSeenByPartner?: BoolFilter<"Surprise"> | boolean
    userId?: StringFilter<"Surprise"> | string
    connectionId?: StringFilter<"Surprise"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    connection?: XOR<ConnectionRelationFilter, ConnectionWhereInput>
  }

  export type SurpriseOrderByWithRelationInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    message?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    isSeenByAuthor?: SortOrder
    isSeenByPartner?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
    user?: UserOrderByWithRelationInput
    connection?: ConnectionOrderByWithRelationInput
  }

  export type SurpriseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SurpriseWhereInput | SurpriseWhereInput[]
    OR?: SurpriseWhereInput[]
    NOT?: SurpriseWhereInput | SurpriseWhereInput[]
    imageUrl?: StringFilter<"Surprise"> | string
    message?: StringNullableFilter<"Surprise"> | string | null
    createdAt?: DateTimeFilter<"Surprise"> | Date | string
    isSeenByAuthor?: BoolFilter<"Surprise"> | boolean
    isSeenByPartner?: BoolFilter<"Surprise"> | boolean
    userId?: StringFilter<"Surprise"> | string
    connectionId?: StringFilter<"Surprise"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    connection?: XOR<ConnectionRelationFilter, ConnectionWhereInput>
  }, "id">

  export type SurpriseOrderByWithAggregationInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    message?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    isSeenByAuthor?: SortOrder
    isSeenByPartner?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
    _count?: SurpriseCountOrderByAggregateInput
    _max?: SurpriseMaxOrderByAggregateInput
    _min?: SurpriseMinOrderByAggregateInput
  }

  export type SurpriseScalarWhereWithAggregatesInput = {
    AND?: SurpriseScalarWhereWithAggregatesInput | SurpriseScalarWhereWithAggregatesInput[]
    OR?: SurpriseScalarWhereWithAggregatesInput[]
    NOT?: SurpriseScalarWhereWithAggregatesInput | SurpriseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Surprise"> | string
    imageUrl?: StringWithAggregatesFilter<"Surprise"> | string
    message?: StringNullableWithAggregatesFilter<"Surprise"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Surprise"> | Date | string
    isSeenByAuthor?: BoolWithAggregatesFilter<"Surprise"> | boolean
    isSeenByPartner?: BoolWithAggregatesFilter<"Surprise"> | boolean
    userId?: StringWithAggregatesFilter<"Surprise"> | string
    connectionId?: StringWithAggregatesFilter<"Surprise"> | string
  }

  export type TimeCapsuleWhereInput = {
    AND?: TimeCapsuleWhereInput | TimeCapsuleWhereInput[]
    OR?: TimeCapsuleWhereInput[]
    NOT?: TimeCapsuleWhereInput | TimeCapsuleWhereInput[]
    id?: StringFilter<"TimeCapsule"> | string
    title?: StringFilter<"TimeCapsule"> | string
    description?: StringFilter<"TimeCapsule"> | string
    imageUrl?: StringNullableFilter<"TimeCapsule"> | string | null
    content?: StringFilter<"TimeCapsule"> | string
    createdAt?: DateTimeFilter<"TimeCapsule"> | Date | string
    updatedAt?: DateTimeFilter<"TimeCapsule"> | Date | string
    openDate?: DateTimeFilter<"TimeCapsule"> | Date | string
    isOpened?: BoolFilter<"TimeCapsule"> | boolean
    openedAt?: DateTimeNullableFilter<"TimeCapsule"> | Date | string | null
    userId?: StringFilter<"TimeCapsule"> | string
    connectionId?: StringFilter<"TimeCapsule"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    connection?: XOR<ConnectionRelationFilter, ConnectionWhereInput>
    comments?: TimeCapsuleCommentListRelationFilter
  }

  export type TimeCapsuleOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    openDate?: SortOrder
    isOpened?: SortOrder
    openedAt?: SortOrderInput | SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
    user?: UserOrderByWithRelationInput
    connection?: ConnectionOrderByWithRelationInput
    comments?: TimeCapsuleCommentOrderByRelationAggregateInput
  }

  export type TimeCapsuleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TimeCapsuleWhereInput | TimeCapsuleWhereInput[]
    OR?: TimeCapsuleWhereInput[]
    NOT?: TimeCapsuleWhereInput | TimeCapsuleWhereInput[]
    title?: StringFilter<"TimeCapsule"> | string
    description?: StringFilter<"TimeCapsule"> | string
    imageUrl?: StringNullableFilter<"TimeCapsule"> | string | null
    content?: StringFilter<"TimeCapsule"> | string
    createdAt?: DateTimeFilter<"TimeCapsule"> | Date | string
    updatedAt?: DateTimeFilter<"TimeCapsule"> | Date | string
    openDate?: DateTimeFilter<"TimeCapsule"> | Date | string
    isOpened?: BoolFilter<"TimeCapsule"> | boolean
    openedAt?: DateTimeNullableFilter<"TimeCapsule"> | Date | string | null
    userId?: StringFilter<"TimeCapsule"> | string
    connectionId?: StringFilter<"TimeCapsule"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    connection?: XOR<ConnectionRelationFilter, ConnectionWhereInput>
    comments?: TimeCapsuleCommentListRelationFilter
  }, "id">

  export type TimeCapsuleOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    openDate?: SortOrder
    isOpened?: SortOrder
    openedAt?: SortOrderInput | SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
    _count?: TimeCapsuleCountOrderByAggregateInput
    _max?: TimeCapsuleMaxOrderByAggregateInput
    _min?: TimeCapsuleMinOrderByAggregateInput
  }

  export type TimeCapsuleScalarWhereWithAggregatesInput = {
    AND?: TimeCapsuleScalarWhereWithAggregatesInput | TimeCapsuleScalarWhereWithAggregatesInput[]
    OR?: TimeCapsuleScalarWhereWithAggregatesInput[]
    NOT?: TimeCapsuleScalarWhereWithAggregatesInput | TimeCapsuleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TimeCapsule"> | string
    title?: StringWithAggregatesFilter<"TimeCapsule"> | string
    description?: StringWithAggregatesFilter<"TimeCapsule"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"TimeCapsule"> | string | null
    content?: StringWithAggregatesFilter<"TimeCapsule"> | string
    createdAt?: DateTimeWithAggregatesFilter<"TimeCapsule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TimeCapsule"> | Date | string
    openDate?: DateTimeWithAggregatesFilter<"TimeCapsule"> | Date | string
    isOpened?: BoolWithAggregatesFilter<"TimeCapsule"> | boolean
    openedAt?: DateTimeNullableWithAggregatesFilter<"TimeCapsule"> | Date | string | null
    userId?: StringWithAggregatesFilter<"TimeCapsule"> | string
    connectionId?: StringWithAggregatesFilter<"TimeCapsule"> | string
  }

  export type TimeCapsuleCommentWhereInput = {
    AND?: TimeCapsuleCommentWhereInput | TimeCapsuleCommentWhereInput[]
    OR?: TimeCapsuleCommentWhereInput[]
    NOT?: TimeCapsuleCommentWhereInput | TimeCapsuleCommentWhereInput[]
    id?: StringFilter<"TimeCapsuleComment"> | string
    content?: StringFilter<"TimeCapsuleComment"> | string
    createdAt?: DateTimeFilter<"TimeCapsuleComment"> | Date | string
    updatedAt?: DateTimeFilter<"TimeCapsuleComment"> | Date | string
    timeCapsuleId?: StringFilter<"TimeCapsuleComment"> | string
    userId?: StringFilter<"TimeCapsuleComment"> | string
    timeCapsule?: XOR<TimeCapsuleRelationFilter, TimeCapsuleWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type TimeCapsuleCommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    timeCapsuleId?: SortOrder
    userId?: SortOrder
    timeCapsule?: TimeCapsuleOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type TimeCapsuleCommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TimeCapsuleCommentWhereInput | TimeCapsuleCommentWhereInput[]
    OR?: TimeCapsuleCommentWhereInput[]
    NOT?: TimeCapsuleCommentWhereInput | TimeCapsuleCommentWhereInput[]
    content?: StringFilter<"TimeCapsuleComment"> | string
    createdAt?: DateTimeFilter<"TimeCapsuleComment"> | Date | string
    updatedAt?: DateTimeFilter<"TimeCapsuleComment"> | Date | string
    timeCapsuleId?: StringFilter<"TimeCapsuleComment"> | string
    userId?: StringFilter<"TimeCapsuleComment"> | string
    timeCapsule?: XOR<TimeCapsuleRelationFilter, TimeCapsuleWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type TimeCapsuleCommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    timeCapsuleId?: SortOrder
    userId?: SortOrder
    _count?: TimeCapsuleCommentCountOrderByAggregateInput
    _max?: TimeCapsuleCommentMaxOrderByAggregateInput
    _min?: TimeCapsuleCommentMinOrderByAggregateInput
  }

  export type TimeCapsuleCommentScalarWhereWithAggregatesInput = {
    AND?: TimeCapsuleCommentScalarWhereWithAggregatesInput | TimeCapsuleCommentScalarWhereWithAggregatesInput[]
    OR?: TimeCapsuleCommentScalarWhereWithAggregatesInput[]
    NOT?: TimeCapsuleCommentScalarWhereWithAggregatesInput | TimeCapsuleCommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TimeCapsuleComment"> | string
    content?: StringWithAggregatesFilter<"TimeCapsuleComment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"TimeCapsuleComment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TimeCapsuleComment"> | Date | string
    timeCapsuleId?: StringWithAggregatesFilter<"TimeCapsuleComment"> | string
    userId?: StringWithAggregatesFilter<"TimeCapsuleComment"> | string
  }

  export type ChatMessageWhereInput = {
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    id?: StringFilter<"ChatMessage"> | string
    content?: StringFilter<"ChatMessage"> | string
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    updatedAt?: DateTimeFilter<"ChatMessage"> | Date | string
    isRead?: BoolFilter<"ChatMessage"> | boolean
    userId?: StringFilter<"ChatMessage"> | string
    connectionId?: StringFilter<"ChatMessage"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    connection?: XOR<ConnectionRelationFilter, ConnectionWhereInput>
  }

  export type ChatMessageOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
    user?: UserOrderByWithRelationInput
    connection?: ConnectionOrderByWithRelationInput
  }

  export type ChatMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    content?: StringFilter<"ChatMessage"> | string
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    updatedAt?: DateTimeFilter<"ChatMessage"> | Date | string
    isRead?: BoolFilter<"ChatMessage"> | boolean
    userId?: StringFilter<"ChatMessage"> | string
    connectionId?: StringFilter<"ChatMessage"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    connection?: XOR<ConnectionRelationFilter, ConnectionWhereInput>
  }, "id">

  export type ChatMessageOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
    _count?: ChatMessageCountOrderByAggregateInput
    _max?: ChatMessageMaxOrderByAggregateInput
    _min?: ChatMessageMinOrderByAggregateInput
  }

  export type ChatMessageScalarWhereWithAggregatesInput = {
    AND?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    OR?: ChatMessageScalarWhereWithAggregatesInput[]
    NOT?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChatMessage"> | string
    content?: StringWithAggregatesFilter<"ChatMessage"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ChatMessage"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChatMessage"> | Date | string
    isRead?: BoolWithAggregatesFilter<"ChatMessage"> | boolean
    userId?: StringWithAggregatesFilter<"ChatMessage"> | string
    connectionId?: StringWithAggregatesFilter<"ChatMessage"> | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionCreateNestedManyWithoutPairedWithInput
    memories?: MemoryCreateNestedManyWithoutUserInput
    notes?: NoteCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    dreams?: DreamCreateNestedManyWithoutUserInput
    comments?: DreamCommentCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    surprises?: SurpriseCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionUncheckedCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionUncheckedCreateNestedManyWithoutPairedWithInput
    memories?: MemoryUncheckedCreateNestedManyWithoutUserInput
    notes?: NoteUncheckedCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    dreams?: DreamUncheckedCreateNestedManyWithoutUserInput
    comments?: DreamCommentUncheckedCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUpdateManyWithoutUserNestedInput
    notes?: NoteUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    dreams?: DreamUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUncheckedUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUncheckedUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUncheckedUpdateManyWithoutUserNestedInput
    notes?: NoteUncheckedUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUncheckedUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationCreateInput = {
    id?: string
    title: string
    body: string
    type: $Enums.NotificationType
    isRead?: boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    sentAt?: Date | string | null
    user: UserCreateNestedOneWithoutReceivedNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    title: string
    body: string
    type: $Enums.NotificationType
    isRead?: boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    sentAt?: Date | string | null
    userId: string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutReceivedNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    title: string
    body: string
    type: $Enums.NotificationType
    isRead?: boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    sentAt?: Date | string | null
    userId: string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ConnectionCreateInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConnectionsInput
    pairedWith?: UserCreateNestedOneWithoutPairedWithInput
    memories?: MemoryCreateNestedManyWithoutConnectionInput
    notes?: NoteCreateNestedManyWithoutConnectionInput
    specialDays?: SpecialDayCreateNestedManyWithoutConnectionInput
    goals?: GoalCreateNestedManyWithoutConnectionInput
    dreams?: DreamCreateNestedManyWithoutConnectionInput
    tree?: TreeCreateNestedOneWithoutConnectionInput
    surprises?: SurpriseCreateNestedManyWithoutConnectionInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutConnectionInput
    chatMessages?: ChatMessageCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionUncheckedCreateInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    pairedWithId?: string | null
    memories?: MemoryUncheckedCreateNestedManyWithoutConnectionInput
    notes?: NoteUncheckedCreateNestedManyWithoutConnectionInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutConnectionInput
    goals?: GoalUncheckedCreateNestedManyWithoutConnectionInput
    dreams?: DreamUncheckedCreateNestedManyWithoutConnectionInput
    tree?: TreeUncheckedCreateNestedOneWithoutConnectionInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutConnectionInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutConnectionInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConnectionsNestedInput
    pairedWith?: UserUpdateOneWithoutPairedWithNestedInput
    memories?: MemoryUpdateManyWithoutConnectionNestedInput
    notes?: NoteUpdateManyWithoutConnectionNestedInput
    specialDays?: SpecialDayUpdateManyWithoutConnectionNestedInput
    goals?: GoalUpdateManyWithoutConnectionNestedInput
    dreams?: DreamUpdateManyWithoutConnectionNestedInput
    tree?: TreeUpdateOneWithoutConnectionNestedInput
    surprises?: SurpriseUpdateManyWithoutConnectionNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutConnectionNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutConnectionNestedInput
  }

  export type ConnectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    pairedWithId?: NullableStringFieldUpdateOperationsInput | string | null
    memories?: MemoryUncheckedUpdateManyWithoutConnectionNestedInput
    notes?: NoteUncheckedUpdateManyWithoutConnectionNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutConnectionNestedInput
    goals?: GoalUncheckedUpdateManyWithoutConnectionNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutConnectionNestedInput
    tree?: TreeUncheckedUpdateOneWithoutConnectionNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutConnectionNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutConnectionNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutConnectionNestedInput
  }

  export type ConnectionCreateManyInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    pairedWithId?: string | null
  }

  export type ConnectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConnectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    pairedWithId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TreeCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    growthLevel?: number
    lastWatered?: Date | string
    growthXP?: number
    connection: ConnectionCreateNestedOneWithoutTreeInput
  }

  export type TreeUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    growthLevel?: number
    lastWatered?: Date | string
    growthXP?: number
    connectionId: string
  }

  export type TreeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    growthLevel?: IntFieldUpdateOperationsInput | number
    lastWatered?: DateTimeFieldUpdateOperationsInput | Date | string
    growthXP?: IntFieldUpdateOperationsInput | number
    connection?: ConnectionUpdateOneRequiredWithoutTreeNestedInput
  }

  export type TreeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    growthLevel?: IntFieldUpdateOperationsInput | number
    lastWatered?: DateTimeFieldUpdateOperationsInput | Date | string
    growthXP?: IntFieldUpdateOperationsInput | number
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type TreeCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    growthLevel?: number
    lastWatered?: Date | string
    growthXP?: number
    connectionId: string
  }

  export type TreeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    growthLevel?: IntFieldUpdateOperationsInput | number
    lastWatered?: DateTimeFieldUpdateOperationsInput | Date | string
    growthXP?: IntFieldUpdateOperationsInput | number
  }

  export type TreeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    growthLevel?: IntFieldUpdateOperationsInput | number
    lastWatered?: DateTimeFieldUpdateOperationsInput | Date | string
    growthXP?: IntFieldUpdateOperationsInput | number
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type MemoryCreateInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMemoriesInput
    connection: ConnectionCreateNestedOneWithoutMemoriesInput
  }

  export type MemoryUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    connectionId: string
  }

  export type MemoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMemoriesNestedInput
    connection?: ConnectionUpdateOneRequiredWithoutMemoriesNestedInput
  }

  export type MemoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type MemoryCreateManyInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    connectionId: string
  }

  export type MemoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type NoteCreateInput = {
    id?: string
    title: string
    content: string
    isTemporary?: boolean
    expiresAt?: Date | string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutNotesInput
    connection: ConnectionCreateNestedOneWithoutNotesInput
  }

  export type NoteUncheckedCreateInput = {
    id?: string
    title: string
    content: string
    isTemporary?: boolean
    expiresAt?: Date | string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    connectionId: string
  }

  export type NoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isTemporary?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutNotesNestedInput
    connection?: ConnectionUpdateOneRequiredWithoutNotesNestedInput
  }

  export type NoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isTemporary?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type NoteCreateManyInput = {
    id?: string
    title: string
    content: string
    isTemporary?: boolean
    expiresAt?: Date | string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    connectionId: string
  }

  export type NoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isTemporary?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isTemporary?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type SpecialDayCreateInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    isRecurring?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isConfirmed?: boolean
    confirmedAt?: Date | string | null
    confirmedById?: string | null
    user: UserCreateNestedOneWithoutSpecialDaysInput
    connection: ConnectionCreateNestedOneWithoutSpecialDaysInput
  }

  export type SpecialDayUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    isRecurring?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isConfirmed?: boolean
    confirmedAt?: Date | string | null
    confirmedById?: string | null
    userId: string
    connectionId: string
  }

  export type SpecialDayUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedById?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutSpecialDaysNestedInput
    connection?: ConnectionUpdateOneRequiredWithoutSpecialDaysNestedInput
  }

  export type SpecialDayUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedById?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type SpecialDayCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    isRecurring?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isConfirmed?: boolean
    confirmedAt?: Date | string | null
    confirmedById?: string | null
    userId: string
    connectionId: string
  }

  export type SpecialDayUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SpecialDayUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedById?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type GoalCreateInput = {
    id?: string
    title: string
    description?: string | null
    isCompleted?: boolean
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutGoalsInput
    connection: ConnectionCreateNestedOneWithoutGoalsInput
  }

  export type GoalUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    isCompleted?: boolean
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    connectionId: string
  }

  export type GoalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutGoalsNestedInput
    connection?: ConnectionUpdateOneRequiredWithoutGoalsNestedInput
  }

  export type GoalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type GoalCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    isCompleted?: boolean
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    connectionId: string
  }

  export type GoalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type DreamCreateInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    linkUrl?: string | null
    category?: $Enums.DreamCategory
    position?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDreamsInput
    connection: ConnectionCreateNestedOneWithoutDreamsInput
    comments?: DreamCommentCreateNestedManyWithoutDreamInput
  }

  export type DreamUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    linkUrl?: string | null
    category?: $Enums.DreamCategory
    position?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    connectionId: string
    comments?: DreamCommentUncheckedCreateNestedManyWithoutDreamInput
  }

  export type DreamUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumDreamCategoryFieldUpdateOperationsInput | $Enums.DreamCategory
    position?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDreamsNestedInput
    connection?: ConnectionUpdateOneRequiredWithoutDreamsNestedInput
    comments?: DreamCommentUpdateManyWithoutDreamNestedInput
  }

  export type DreamUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumDreamCategoryFieldUpdateOperationsInput | $Enums.DreamCategory
    position?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
    comments?: DreamCommentUncheckedUpdateManyWithoutDreamNestedInput
  }

  export type DreamCreateManyInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    linkUrl?: string | null
    category?: $Enums.DreamCategory
    position?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    connectionId: string
  }

  export type DreamUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumDreamCategoryFieldUpdateOperationsInput | $Enums.DreamCategory
    position?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DreamUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumDreamCategoryFieldUpdateOperationsInput | $Enums.DreamCategory
    position?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type DreamCommentCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dream: DreamCreateNestedOneWithoutCommentsInput
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type DreamCommentUncheckedCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dreamId: string
    userId: string
  }

  export type DreamCommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dream?: DreamUpdateOneRequiredWithoutCommentsNestedInput
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type DreamCommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dreamId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DreamCommentCreateManyInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dreamId: string
    userId: string
  }

  export type DreamCommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DreamCommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dreamId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SurpriseCreateInput = {
    id?: string
    imageUrl: string
    message?: string | null
    createdAt?: Date | string
    isSeenByAuthor?: boolean
    isSeenByPartner?: boolean
    user: UserCreateNestedOneWithoutSurprisesInput
    connection: ConnectionCreateNestedOneWithoutSurprisesInput
  }

  export type SurpriseUncheckedCreateInput = {
    id?: string
    imageUrl: string
    message?: string | null
    createdAt?: Date | string
    isSeenByAuthor?: boolean
    isSeenByPartner?: boolean
    userId: string
    connectionId: string
  }

  export type SurpriseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSeenByAuthor?: BoolFieldUpdateOperationsInput | boolean
    isSeenByPartner?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutSurprisesNestedInput
    connection?: ConnectionUpdateOneRequiredWithoutSurprisesNestedInput
  }

  export type SurpriseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSeenByAuthor?: BoolFieldUpdateOperationsInput | boolean
    isSeenByPartner?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type SurpriseCreateManyInput = {
    id?: string
    imageUrl: string
    message?: string | null
    createdAt?: Date | string
    isSeenByAuthor?: boolean
    isSeenByPartner?: boolean
    userId: string
    connectionId: string
  }

  export type SurpriseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSeenByAuthor?: BoolFieldUpdateOperationsInput | boolean
    isSeenByPartner?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SurpriseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSeenByAuthor?: BoolFieldUpdateOperationsInput | boolean
    isSeenByPartner?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type TimeCapsuleCreateInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    openDate: Date | string
    isOpened?: boolean
    openedAt?: Date | string | null
    user: UserCreateNestedOneWithoutTimeCapsulesInput
    connection: ConnectionCreateNestedOneWithoutTimeCapsulesInput
    comments?: TimeCapsuleCommentCreateNestedManyWithoutTimeCapsuleInput
  }

  export type TimeCapsuleUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    openDate: Date | string
    isOpened?: boolean
    openedAt?: Date | string | null
    userId: string
    connectionId: string
    comments?: TimeCapsuleCommentUncheckedCreateNestedManyWithoutTimeCapsuleInput
  }

  export type TimeCapsuleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutTimeCapsulesNestedInput
    connection?: ConnectionUpdateOneRequiredWithoutTimeCapsulesNestedInput
    comments?: TimeCapsuleCommentUpdateManyWithoutTimeCapsuleNestedInput
  }

  export type TimeCapsuleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
    comments?: TimeCapsuleCommentUncheckedUpdateManyWithoutTimeCapsuleNestedInput
  }

  export type TimeCapsuleCreateManyInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    openDate: Date | string
    isOpened?: boolean
    openedAt?: Date | string | null
    userId: string
    connectionId: string
  }

  export type TimeCapsuleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TimeCapsuleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type TimeCapsuleCommentCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    timeCapsule: TimeCapsuleCreateNestedOneWithoutCommentsInput
    user: UserCreateNestedOneWithoutTimeCapsuleCommentsInput
  }

  export type TimeCapsuleCommentUncheckedCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    timeCapsuleId: string
    userId: string
  }

  export type TimeCapsuleCommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeCapsule?: TimeCapsuleUpdateOneRequiredWithoutCommentsNestedInput
    user?: UserUpdateOneRequiredWithoutTimeCapsuleCommentsNestedInput
  }

  export type TimeCapsuleCommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeCapsuleId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TimeCapsuleCommentCreateManyInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    timeCapsuleId: string
    userId: string
  }

  export type TimeCapsuleCommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimeCapsuleCommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeCapsuleId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ChatMessageCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isRead?: boolean
    user: UserCreateNestedOneWithoutChatMessagesInput
    connection: ConnectionCreateNestedOneWithoutChatMessagesInput
  }

  export type ChatMessageUncheckedCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isRead?: boolean
    userId: string
    connectionId: string
  }

  export type ChatMessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutChatMessagesNestedInput
    connection?: ConnectionUpdateOneRequiredWithoutChatMessagesNestedInput
  }

  export type ChatMessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type ChatMessageCreateManyInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isRead?: boolean
    userId: string
    connectionId: string
  }

  export type ChatMessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChatMessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type ConnectionListRelationFilter = {
    every?: ConnectionWhereInput
    some?: ConnectionWhereInput
    none?: ConnectionWhereInput
  }

  export type MemoryListRelationFilter = {
    every?: MemoryWhereInput
    some?: MemoryWhereInput
    none?: MemoryWhereInput
  }

  export type NoteListRelationFilter = {
    every?: NoteWhereInput
    some?: NoteWhereInput
    none?: NoteWhereInput
  }

  export type SpecialDayListRelationFilter = {
    every?: SpecialDayWhereInput
    some?: SpecialDayWhereInput
    none?: SpecialDayWhereInput
  }

  export type GoalListRelationFilter = {
    every?: GoalWhereInput
    some?: GoalWhereInput
    none?: GoalWhereInput
  }

  export type DreamListRelationFilter = {
    every?: DreamWhereInput
    some?: DreamWhereInput
    none?: DreamWhereInput
  }

  export type DreamCommentListRelationFilter = {
    every?: DreamCommentWhereInput
    some?: DreamCommentWhereInput
    none?: DreamCommentWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type SurpriseListRelationFilter = {
    every?: SurpriseWhereInput
    some?: SurpriseWhereInput
    none?: SurpriseWhereInput
  }

  export type TimeCapsuleListRelationFilter = {
    every?: TimeCapsuleWhereInput
    some?: TimeCapsuleWhereInput
    none?: TimeCapsuleWhereInput
  }

  export type TimeCapsuleCommentListRelationFilter = {
    every?: TimeCapsuleCommentWhereInput
    some?: TimeCapsuleCommentWhereInput
    none?: TimeCapsuleCommentWhereInput
  }

  export type ChatMessageListRelationFilter = {
    every?: ChatMessageWhereInput
    some?: ChatMessageWhereInput
    none?: ChatMessageWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ConnectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MemoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SpecialDayOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GoalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DreamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DreamCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SurpriseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TimeCapsuleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TimeCapsuleCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    image?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    fcmToken?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    image?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    fcmToken?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    image?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    fcmToken?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    body?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    sentAt?: SortOrder
    userId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    body?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    sentAt?: SortOrder
    userId?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    body?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    sentAt?: SortOrder
    userId?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type TreeNullableRelationFilter = {
    is?: TreeWhereInput | null
    isNot?: TreeWhereInput | null
  }

  export type ConnectionCountOrderByAggregateInput = {
    id?: SortOrder
    connectionCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    pairedWithId?: SortOrder
  }

  export type ConnectionMaxOrderByAggregateInput = {
    id?: SortOrder
    connectionCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    pairedWithId?: SortOrder
  }

  export type ConnectionMinOrderByAggregateInput = {
    id?: SortOrder
    connectionCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    pairedWithId?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ConnectionRelationFilter = {
    is?: ConnectionWhereInput
    isNot?: ConnectionWhereInput
  }

  export type TreeCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    growthLevel?: SortOrder
    lastWatered?: SortOrder
    growthXP?: SortOrder
    connectionId?: SortOrder
  }

  export type TreeAvgOrderByAggregateInput = {
    growthLevel?: SortOrder
    growthXP?: SortOrder
  }

  export type TreeMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    growthLevel?: SortOrder
    lastWatered?: SortOrder
    growthXP?: SortOrder
    connectionId?: SortOrder
  }

  export type TreeMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    growthLevel?: SortOrder
    lastWatered?: SortOrder
    growthXP?: SortOrder
    connectionId?: SortOrder
  }

  export type TreeSumOrderByAggregateInput = {
    growthLevel?: SortOrder
    growthXP?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type MemoryCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
  }

  export type MemoryMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
  }

  export type MemoryMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NoteCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isTemporary?: SortOrder
    expiresAt?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    connectionId?: SortOrder
  }

  export type NoteAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type NoteMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isTemporary?: SortOrder
    expiresAt?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    connectionId?: SortOrder
  }

  export type NoteMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isTemporary?: SortOrder
    expiresAt?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    connectionId?: SortOrder
  }

  export type NoteSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SpecialDayCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    isRecurring?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isConfirmed?: SortOrder
    confirmedAt?: SortOrder
    confirmedById?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
  }

  export type SpecialDayMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    isRecurring?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isConfirmed?: SortOrder
    confirmedAt?: SortOrder
    confirmedById?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
  }

  export type SpecialDayMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    isRecurring?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isConfirmed?: SortOrder
    confirmedAt?: SortOrder
    confirmedById?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
  }

  export type GoalCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    isCompleted?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
  }

  export type GoalMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    isCompleted?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
  }

  export type GoalMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    isCompleted?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
  }

  export type EnumDreamCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.DreamCategory | EnumDreamCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.DreamCategory[] | ListEnumDreamCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.DreamCategory[] | ListEnumDreamCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumDreamCategoryFilter<$PrismaModel> | $Enums.DreamCategory
  }

  export type DreamCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    linkUrl?: SortOrder
    category?: SortOrder
    position?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
  }

  export type DreamAvgOrderByAggregateInput = {
    position?: SortOrder
  }

  export type DreamMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    linkUrl?: SortOrder
    category?: SortOrder
    position?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
  }

  export type DreamMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    linkUrl?: SortOrder
    category?: SortOrder
    position?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
  }

  export type DreamSumOrderByAggregateInput = {
    position?: SortOrder
  }

  export type EnumDreamCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DreamCategory | EnumDreamCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.DreamCategory[] | ListEnumDreamCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.DreamCategory[] | ListEnumDreamCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumDreamCategoryWithAggregatesFilter<$PrismaModel> | $Enums.DreamCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDreamCategoryFilter<$PrismaModel>
    _max?: NestedEnumDreamCategoryFilter<$PrismaModel>
  }

  export type DreamRelationFilter = {
    is?: DreamWhereInput
    isNot?: DreamWhereInput
  }

  export type DreamCommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dreamId?: SortOrder
    userId?: SortOrder
  }

  export type DreamCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dreamId?: SortOrder
    userId?: SortOrder
  }

  export type DreamCommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dreamId?: SortOrder
    userId?: SortOrder
  }

  export type SurpriseCountOrderByAggregateInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    isSeenByAuthor?: SortOrder
    isSeenByPartner?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
  }

  export type SurpriseMaxOrderByAggregateInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    isSeenByAuthor?: SortOrder
    isSeenByPartner?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
  }

  export type SurpriseMinOrderByAggregateInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    isSeenByAuthor?: SortOrder
    isSeenByPartner?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
  }

  export type TimeCapsuleCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    openDate?: SortOrder
    isOpened?: SortOrder
    openedAt?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
  }

  export type TimeCapsuleMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    openDate?: SortOrder
    isOpened?: SortOrder
    openedAt?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
  }

  export type TimeCapsuleMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    openDate?: SortOrder
    isOpened?: SortOrder
    openedAt?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
  }

  export type TimeCapsuleRelationFilter = {
    is?: TimeCapsuleWhereInput
    isNot?: TimeCapsuleWhereInput
  }

  export type TimeCapsuleCommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    timeCapsuleId?: SortOrder
    userId?: SortOrder
  }

  export type TimeCapsuleCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    timeCapsuleId?: SortOrder
    userId?: SortOrder
  }

  export type TimeCapsuleCommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    timeCapsuleId?: SortOrder
    userId?: SortOrder
  }

  export type ChatMessageCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
  }

  export type ChatMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
  }

  export type ChatMessageMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    connectionId?: SortOrder
  }

  export type ConnectionCreateNestedManyWithoutUserInput = {
    create?: XOR<ConnectionCreateWithoutUserInput, ConnectionUncheckedCreateWithoutUserInput> | ConnectionCreateWithoutUserInput[] | ConnectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutUserInput | ConnectionCreateOrConnectWithoutUserInput[]
    createMany?: ConnectionCreateManyUserInputEnvelope
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
  }

  export type ConnectionCreateNestedManyWithoutPairedWithInput = {
    create?: XOR<ConnectionCreateWithoutPairedWithInput, ConnectionUncheckedCreateWithoutPairedWithInput> | ConnectionCreateWithoutPairedWithInput[] | ConnectionUncheckedCreateWithoutPairedWithInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutPairedWithInput | ConnectionCreateOrConnectWithoutPairedWithInput[]
    createMany?: ConnectionCreateManyPairedWithInputEnvelope
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
  }

  export type MemoryCreateNestedManyWithoutUserInput = {
    create?: XOR<MemoryCreateWithoutUserInput, MemoryUncheckedCreateWithoutUserInput> | MemoryCreateWithoutUserInput[] | MemoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemoryCreateOrConnectWithoutUserInput | MemoryCreateOrConnectWithoutUserInput[]
    createMany?: MemoryCreateManyUserInputEnvelope
    connect?: MemoryWhereUniqueInput | MemoryWhereUniqueInput[]
  }

  export type NoteCreateNestedManyWithoutAuthorInput = {
    create?: XOR<NoteCreateWithoutAuthorInput, NoteUncheckedCreateWithoutAuthorInput> | NoteCreateWithoutAuthorInput[] | NoteUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutAuthorInput | NoteCreateOrConnectWithoutAuthorInput[]
    createMany?: NoteCreateManyAuthorInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type SpecialDayCreateNestedManyWithoutUserInput = {
    create?: XOR<SpecialDayCreateWithoutUserInput, SpecialDayUncheckedCreateWithoutUserInput> | SpecialDayCreateWithoutUserInput[] | SpecialDayUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SpecialDayCreateOrConnectWithoutUserInput | SpecialDayCreateOrConnectWithoutUserInput[]
    createMany?: SpecialDayCreateManyUserInputEnvelope
    connect?: SpecialDayWhereUniqueInput | SpecialDayWhereUniqueInput[]
  }

  export type GoalCreateNestedManyWithoutUserInput = {
    create?: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput> | GoalCreateWithoutUserInput[] | GoalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutUserInput | GoalCreateOrConnectWithoutUserInput[]
    createMany?: GoalCreateManyUserInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type DreamCreateNestedManyWithoutUserInput = {
    create?: XOR<DreamCreateWithoutUserInput, DreamUncheckedCreateWithoutUserInput> | DreamCreateWithoutUserInput[] | DreamUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DreamCreateOrConnectWithoutUserInput | DreamCreateOrConnectWithoutUserInput[]
    createMany?: DreamCreateManyUserInputEnvelope
    connect?: DreamWhereUniqueInput | DreamWhereUniqueInput[]
  }

  export type DreamCommentCreateNestedManyWithoutUserInput = {
    create?: XOR<DreamCommentCreateWithoutUserInput, DreamCommentUncheckedCreateWithoutUserInput> | DreamCommentCreateWithoutUserInput[] | DreamCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DreamCommentCreateOrConnectWithoutUserInput | DreamCommentCreateOrConnectWithoutUserInput[]
    createMany?: DreamCommentCreateManyUserInputEnvelope
    connect?: DreamCommentWhereUniqueInput | DreamCommentWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type SurpriseCreateNestedManyWithoutUserInput = {
    create?: XOR<SurpriseCreateWithoutUserInput, SurpriseUncheckedCreateWithoutUserInput> | SurpriseCreateWithoutUserInput[] | SurpriseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SurpriseCreateOrConnectWithoutUserInput | SurpriseCreateOrConnectWithoutUserInput[]
    createMany?: SurpriseCreateManyUserInputEnvelope
    connect?: SurpriseWhereUniqueInput | SurpriseWhereUniqueInput[]
  }

  export type TimeCapsuleCreateNestedManyWithoutUserInput = {
    create?: XOR<TimeCapsuleCreateWithoutUserInput, TimeCapsuleUncheckedCreateWithoutUserInput> | TimeCapsuleCreateWithoutUserInput[] | TimeCapsuleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimeCapsuleCreateOrConnectWithoutUserInput | TimeCapsuleCreateOrConnectWithoutUserInput[]
    createMany?: TimeCapsuleCreateManyUserInputEnvelope
    connect?: TimeCapsuleWhereUniqueInput | TimeCapsuleWhereUniqueInput[]
  }

  export type TimeCapsuleCommentCreateNestedManyWithoutUserInput = {
    create?: XOR<TimeCapsuleCommentCreateWithoutUserInput, TimeCapsuleCommentUncheckedCreateWithoutUserInput> | TimeCapsuleCommentCreateWithoutUserInput[] | TimeCapsuleCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimeCapsuleCommentCreateOrConnectWithoutUserInput | TimeCapsuleCommentCreateOrConnectWithoutUserInput[]
    createMany?: TimeCapsuleCommentCreateManyUserInputEnvelope
    connect?: TimeCapsuleCommentWhereUniqueInput | TimeCapsuleCommentWhereUniqueInput[]
  }

  export type ChatMessageCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput> | ChatMessageCreateWithoutUserInput[] | ChatMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutUserInput | ChatMessageCreateOrConnectWithoutUserInput[]
    createMany?: ChatMessageCreateManyUserInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type ConnectionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ConnectionCreateWithoutUserInput, ConnectionUncheckedCreateWithoutUserInput> | ConnectionCreateWithoutUserInput[] | ConnectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutUserInput | ConnectionCreateOrConnectWithoutUserInput[]
    createMany?: ConnectionCreateManyUserInputEnvelope
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
  }

  export type ConnectionUncheckedCreateNestedManyWithoutPairedWithInput = {
    create?: XOR<ConnectionCreateWithoutPairedWithInput, ConnectionUncheckedCreateWithoutPairedWithInput> | ConnectionCreateWithoutPairedWithInput[] | ConnectionUncheckedCreateWithoutPairedWithInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutPairedWithInput | ConnectionCreateOrConnectWithoutPairedWithInput[]
    createMany?: ConnectionCreateManyPairedWithInputEnvelope
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
  }

  export type MemoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MemoryCreateWithoutUserInput, MemoryUncheckedCreateWithoutUserInput> | MemoryCreateWithoutUserInput[] | MemoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemoryCreateOrConnectWithoutUserInput | MemoryCreateOrConnectWithoutUserInput[]
    createMany?: MemoryCreateManyUserInputEnvelope
    connect?: MemoryWhereUniqueInput | MemoryWhereUniqueInput[]
  }

  export type NoteUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<NoteCreateWithoutAuthorInput, NoteUncheckedCreateWithoutAuthorInput> | NoteCreateWithoutAuthorInput[] | NoteUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutAuthorInput | NoteCreateOrConnectWithoutAuthorInput[]
    createMany?: NoteCreateManyAuthorInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type SpecialDayUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SpecialDayCreateWithoutUserInput, SpecialDayUncheckedCreateWithoutUserInput> | SpecialDayCreateWithoutUserInput[] | SpecialDayUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SpecialDayCreateOrConnectWithoutUserInput | SpecialDayCreateOrConnectWithoutUserInput[]
    createMany?: SpecialDayCreateManyUserInputEnvelope
    connect?: SpecialDayWhereUniqueInput | SpecialDayWhereUniqueInput[]
  }

  export type GoalUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput> | GoalCreateWithoutUserInput[] | GoalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutUserInput | GoalCreateOrConnectWithoutUserInput[]
    createMany?: GoalCreateManyUserInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type DreamUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DreamCreateWithoutUserInput, DreamUncheckedCreateWithoutUserInput> | DreamCreateWithoutUserInput[] | DreamUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DreamCreateOrConnectWithoutUserInput | DreamCreateOrConnectWithoutUserInput[]
    createMany?: DreamCreateManyUserInputEnvelope
    connect?: DreamWhereUniqueInput | DreamWhereUniqueInput[]
  }

  export type DreamCommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DreamCommentCreateWithoutUserInput, DreamCommentUncheckedCreateWithoutUserInput> | DreamCommentCreateWithoutUserInput[] | DreamCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DreamCommentCreateOrConnectWithoutUserInput | DreamCommentCreateOrConnectWithoutUserInput[]
    createMany?: DreamCommentCreateManyUserInputEnvelope
    connect?: DreamCommentWhereUniqueInput | DreamCommentWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type SurpriseUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SurpriseCreateWithoutUserInput, SurpriseUncheckedCreateWithoutUserInput> | SurpriseCreateWithoutUserInput[] | SurpriseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SurpriseCreateOrConnectWithoutUserInput | SurpriseCreateOrConnectWithoutUserInput[]
    createMany?: SurpriseCreateManyUserInputEnvelope
    connect?: SurpriseWhereUniqueInput | SurpriseWhereUniqueInput[]
  }

  export type TimeCapsuleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TimeCapsuleCreateWithoutUserInput, TimeCapsuleUncheckedCreateWithoutUserInput> | TimeCapsuleCreateWithoutUserInput[] | TimeCapsuleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimeCapsuleCreateOrConnectWithoutUserInput | TimeCapsuleCreateOrConnectWithoutUserInput[]
    createMany?: TimeCapsuleCreateManyUserInputEnvelope
    connect?: TimeCapsuleWhereUniqueInput | TimeCapsuleWhereUniqueInput[]
  }

  export type TimeCapsuleCommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TimeCapsuleCommentCreateWithoutUserInput, TimeCapsuleCommentUncheckedCreateWithoutUserInput> | TimeCapsuleCommentCreateWithoutUserInput[] | TimeCapsuleCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimeCapsuleCommentCreateOrConnectWithoutUserInput | TimeCapsuleCommentCreateOrConnectWithoutUserInput[]
    createMany?: TimeCapsuleCommentCreateManyUserInputEnvelope
    connect?: TimeCapsuleCommentWhereUniqueInput | TimeCapsuleCommentWhereUniqueInput[]
  }

  export type ChatMessageUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput> | ChatMessageCreateWithoutUserInput[] | ChatMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutUserInput | ChatMessageCreateOrConnectWithoutUserInput[]
    createMany?: ChatMessageCreateManyUserInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type ConnectionUpdateManyWithoutUserNestedInput = {
    create?: XOR<ConnectionCreateWithoutUserInput, ConnectionUncheckedCreateWithoutUserInput> | ConnectionCreateWithoutUserInput[] | ConnectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutUserInput | ConnectionCreateOrConnectWithoutUserInput[]
    upsert?: ConnectionUpsertWithWhereUniqueWithoutUserInput | ConnectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ConnectionCreateManyUserInputEnvelope
    set?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    disconnect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    delete?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    update?: ConnectionUpdateWithWhereUniqueWithoutUserInput | ConnectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ConnectionUpdateManyWithWhereWithoutUserInput | ConnectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ConnectionScalarWhereInput | ConnectionScalarWhereInput[]
  }

  export type ConnectionUpdateManyWithoutPairedWithNestedInput = {
    create?: XOR<ConnectionCreateWithoutPairedWithInput, ConnectionUncheckedCreateWithoutPairedWithInput> | ConnectionCreateWithoutPairedWithInput[] | ConnectionUncheckedCreateWithoutPairedWithInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutPairedWithInput | ConnectionCreateOrConnectWithoutPairedWithInput[]
    upsert?: ConnectionUpsertWithWhereUniqueWithoutPairedWithInput | ConnectionUpsertWithWhereUniqueWithoutPairedWithInput[]
    createMany?: ConnectionCreateManyPairedWithInputEnvelope
    set?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    disconnect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    delete?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    update?: ConnectionUpdateWithWhereUniqueWithoutPairedWithInput | ConnectionUpdateWithWhereUniqueWithoutPairedWithInput[]
    updateMany?: ConnectionUpdateManyWithWhereWithoutPairedWithInput | ConnectionUpdateManyWithWhereWithoutPairedWithInput[]
    deleteMany?: ConnectionScalarWhereInput | ConnectionScalarWhereInput[]
  }

  export type MemoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<MemoryCreateWithoutUserInput, MemoryUncheckedCreateWithoutUserInput> | MemoryCreateWithoutUserInput[] | MemoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemoryCreateOrConnectWithoutUserInput | MemoryCreateOrConnectWithoutUserInput[]
    upsert?: MemoryUpsertWithWhereUniqueWithoutUserInput | MemoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MemoryCreateManyUserInputEnvelope
    set?: MemoryWhereUniqueInput | MemoryWhereUniqueInput[]
    disconnect?: MemoryWhereUniqueInput | MemoryWhereUniqueInput[]
    delete?: MemoryWhereUniqueInput | MemoryWhereUniqueInput[]
    connect?: MemoryWhereUniqueInput | MemoryWhereUniqueInput[]
    update?: MemoryUpdateWithWhereUniqueWithoutUserInput | MemoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MemoryUpdateManyWithWhereWithoutUserInput | MemoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MemoryScalarWhereInput | MemoryScalarWhereInput[]
  }

  export type NoteUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<NoteCreateWithoutAuthorInput, NoteUncheckedCreateWithoutAuthorInput> | NoteCreateWithoutAuthorInput[] | NoteUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutAuthorInput | NoteCreateOrConnectWithoutAuthorInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutAuthorInput | NoteUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: NoteCreateManyAuthorInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutAuthorInput | NoteUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutAuthorInput | NoteUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type SpecialDayUpdateManyWithoutUserNestedInput = {
    create?: XOR<SpecialDayCreateWithoutUserInput, SpecialDayUncheckedCreateWithoutUserInput> | SpecialDayCreateWithoutUserInput[] | SpecialDayUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SpecialDayCreateOrConnectWithoutUserInput | SpecialDayCreateOrConnectWithoutUserInput[]
    upsert?: SpecialDayUpsertWithWhereUniqueWithoutUserInput | SpecialDayUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SpecialDayCreateManyUserInputEnvelope
    set?: SpecialDayWhereUniqueInput | SpecialDayWhereUniqueInput[]
    disconnect?: SpecialDayWhereUniqueInput | SpecialDayWhereUniqueInput[]
    delete?: SpecialDayWhereUniqueInput | SpecialDayWhereUniqueInput[]
    connect?: SpecialDayWhereUniqueInput | SpecialDayWhereUniqueInput[]
    update?: SpecialDayUpdateWithWhereUniqueWithoutUserInput | SpecialDayUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SpecialDayUpdateManyWithWhereWithoutUserInput | SpecialDayUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SpecialDayScalarWhereInput | SpecialDayScalarWhereInput[]
  }

  export type GoalUpdateManyWithoutUserNestedInput = {
    create?: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput> | GoalCreateWithoutUserInput[] | GoalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutUserInput | GoalCreateOrConnectWithoutUserInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutUserInput | GoalUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GoalCreateManyUserInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutUserInput | GoalUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutUserInput | GoalUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type DreamUpdateManyWithoutUserNestedInput = {
    create?: XOR<DreamCreateWithoutUserInput, DreamUncheckedCreateWithoutUserInput> | DreamCreateWithoutUserInput[] | DreamUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DreamCreateOrConnectWithoutUserInput | DreamCreateOrConnectWithoutUserInput[]
    upsert?: DreamUpsertWithWhereUniqueWithoutUserInput | DreamUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DreamCreateManyUserInputEnvelope
    set?: DreamWhereUniqueInput | DreamWhereUniqueInput[]
    disconnect?: DreamWhereUniqueInput | DreamWhereUniqueInput[]
    delete?: DreamWhereUniqueInput | DreamWhereUniqueInput[]
    connect?: DreamWhereUniqueInput | DreamWhereUniqueInput[]
    update?: DreamUpdateWithWhereUniqueWithoutUserInput | DreamUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DreamUpdateManyWithWhereWithoutUserInput | DreamUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DreamScalarWhereInput | DreamScalarWhereInput[]
  }

  export type DreamCommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<DreamCommentCreateWithoutUserInput, DreamCommentUncheckedCreateWithoutUserInput> | DreamCommentCreateWithoutUserInput[] | DreamCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DreamCommentCreateOrConnectWithoutUserInput | DreamCommentCreateOrConnectWithoutUserInput[]
    upsert?: DreamCommentUpsertWithWhereUniqueWithoutUserInput | DreamCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DreamCommentCreateManyUserInputEnvelope
    set?: DreamCommentWhereUniqueInput | DreamCommentWhereUniqueInput[]
    disconnect?: DreamCommentWhereUniqueInput | DreamCommentWhereUniqueInput[]
    delete?: DreamCommentWhereUniqueInput | DreamCommentWhereUniqueInput[]
    connect?: DreamCommentWhereUniqueInput | DreamCommentWhereUniqueInput[]
    update?: DreamCommentUpdateWithWhereUniqueWithoutUserInput | DreamCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DreamCommentUpdateManyWithWhereWithoutUserInput | DreamCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DreamCommentScalarWhereInput | DreamCommentScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type SurpriseUpdateManyWithoutUserNestedInput = {
    create?: XOR<SurpriseCreateWithoutUserInput, SurpriseUncheckedCreateWithoutUserInput> | SurpriseCreateWithoutUserInput[] | SurpriseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SurpriseCreateOrConnectWithoutUserInput | SurpriseCreateOrConnectWithoutUserInput[]
    upsert?: SurpriseUpsertWithWhereUniqueWithoutUserInput | SurpriseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SurpriseCreateManyUserInputEnvelope
    set?: SurpriseWhereUniqueInput | SurpriseWhereUniqueInput[]
    disconnect?: SurpriseWhereUniqueInput | SurpriseWhereUniqueInput[]
    delete?: SurpriseWhereUniqueInput | SurpriseWhereUniqueInput[]
    connect?: SurpriseWhereUniqueInput | SurpriseWhereUniqueInput[]
    update?: SurpriseUpdateWithWhereUniqueWithoutUserInput | SurpriseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SurpriseUpdateManyWithWhereWithoutUserInput | SurpriseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SurpriseScalarWhereInput | SurpriseScalarWhereInput[]
  }

  export type TimeCapsuleUpdateManyWithoutUserNestedInput = {
    create?: XOR<TimeCapsuleCreateWithoutUserInput, TimeCapsuleUncheckedCreateWithoutUserInput> | TimeCapsuleCreateWithoutUserInput[] | TimeCapsuleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimeCapsuleCreateOrConnectWithoutUserInput | TimeCapsuleCreateOrConnectWithoutUserInput[]
    upsert?: TimeCapsuleUpsertWithWhereUniqueWithoutUserInput | TimeCapsuleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TimeCapsuleCreateManyUserInputEnvelope
    set?: TimeCapsuleWhereUniqueInput | TimeCapsuleWhereUniqueInput[]
    disconnect?: TimeCapsuleWhereUniqueInput | TimeCapsuleWhereUniqueInput[]
    delete?: TimeCapsuleWhereUniqueInput | TimeCapsuleWhereUniqueInput[]
    connect?: TimeCapsuleWhereUniqueInput | TimeCapsuleWhereUniqueInput[]
    update?: TimeCapsuleUpdateWithWhereUniqueWithoutUserInput | TimeCapsuleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TimeCapsuleUpdateManyWithWhereWithoutUserInput | TimeCapsuleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TimeCapsuleScalarWhereInput | TimeCapsuleScalarWhereInput[]
  }

  export type TimeCapsuleCommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<TimeCapsuleCommentCreateWithoutUserInput, TimeCapsuleCommentUncheckedCreateWithoutUserInput> | TimeCapsuleCommentCreateWithoutUserInput[] | TimeCapsuleCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimeCapsuleCommentCreateOrConnectWithoutUserInput | TimeCapsuleCommentCreateOrConnectWithoutUserInput[]
    upsert?: TimeCapsuleCommentUpsertWithWhereUniqueWithoutUserInput | TimeCapsuleCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TimeCapsuleCommentCreateManyUserInputEnvelope
    set?: TimeCapsuleCommentWhereUniqueInput | TimeCapsuleCommentWhereUniqueInput[]
    disconnect?: TimeCapsuleCommentWhereUniqueInput | TimeCapsuleCommentWhereUniqueInput[]
    delete?: TimeCapsuleCommentWhereUniqueInput | TimeCapsuleCommentWhereUniqueInput[]
    connect?: TimeCapsuleCommentWhereUniqueInput | TimeCapsuleCommentWhereUniqueInput[]
    update?: TimeCapsuleCommentUpdateWithWhereUniqueWithoutUserInput | TimeCapsuleCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TimeCapsuleCommentUpdateManyWithWhereWithoutUserInput | TimeCapsuleCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TimeCapsuleCommentScalarWhereInput | TimeCapsuleCommentScalarWhereInput[]
  }

  export type ChatMessageUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput> | ChatMessageCreateWithoutUserInput[] | ChatMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutUserInput | ChatMessageCreateOrConnectWithoutUserInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutUserInput | ChatMessageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatMessageCreateManyUserInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutUserInput | ChatMessageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutUserInput | ChatMessageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type ConnectionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ConnectionCreateWithoutUserInput, ConnectionUncheckedCreateWithoutUserInput> | ConnectionCreateWithoutUserInput[] | ConnectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutUserInput | ConnectionCreateOrConnectWithoutUserInput[]
    upsert?: ConnectionUpsertWithWhereUniqueWithoutUserInput | ConnectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ConnectionCreateManyUserInputEnvelope
    set?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    disconnect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    delete?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    update?: ConnectionUpdateWithWhereUniqueWithoutUserInput | ConnectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ConnectionUpdateManyWithWhereWithoutUserInput | ConnectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ConnectionScalarWhereInput | ConnectionScalarWhereInput[]
  }

  export type ConnectionUncheckedUpdateManyWithoutPairedWithNestedInput = {
    create?: XOR<ConnectionCreateWithoutPairedWithInput, ConnectionUncheckedCreateWithoutPairedWithInput> | ConnectionCreateWithoutPairedWithInput[] | ConnectionUncheckedCreateWithoutPairedWithInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutPairedWithInput | ConnectionCreateOrConnectWithoutPairedWithInput[]
    upsert?: ConnectionUpsertWithWhereUniqueWithoutPairedWithInput | ConnectionUpsertWithWhereUniqueWithoutPairedWithInput[]
    createMany?: ConnectionCreateManyPairedWithInputEnvelope
    set?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    disconnect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    delete?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    update?: ConnectionUpdateWithWhereUniqueWithoutPairedWithInput | ConnectionUpdateWithWhereUniqueWithoutPairedWithInput[]
    updateMany?: ConnectionUpdateManyWithWhereWithoutPairedWithInput | ConnectionUpdateManyWithWhereWithoutPairedWithInput[]
    deleteMany?: ConnectionScalarWhereInput | ConnectionScalarWhereInput[]
  }

  export type MemoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MemoryCreateWithoutUserInput, MemoryUncheckedCreateWithoutUserInput> | MemoryCreateWithoutUserInput[] | MemoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemoryCreateOrConnectWithoutUserInput | MemoryCreateOrConnectWithoutUserInput[]
    upsert?: MemoryUpsertWithWhereUniqueWithoutUserInput | MemoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MemoryCreateManyUserInputEnvelope
    set?: MemoryWhereUniqueInput | MemoryWhereUniqueInput[]
    disconnect?: MemoryWhereUniqueInput | MemoryWhereUniqueInput[]
    delete?: MemoryWhereUniqueInput | MemoryWhereUniqueInput[]
    connect?: MemoryWhereUniqueInput | MemoryWhereUniqueInput[]
    update?: MemoryUpdateWithWhereUniqueWithoutUserInput | MemoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MemoryUpdateManyWithWhereWithoutUserInput | MemoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MemoryScalarWhereInput | MemoryScalarWhereInput[]
  }

  export type NoteUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<NoteCreateWithoutAuthorInput, NoteUncheckedCreateWithoutAuthorInput> | NoteCreateWithoutAuthorInput[] | NoteUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutAuthorInput | NoteCreateOrConnectWithoutAuthorInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutAuthorInput | NoteUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: NoteCreateManyAuthorInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutAuthorInput | NoteUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutAuthorInput | NoteUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type SpecialDayUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SpecialDayCreateWithoutUserInput, SpecialDayUncheckedCreateWithoutUserInput> | SpecialDayCreateWithoutUserInput[] | SpecialDayUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SpecialDayCreateOrConnectWithoutUserInput | SpecialDayCreateOrConnectWithoutUserInput[]
    upsert?: SpecialDayUpsertWithWhereUniqueWithoutUserInput | SpecialDayUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SpecialDayCreateManyUserInputEnvelope
    set?: SpecialDayWhereUniqueInput | SpecialDayWhereUniqueInput[]
    disconnect?: SpecialDayWhereUniqueInput | SpecialDayWhereUniqueInput[]
    delete?: SpecialDayWhereUniqueInput | SpecialDayWhereUniqueInput[]
    connect?: SpecialDayWhereUniqueInput | SpecialDayWhereUniqueInput[]
    update?: SpecialDayUpdateWithWhereUniqueWithoutUserInput | SpecialDayUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SpecialDayUpdateManyWithWhereWithoutUserInput | SpecialDayUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SpecialDayScalarWhereInput | SpecialDayScalarWhereInput[]
  }

  export type GoalUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput> | GoalCreateWithoutUserInput[] | GoalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutUserInput | GoalCreateOrConnectWithoutUserInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutUserInput | GoalUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GoalCreateManyUserInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutUserInput | GoalUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutUserInput | GoalUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type DreamUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DreamCreateWithoutUserInput, DreamUncheckedCreateWithoutUserInput> | DreamCreateWithoutUserInput[] | DreamUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DreamCreateOrConnectWithoutUserInput | DreamCreateOrConnectWithoutUserInput[]
    upsert?: DreamUpsertWithWhereUniqueWithoutUserInput | DreamUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DreamCreateManyUserInputEnvelope
    set?: DreamWhereUniqueInput | DreamWhereUniqueInput[]
    disconnect?: DreamWhereUniqueInput | DreamWhereUniqueInput[]
    delete?: DreamWhereUniqueInput | DreamWhereUniqueInput[]
    connect?: DreamWhereUniqueInput | DreamWhereUniqueInput[]
    update?: DreamUpdateWithWhereUniqueWithoutUserInput | DreamUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DreamUpdateManyWithWhereWithoutUserInput | DreamUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DreamScalarWhereInput | DreamScalarWhereInput[]
  }

  export type DreamCommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DreamCommentCreateWithoutUserInput, DreamCommentUncheckedCreateWithoutUserInput> | DreamCommentCreateWithoutUserInput[] | DreamCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DreamCommentCreateOrConnectWithoutUserInput | DreamCommentCreateOrConnectWithoutUserInput[]
    upsert?: DreamCommentUpsertWithWhereUniqueWithoutUserInput | DreamCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DreamCommentCreateManyUserInputEnvelope
    set?: DreamCommentWhereUniqueInput | DreamCommentWhereUniqueInput[]
    disconnect?: DreamCommentWhereUniqueInput | DreamCommentWhereUniqueInput[]
    delete?: DreamCommentWhereUniqueInput | DreamCommentWhereUniqueInput[]
    connect?: DreamCommentWhereUniqueInput | DreamCommentWhereUniqueInput[]
    update?: DreamCommentUpdateWithWhereUniqueWithoutUserInput | DreamCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DreamCommentUpdateManyWithWhereWithoutUserInput | DreamCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DreamCommentScalarWhereInput | DreamCommentScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type SurpriseUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SurpriseCreateWithoutUserInput, SurpriseUncheckedCreateWithoutUserInput> | SurpriseCreateWithoutUserInput[] | SurpriseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SurpriseCreateOrConnectWithoutUserInput | SurpriseCreateOrConnectWithoutUserInput[]
    upsert?: SurpriseUpsertWithWhereUniqueWithoutUserInput | SurpriseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SurpriseCreateManyUserInputEnvelope
    set?: SurpriseWhereUniqueInput | SurpriseWhereUniqueInput[]
    disconnect?: SurpriseWhereUniqueInput | SurpriseWhereUniqueInput[]
    delete?: SurpriseWhereUniqueInput | SurpriseWhereUniqueInput[]
    connect?: SurpriseWhereUniqueInput | SurpriseWhereUniqueInput[]
    update?: SurpriseUpdateWithWhereUniqueWithoutUserInput | SurpriseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SurpriseUpdateManyWithWhereWithoutUserInput | SurpriseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SurpriseScalarWhereInput | SurpriseScalarWhereInput[]
  }

  export type TimeCapsuleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TimeCapsuleCreateWithoutUserInput, TimeCapsuleUncheckedCreateWithoutUserInput> | TimeCapsuleCreateWithoutUserInput[] | TimeCapsuleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimeCapsuleCreateOrConnectWithoutUserInput | TimeCapsuleCreateOrConnectWithoutUserInput[]
    upsert?: TimeCapsuleUpsertWithWhereUniqueWithoutUserInput | TimeCapsuleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TimeCapsuleCreateManyUserInputEnvelope
    set?: TimeCapsuleWhereUniqueInput | TimeCapsuleWhereUniqueInput[]
    disconnect?: TimeCapsuleWhereUniqueInput | TimeCapsuleWhereUniqueInput[]
    delete?: TimeCapsuleWhereUniqueInput | TimeCapsuleWhereUniqueInput[]
    connect?: TimeCapsuleWhereUniqueInput | TimeCapsuleWhereUniqueInput[]
    update?: TimeCapsuleUpdateWithWhereUniqueWithoutUserInput | TimeCapsuleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TimeCapsuleUpdateManyWithWhereWithoutUserInput | TimeCapsuleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TimeCapsuleScalarWhereInput | TimeCapsuleScalarWhereInput[]
  }

  export type TimeCapsuleCommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TimeCapsuleCommentCreateWithoutUserInput, TimeCapsuleCommentUncheckedCreateWithoutUserInput> | TimeCapsuleCommentCreateWithoutUserInput[] | TimeCapsuleCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimeCapsuleCommentCreateOrConnectWithoutUserInput | TimeCapsuleCommentCreateOrConnectWithoutUserInput[]
    upsert?: TimeCapsuleCommentUpsertWithWhereUniqueWithoutUserInput | TimeCapsuleCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TimeCapsuleCommentCreateManyUserInputEnvelope
    set?: TimeCapsuleCommentWhereUniqueInput | TimeCapsuleCommentWhereUniqueInput[]
    disconnect?: TimeCapsuleCommentWhereUniqueInput | TimeCapsuleCommentWhereUniqueInput[]
    delete?: TimeCapsuleCommentWhereUniqueInput | TimeCapsuleCommentWhereUniqueInput[]
    connect?: TimeCapsuleCommentWhereUniqueInput | TimeCapsuleCommentWhereUniqueInput[]
    update?: TimeCapsuleCommentUpdateWithWhereUniqueWithoutUserInput | TimeCapsuleCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TimeCapsuleCommentUpdateManyWithWhereWithoutUserInput | TimeCapsuleCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TimeCapsuleCommentScalarWhereInput | TimeCapsuleCommentScalarWhereInput[]
  }

  export type ChatMessageUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput> | ChatMessageCreateWithoutUserInput[] | ChatMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutUserInput | ChatMessageCreateOrConnectWithoutUserInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutUserInput | ChatMessageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatMessageCreateManyUserInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutUserInput | ChatMessageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutUserInput | ChatMessageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutReceivedNotificationsInput = {
    create?: XOR<UserCreateWithoutReceivedNotificationsInput, UserUncheckedCreateWithoutReceivedNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutReceivedNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutReceivedNotificationsInput, UserUncheckedCreateWithoutReceivedNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedNotificationsInput
    upsert?: UserUpsertWithoutReceivedNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedNotificationsInput, UserUpdateWithoutReceivedNotificationsInput>, UserUncheckedUpdateWithoutReceivedNotificationsInput>
  }

  export type UserCreateNestedOneWithoutConnectionsInput = {
    create?: XOR<UserCreateWithoutConnectionsInput, UserUncheckedCreateWithoutConnectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutConnectionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPairedWithInput = {
    create?: XOR<UserCreateWithoutPairedWithInput, UserUncheckedCreateWithoutPairedWithInput>
    connectOrCreate?: UserCreateOrConnectWithoutPairedWithInput
    connect?: UserWhereUniqueInput
  }

  export type MemoryCreateNestedManyWithoutConnectionInput = {
    create?: XOR<MemoryCreateWithoutConnectionInput, MemoryUncheckedCreateWithoutConnectionInput> | MemoryCreateWithoutConnectionInput[] | MemoryUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: MemoryCreateOrConnectWithoutConnectionInput | MemoryCreateOrConnectWithoutConnectionInput[]
    createMany?: MemoryCreateManyConnectionInputEnvelope
    connect?: MemoryWhereUniqueInput | MemoryWhereUniqueInput[]
  }

  export type NoteCreateNestedManyWithoutConnectionInput = {
    create?: XOR<NoteCreateWithoutConnectionInput, NoteUncheckedCreateWithoutConnectionInput> | NoteCreateWithoutConnectionInput[] | NoteUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutConnectionInput | NoteCreateOrConnectWithoutConnectionInput[]
    createMany?: NoteCreateManyConnectionInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type SpecialDayCreateNestedManyWithoutConnectionInput = {
    create?: XOR<SpecialDayCreateWithoutConnectionInput, SpecialDayUncheckedCreateWithoutConnectionInput> | SpecialDayCreateWithoutConnectionInput[] | SpecialDayUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: SpecialDayCreateOrConnectWithoutConnectionInput | SpecialDayCreateOrConnectWithoutConnectionInput[]
    createMany?: SpecialDayCreateManyConnectionInputEnvelope
    connect?: SpecialDayWhereUniqueInput | SpecialDayWhereUniqueInput[]
  }

  export type GoalCreateNestedManyWithoutConnectionInput = {
    create?: XOR<GoalCreateWithoutConnectionInput, GoalUncheckedCreateWithoutConnectionInput> | GoalCreateWithoutConnectionInput[] | GoalUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutConnectionInput | GoalCreateOrConnectWithoutConnectionInput[]
    createMany?: GoalCreateManyConnectionInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type DreamCreateNestedManyWithoutConnectionInput = {
    create?: XOR<DreamCreateWithoutConnectionInput, DreamUncheckedCreateWithoutConnectionInput> | DreamCreateWithoutConnectionInput[] | DreamUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: DreamCreateOrConnectWithoutConnectionInput | DreamCreateOrConnectWithoutConnectionInput[]
    createMany?: DreamCreateManyConnectionInputEnvelope
    connect?: DreamWhereUniqueInput | DreamWhereUniqueInput[]
  }

  export type TreeCreateNestedOneWithoutConnectionInput = {
    create?: XOR<TreeCreateWithoutConnectionInput, TreeUncheckedCreateWithoutConnectionInput>
    connectOrCreate?: TreeCreateOrConnectWithoutConnectionInput
    connect?: TreeWhereUniqueInput
  }

  export type SurpriseCreateNestedManyWithoutConnectionInput = {
    create?: XOR<SurpriseCreateWithoutConnectionInput, SurpriseUncheckedCreateWithoutConnectionInput> | SurpriseCreateWithoutConnectionInput[] | SurpriseUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: SurpriseCreateOrConnectWithoutConnectionInput | SurpriseCreateOrConnectWithoutConnectionInput[]
    createMany?: SurpriseCreateManyConnectionInputEnvelope
    connect?: SurpriseWhereUniqueInput | SurpriseWhereUniqueInput[]
  }

  export type TimeCapsuleCreateNestedManyWithoutConnectionInput = {
    create?: XOR<TimeCapsuleCreateWithoutConnectionInput, TimeCapsuleUncheckedCreateWithoutConnectionInput> | TimeCapsuleCreateWithoutConnectionInput[] | TimeCapsuleUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: TimeCapsuleCreateOrConnectWithoutConnectionInput | TimeCapsuleCreateOrConnectWithoutConnectionInput[]
    createMany?: TimeCapsuleCreateManyConnectionInputEnvelope
    connect?: TimeCapsuleWhereUniqueInput | TimeCapsuleWhereUniqueInput[]
  }

  export type ChatMessageCreateNestedManyWithoutConnectionInput = {
    create?: XOR<ChatMessageCreateWithoutConnectionInput, ChatMessageUncheckedCreateWithoutConnectionInput> | ChatMessageCreateWithoutConnectionInput[] | ChatMessageUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutConnectionInput | ChatMessageCreateOrConnectWithoutConnectionInput[]
    createMany?: ChatMessageCreateManyConnectionInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type MemoryUncheckedCreateNestedManyWithoutConnectionInput = {
    create?: XOR<MemoryCreateWithoutConnectionInput, MemoryUncheckedCreateWithoutConnectionInput> | MemoryCreateWithoutConnectionInput[] | MemoryUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: MemoryCreateOrConnectWithoutConnectionInput | MemoryCreateOrConnectWithoutConnectionInput[]
    createMany?: MemoryCreateManyConnectionInputEnvelope
    connect?: MemoryWhereUniqueInput | MemoryWhereUniqueInput[]
  }

  export type NoteUncheckedCreateNestedManyWithoutConnectionInput = {
    create?: XOR<NoteCreateWithoutConnectionInput, NoteUncheckedCreateWithoutConnectionInput> | NoteCreateWithoutConnectionInput[] | NoteUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutConnectionInput | NoteCreateOrConnectWithoutConnectionInput[]
    createMany?: NoteCreateManyConnectionInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type SpecialDayUncheckedCreateNestedManyWithoutConnectionInput = {
    create?: XOR<SpecialDayCreateWithoutConnectionInput, SpecialDayUncheckedCreateWithoutConnectionInput> | SpecialDayCreateWithoutConnectionInput[] | SpecialDayUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: SpecialDayCreateOrConnectWithoutConnectionInput | SpecialDayCreateOrConnectWithoutConnectionInput[]
    createMany?: SpecialDayCreateManyConnectionInputEnvelope
    connect?: SpecialDayWhereUniqueInput | SpecialDayWhereUniqueInput[]
  }

  export type GoalUncheckedCreateNestedManyWithoutConnectionInput = {
    create?: XOR<GoalCreateWithoutConnectionInput, GoalUncheckedCreateWithoutConnectionInput> | GoalCreateWithoutConnectionInput[] | GoalUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutConnectionInput | GoalCreateOrConnectWithoutConnectionInput[]
    createMany?: GoalCreateManyConnectionInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type DreamUncheckedCreateNestedManyWithoutConnectionInput = {
    create?: XOR<DreamCreateWithoutConnectionInput, DreamUncheckedCreateWithoutConnectionInput> | DreamCreateWithoutConnectionInput[] | DreamUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: DreamCreateOrConnectWithoutConnectionInput | DreamCreateOrConnectWithoutConnectionInput[]
    createMany?: DreamCreateManyConnectionInputEnvelope
    connect?: DreamWhereUniqueInput | DreamWhereUniqueInput[]
  }

  export type TreeUncheckedCreateNestedOneWithoutConnectionInput = {
    create?: XOR<TreeCreateWithoutConnectionInput, TreeUncheckedCreateWithoutConnectionInput>
    connectOrCreate?: TreeCreateOrConnectWithoutConnectionInput
    connect?: TreeWhereUniqueInput
  }

  export type SurpriseUncheckedCreateNestedManyWithoutConnectionInput = {
    create?: XOR<SurpriseCreateWithoutConnectionInput, SurpriseUncheckedCreateWithoutConnectionInput> | SurpriseCreateWithoutConnectionInput[] | SurpriseUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: SurpriseCreateOrConnectWithoutConnectionInput | SurpriseCreateOrConnectWithoutConnectionInput[]
    createMany?: SurpriseCreateManyConnectionInputEnvelope
    connect?: SurpriseWhereUniqueInput | SurpriseWhereUniqueInput[]
  }

  export type TimeCapsuleUncheckedCreateNestedManyWithoutConnectionInput = {
    create?: XOR<TimeCapsuleCreateWithoutConnectionInput, TimeCapsuleUncheckedCreateWithoutConnectionInput> | TimeCapsuleCreateWithoutConnectionInput[] | TimeCapsuleUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: TimeCapsuleCreateOrConnectWithoutConnectionInput | TimeCapsuleCreateOrConnectWithoutConnectionInput[]
    createMany?: TimeCapsuleCreateManyConnectionInputEnvelope
    connect?: TimeCapsuleWhereUniqueInput | TimeCapsuleWhereUniqueInput[]
  }

  export type ChatMessageUncheckedCreateNestedManyWithoutConnectionInput = {
    create?: XOR<ChatMessageCreateWithoutConnectionInput, ChatMessageUncheckedCreateWithoutConnectionInput> | ChatMessageCreateWithoutConnectionInput[] | ChatMessageUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutConnectionInput | ChatMessageCreateOrConnectWithoutConnectionInput[]
    createMany?: ChatMessageCreateManyConnectionInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutConnectionsNestedInput = {
    create?: XOR<UserCreateWithoutConnectionsInput, UserUncheckedCreateWithoutConnectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutConnectionsInput
    upsert?: UserUpsertWithoutConnectionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutConnectionsInput, UserUpdateWithoutConnectionsInput>, UserUncheckedUpdateWithoutConnectionsInput>
  }

  export type UserUpdateOneWithoutPairedWithNestedInput = {
    create?: XOR<UserCreateWithoutPairedWithInput, UserUncheckedCreateWithoutPairedWithInput>
    connectOrCreate?: UserCreateOrConnectWithoutPairedWithInput
    upsert?: UserUpsertWithoutPairedWithInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPairedWithInput, UserUpdateWithoutPairedWithInput>, UserUncheckedUpdateWithoutPairedWithInput>
  }

  export type MemoryUpdateManyWithoutConnectionNestedInput = {
    create?: XOR<MemoryCreateWithoutConnectionInput, MemoryUncheckedCreateWithoutConnectionInput> | MemoryCreateWithoutConnectionInput[] | MemoryUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: MemoryCreateOrConnectWithoutConnectionInput | MemoryCreateOrConnectWithoutConnectionInput[]
    upsert?: MemoryUpsertWithWhereUniqueWithoutConnectionInput | MemoryUpsertWithWhereUniqueWithoutConnectionInput[]
    createMany?: MemoryCreateManyConnectionInputEnvelope
    set?: MemoryWhereUniqueInput | MemoryWhereUniqueInput[]
    disconnect?: MemoryWhereUniqueInput | MemoryWhereUniqueInput[]
    delete?: MemoryWhereUniqueInput | MemoryWhereUniqueInput[]
    connect?: MemoryWhereUniqueInput | MemoryWhereUniqueInput[]
    update?: MemoryUpdateWithWhereUniqueWithoutConnectionInput | MemoryUpdateWithWhereUniqueWithoutConnectionInput[]
    updateMany?: MemoryUpdateManyWithWhereWithoutConnectionInput | MemoryUpdateManyWithWhereWithoutConnectionInput[]
    deleteMany?: MemoryScalarWhereInput | MemoryScalarWhereInput[]
  }

  export type NoteUpdateManyWithoutConnectionNestedInput = {
    create?: XOR<NoteCreateWithoutConnectionInput, NoteUncheckedCreateWithoutConnectionInput> | NoteCreateWithoutConnectionInput[] | NoteUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutConnectionInput | NoteCreateOrConnectWithoutConnectionInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutConnectionInput | NoteUpsertWithWhereUniqueWithoutConnectionInput[]
    createMany?: NoteCreateManyConnectionInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutConnectionInput | NoteUpdateWithWhereUniqueWithoutConnectionInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutConnectionInput | NoteUpdateManyWithWhereWithoutConnectionInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type SpecialDayUpdateManyWithoutConnectionNestedInput = {
    create?: XOR<SpecialDayCreateWithoutConnectionInput, SpecialDayUncheckedCreateWithoutConnectionInput> | SpecialDayCreateWithoutConnectionInput[] | SpecialDayUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: SpecialDayCreateOrConnectWithoutConnectionInput | SpecialDayCreateOrConnectWithoutConnectionInput[]
    upsert?: SpecialDayUpsertWithWhereUniqueWithoutConnectionInput | SpecialDayUpsertWithWhereUniqueWithoutConnectionInput[]
    createMany?: SpecialDayCreateManyConnectionInputEnvelope
    set?: SpecialDayWhereUniqueInput | SpecialDayWhereUniqueInput[]
    disconnect?: SpecialDayWhereUniqueInput | SpecialDayWhereUniqueInput[]
    delete?: SpecialDayWhereUniqueInput | SpecialDayWhereUniqueInput[]
    connect?: SpecialDayWhereUniqueInput | SpecialDayWhereUniqueInput[]
    update?: SpecialDayUpdateWithWhereUniqueWithoutConnectionInput | SpecialDayUpdateWithWhereUniqueWithoutConnectionInput[]
    updateMany?: SpecialDayUpdateManyWithWhereWithoutConnectionInput | SpecialDayUpdateManyWithWhereWithoutConnectionInput[]
    deleteMany?: SpecialDayScalarWhereInput | SpecialDayScalarWhereInput[]
  }

  export type GoalUpdateManyWithoutConnectionNestedInput = {
    create?: XOR<GoalCreateWithoutConnectionInput, GoalUncheckedCreateWithoutConnectionInput> | GoalCreateWithoutConnectionInput[] | GoalUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutConnectionInput | GoalCreateOrConnectWithoutConnectionInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutConnectionInput | GoalUpsertWithWhereUniqueWithoutConnectionInput[]
    createMany?: GoalCreateManyConnectionInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutConnectionInput | GoalUpdateWithWhereUniqueWithoutConnectionInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutConnectionInput | GoalUpdateManyWithWhereWithoutConnectionInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type DreamUpdateManyWithoutConnectionNestedInput = {
    create?: XOR<DreamCreateWithoutConnectionInput, DreamUncheckedCreateWithoutConnectionInput> | DreamCreateWithoutConnectionInput[] | DreamUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: DreamCreateOrConnectWithoutConnectionInput | DreamCreateOrConnectWithoutConnectionInput[]
    upsert?: DreamUpsertWithWhereUniqueWithoutConnectionInput | DreamUpsertWithWhereUniqueWithoutConnectionInput[]
    createMany?: DreamCreateManyConnectionInputEnvelope
    set?: DreamWhereUniqueInput | DreamWhereUniqueInput[]
    disconnect?: DreamWhereUniqueInput | DreamWhereUniqueInput[]
    delete?: DreamWhereUniqueInput | DreamWhereUniqueInput[]
    connect?: DreamWhereUniqueInput | DreamWhereUniqueInput[]
    update?: DreamUpdateWithWhereUniqueWithoutConnectionInput | DreamUpdateWithWhereUniqueWithoutConnectionInput[]
    updateMany?: DreamUpdateManyWithWhereWithoutConnectionInput | DreamUpdateManyWithWhereWithoutConnectionInput[]
    deleteMany?: DreamScalarWhereInput | DreamScalarWhereInput[]
  }

  export type TreeUpdateOneWithoutConnectionNestedInput = {
    create?: XOR<TreeCreateWithoutConnectionInput, TreeUncheckedCreateWithoutConnectionInput>
    connectOrCreate?: TreeCreateOrConnectWithoutConnectionInput
    upsert?: TreeUpsertWithoutConnectionInput
    disconnect?: TreeWhereInput | boolean
    delete?: TreeWhereInput | boolean
    connect?: TreeWhereUniqueInput
    update?: XOR<XOR<TreeUpdateToOneWithWhereWithoutConnectionInput, TreeUpdateWithoutConnectionInput>, TreeUncheckedUpdateWithoutConnectionInput>
  }

  export type SurpriseUpdateManyWithoutConnectionNestedInput = {
    create?: XOR<SurpriseCreateWithoutConnectionInput, SurpriseUncheckedCreateWithoutConnectionInput> | SurpriseCreateWithoutConnectionInput[] | SurpriseUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: SurpriseCreateOrConnectWithoutConnectionInput | SurpriseCreateOrConnectWithoutConnectionInput[]
    upsert?: SurpriseUpsertWithWhereUniqueWithoutConnectionInput | SurpriseUpsertWithWhereUniqueWithoutConnectionInput[]
    createMany?: SurpriseCreateManyConnectionInputEnvelope
    set?: SurpriseWhereUniqueInput | SurpriseWhereUniqueInput[]
    disconnect?: SurpriseWhereUniqueInput | SurpriseWhereUniqueInput[]
    delete?: SurpriseWhereUniqueInput | SurpriseWhereUniqueInput[]
    connect?: SurpriseWhereUniqueInput | SurpriseWhereUniqueInput[]
    update?: SurpriseUpdateWithWhereUniqueWithoutConnectionInput | SurpriseUpdateWithWhereUniqueWithoutConnectionInput[]
    updateMany?: SurpriseUpdateManyWithWhereWithoutConnectionInput | SurpriseUpdateManyWithWhereWithoutConnectionInput[]
    deleteMany?: SurpriseScalarWhereInput | SurpriseScalarWhereInput[]
  }

  export type TimeCapsuleUpdateManyWithoutConnectionNestedInput = {
    create?: XOR<TimeCapsuleCreateWithoutConnectionInput, TimeCapsuleUncheckedCreateWithoutConnectionInput> | TimeCapsuleCreateWithoutConnectionInput[] | TimeCapsuleUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: TimeCapsuleCreateOrConnectWithoutConnectionInput | TimeCapsuleCreateOrConnectWithoutConnectionInput[]
    upsert?: TimeCapsuleUpsertWithWhereUniqueWithoutConnectionInput | TimeCapsuleUpsertWithWhereUniqueWithoutConnectionInput[]
    createMany?: TimeCapsuleCreateManyConnectionInputEnvelope
    set?: TimeCapsuleWhereUniqueInput | TimeCapsuleWhereUniqueInput[]
    disconnect?: TimeCapsuleWhereUniqueInput | TimeCapsuleWhereUniqueInput[]
    delete?: TimeCapsuleWhereUniqueInput | TimeCapsuleWhereUniqueInput[]
    connect?: TimeCapsuleWhereUniqueInput | TimeCapsuleWhereUniqueInput[]
    update?: TimeCapsuleUpdateWithWhereUniqueWithoutConnectionInput | TimeCapsuleUpdateWithWhereUniqueWithoutConnectionInput[]
    updateMany?: TimeCapsuleUpdateManyWithWhereWithoutConnectionInput | TimeCapsuleUpdateManyWithWhereWithoutConnectionInput[]
    deleteMany?: TimeCapsuleScalarWhereInput | TimeCapsuleScalarWhereInput[]
  }

  export type ChatMessageUpdateManyWithoutConnectionNestedInput = {
    create?: XOR<ChatMessageCreateWithoutConnectionInput, ChatMessageUncheckedCreateWithoutConnectionInput> | ChatMessageCreateWithoutConnectionInput[] | ChatMessageUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutConnectionInput | ChatMessageCreateOrConnectWithoutConnectionInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutConnectionInput | ChatMessageUpsertWithWhereUniqueWithoutConnectionInput[]
    createMany?: ChatMessageCreateManyConnectionInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutConnectionInput | ChatMessageUpdateWithWhereUniqueWithoutConnectionInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutConnectionInput | ChatMessageUpdateManyWithWhereWithoutConnectionInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type MemoryUncheckedUpdateManyWithoutConnectionNestedInput = {
    create?: XOR<MemoryCreateWithoutConnectionInput, MemoryUncheckedCreateWithoutConnectionInput> | MemoryCreateWithoutConnectionInput[] | MemoryUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: MemoryCreateOrConnectWithoutConnectionInput | MemoryCreateOrConnectWithoutConnectionInput[]
    upsert?: MemoryUpsertWithWhereUniqueWithoutConnectionInput | MemoryUpsertWithWhereUniqueWithoutConnectionInput[]
    createMany?: MemoryCreateManyConnectionInputEnvelope
    set?: MemoryWhereUniqueInput | MemoryWhereUniqueInput[]
    disconnect?: MemoryWhereUniqueInput | MemoryWhereUniqueInput[]
    delete?: MemoryWhereUniqueInput | MemoryWhereUniqueInput[]
    connect?: MemoryWhereUniqueInput | MemoryWhereUniqueInput[]
    update?: MemoryUpdateWithWhereUniqueWithoutConnectionInput | MemoryUpdateWithWhereUniqueWithoutConnectionInput[]
    updateMany?: MemoryUpdateManyWithWhereWithoutConnectionInput | MemoryUpdateManyWithWhereWithoutConnectionInput[]
    deleteMany?: MemoryScalarWhereInput | MemoryScalarWhereInput[]
  }

  export type NoteUncheckedUpdateManyWithoutConnectionNestedInput = {
    create?: XOR<NoteCreateWithoutConnectionInput, NoteUncheckedCreateWithoutConnectionInput> | NoteCreateWithoutConnectionInput[] | NoteUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutConnectionInput | NoteCreateOrConnectWithoutConnectionInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutConnectionInput | NoteUpsertWithWhereUniqueWithoutConnectionInput[]
    createMany?: NoteCreateManyConnectionInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutConnectionInput | NoteUpdateWithWhereUniqueWithoutConnectionInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutConnectionInput | NoteUpdateManyWithWhereWithoutConnectionInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type SpecialDayUncheckedUpdateManyWithoutConnectionNestedInput = {
    create?: XOR<SpecialDayCreateWithoutConnectionInput, SpecialDayUncheckedCreateWithoutConnectionInput> | SpecialDayCreateWithoutConnectionInput[] | SpecialDayUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: SpecialDayCreateOrConnectWithoutConnectionInput | SpecialDayCreateOrConnectWithoutConnectionInput[]
    upsert?: SpecialDayUpsertWithWhereUniqueWithoutConnectionInput | SpecialDayUpsertWithWhereUniqueWithoutConnectionInput[]
    createMany?: SpecialDayCreateManyConnectionInputEnvelope
    set?: SpecialDayWhereUniqueInput | SpecialDayWhereUniqueInput[]
    disconnect?: SpecialDayWhereUniqueInput | SpecialDayWhereUniqueInput[]
    delete?: SpecialDayWhereUniqueInput | SpecialDayWhereUniqueInput[]
    connect?: SpecialDayWhereUniqueInput | SpecialDayWhereUniqueInput[]
    update?: SpecialDayUpdateWithWhereUniqueWithoutConnectionInput | SpecialDayUpdateWithWhereUniqueWithoutConnectionInput[]
    updateMany?: SpecialDayUpdateManyWithWhereWithoutConnectionInput | SpecialDayUpdateManyWithWhereWithoutConnectionInput[]
    deleteMany?: SpecialDayScalarWhereInput | SpecialDayScalarWhereInput[]
  }

  export type GoalUncheckedUpdateManyWithoutConnectionNestedInput = {
    create?: XOR<GoalCreateWithoutConnectionInput, GoalUncheckedCreateWithoutConnectionInput> | GoalCreateWithoutConnectionInput[] | GoalUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutConnectionInput | GoalCreateOrConnectWithoutConnectionInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutConnectionInput | GoalUpsertWithWhereUniqueWithoutConnectionInput[]
    createMany?: GoalCreateManyConnectionInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutConnectionInput | GoalUpdateWithWhereUniqueWithoutConnectionInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutConnectionInput | GoalUpdateManyWithWhereWithoutConnectionInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type DreamUncheckedUpdateManyWithoutConnectionNestedInput = {
    create?: XOR<DreamCreateWithoutConnectionInput, DreamUncheckedCreateWithoutConnectionInput> | DreamCreateWithoutConnectionInput[] | DreamUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: DreamCreateOrConnectWithoutConnectionInput | DreamCreateOrConnectWithoutConnectionInput[]
    upsert?: DreamUpsertWithWhereUniqueWithoutConnectionInput | DreamUpsertWithWhereUniqueWithoutConnectionInput[]
    createMany?: DreamCreateManyConnectionInputEnvelope
    set?: DreamWhereUniqueInput | DreamWhereUniqueInput[]
    disconnect?: DreamWhereUniqueInput | DreamWhereUniqueInput[]
    delete?: DreamWhereUniqueInput | DreamWhereUniqueInput[]
    connect?: DreamWhereUniqueInput | DreamWhereUniqueInput[]
    update?: DreamUpdateWithWhereUniqueWithoutConnectionInput | DreamUpdateWithWhereUniqueWithoutConnectionInput[]
    updateMany?: DreamUpdateManyWithWhereWithoutConnectionInput | DreamUpdateManyWithWhereWithoutConnectionInput[]
    deleteMany?: DreamScalarWhereInput | DreamScalarWhereInput[]
  }

  export type TreeUncheckedUpdateOneWithoutConnectionNestedInput = {
    create?: XOR<TreeCreateWithoutConnectionInput, TreeUncheckedCreateWithoutConnectionInput>
    connectOrCreate?: TreeCreateOrConnectWithoutConnectionInput
    upsert?: TreeUpsertWithoutConnectionInput
    disconnect?: TreeWhereInput | boolean
    delete?: TreeWhereInput | boolean
    connect?: TreeWhereUniqueInput
    update?: XOR<XOR<TreeUpdateToOneWithWhereWithoutConnectionInput, TreeUpdateWithoutConnectionInput>, TreeUncheckedUpdateWithoutConnectionInput>
  }

  export type SurpriseUncheckedUpdateManyWithoutConnectionNestedInput = {
    create?: XOR<SurpriseCreateWithoutConnectionInput, SurpriseUncheckedCreateWithoutConnectionInput> | SurpriseCreateWithoutConnectionInput[] | SurpriseUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: SurpriseCreateOrConnectWithoutConnectionInput | SurpriseCreateOrConnectWithoutConnectionInput[]
    upsert?: SurpriseUpsertWithWhereUniqueWithoutConnectionInput | SurpriseUpsertWithWhereUniqueWithoutConnectionInput[]
    createMany?: SurpriseCreateManyConnectionInputEnvelope
    set?: SurpriseWhereUniqueInput | SurpriseWhereUniqueInput[]
    disconnect?: SurpriseWhereUniqueInput | SurpriseWhereUniqueInput[]
    delete?: SurpriseWhereUniqueInput | SurpriseWhereUniqueInput[]
    connect?: SurpriseWhereUniqueInput | SurpriseWhereUniqueInput[]
    update?: SurpriseUpdateWithWhereUniqueWithoutConnectionInput | SurpriseUpdateWithWhereUniqueWithoutConnectionInput[]
    updateMany?: SurpriseUpdateManyWithWhereWithoutConnectionInput | SurpriseUpdateManyWithWhereWithoutConnectionInput[]
    deleteMany?: SurpriseScalarWhereInput | SurpriseScalarWhereInput[]
  }

  export type TimeCapsuleUncheckedUpdateManyWithoutConnectionNestedInput = {
    create?: XOR<TimeCapsuleCreateWithoutConnectionInput, TimeCapsuleUncheckedCreateWithoutConnectionInput> | TimeCapsuleCreateWithoutConnectionInput[] | TimeCapsuleUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: TimeCapsuleCreateOrConnectWithoutConnectionInput | TimeCapsuleCreateOrConnectWithoutConnectionInput[]
    upsert?: TimeCapsuleUpsertWithWhereUniqueWithoutConnectionInput | TimeCapsuleUpsertWithWhereUniqueWithoutConnectionInput[]
    createMany?: TimeCapsuleCreateManyConnectionInputEnvelope
    set?: TimeCapsuleWhereUniqueInput | TimeCapsuleWhereUniqueInput[]
    disconnect?: TimeCapsuleWhereUniqueInput | TimeCapsuleWhereUniqueInput[]
    delete?: TimeCapsuleWhereUniqueInput | TimeCapsuleWhereUniqueInput[]
    connect?: TimeCapsuleWhereUniqueInput | TimeCapsuleWhereUniqueInput[]
    update?: TimeCapsuleUpdateWithWhereUniqueWithoutConnectionInput | TimeCapsuleUpdateWithWhereUniqueWithoutConnectionInput[]
    updateMany?: TimeCapsuleUpdateManyWithWhereWithoutConnectionInput | TimeCapsuleUpdateManyWithWhereWithoutConnectionInput[]
    deleteMany?: TimeCapsuleScalarWhereInput | TimeCapsuleScalarWhereInput[]
  }

  export type ChatMessageUncheckedUpdateManyWithoutConnectionNestedInput = {
    create?: XOR<ChatMessageCreateWithoutConnectionInput, ChatMessageUncheckedCreateWithoutConnectionInput> | ChatMessageCreateWithoutConnectionInput[] | ChatMessageUncheckedCreateWithoutConnectionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutConnectionInput | ChatMessageCreateOrConnectWithoutConnectionInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutConnectionInput | ChatMessageUpsertWithWhereUniqueWithoutConnectionInput[]
    createMany?: ChatMessageCreateManyConnectionInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutConnectionInput | ChatMessageUpdateWithWhereUniqueWithoutConnectionInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutConnectionInput | ChatMessageUpdateManyWithWhereWithoutConnectionInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type ConnectionCreateNestedOneWithoutTreeInput = {
    create?: XOR<ConnectionCreateWithoutTreeInput, ConnectionUncheckedCreateWithoutTreeInput>
    connectOrCreate?: ConnectionCreateOrConnectWithoutTreeInput
    connect?: ConnectionWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ConnectionUpdateOneRequiredWithoutTreeNestedInput = {
    create?: XOR<ConnectionCreateWithoutTreeInput, ConnectionUncheckedCreateWithoutTreeInput>
    connectOrCreate?: ConnectionCreateOrConnectWithoutTreeInput
    upsert?: ConnectionUpsertWithoutTreeInput
    connect?: ConnectionWhereUniqueInput
    update?: XOR<XOR<ConnectionUpdateToOneWithWhereWithoutTreeInput, ConnectionUpdateWithoutTreeInput>, ConnectionUncheckedUpdateWithoutTreeInput>
  }

  export type UserCreateNestedOneWithoutMemoriesInput = {
    create?: XOR<UserCreateWithoutMemoriesInput, UserUncheckedCreateWithoutMemoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMemoriesInput
    connect?: UserWhereUniqueInput
  }

  export type ConnectionCreateNestedOneWithoutMemoriesInput = {
    create?: XOR<ConnectionCreateWithoutMemoriesInput, ConnectionUncheckedCreateWithoutMemoriesInput>
    connectOrCreate?: ConnectionCreateOrConnectWithoutMemoriesInput
    connect?: ConnectionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMemoriesNestedInput = {
    create?: XOR<UserCreateWithoutMemoriesInput, UserUncheckedCreateWithoutMemoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMemoriesInput
    upsert?: UserUpsertWithoutMemoriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMemoriesInput, UserUpdateWithoutMemoriesInput>, UserUncheckedUpdateWithoutMemoriesInput>
  }

  export type ConnectionUpdateOneRequiredWithoutMemoriesNestedInput = {
    create?: XOR<ConnectionCreateWithoutMemoriesInput, ConnectionUncheckedCreateWithoutMemoriesInput>
    connectOrCreate?: ConnectionCreateOrConnectWithoutMemoriesInput
    upsert?: ConnectionUpsertWithoutMemoriesInput
    connect?: ConnectionWhereUniqueInput
    update?: XOR<XOR<ConnectionUpdateToOneWithWhereWithoutMemoriesInput, ConnectionUpdateWithoutMemoriesInput>, ConnectionUncheckedUpdateWithoutMemoriesInput>
  }

  export type UserCreateNestedOneWithoutNotesInput = {
    create?: XOR<UserCreateWithoutNotesInput, UserUncheckedCreateWithoutNotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotesInput
    connect?: UserWhereUniqueInput
  }

  export type ConnectionCreateNestedOneWithoutNotesInput = {
    create?: XOR<ConnectionCreateWithoutNotesInput, ConnectionUncheckedCreateWithoutNotesInput>
    connectOrCreate?: ConnectionCreateOrConnectWithoutNotesInput
    connect?: ConnectionWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutNotesNestedInput = {
    create?: XOR<UserCreateWithoutNotesInput, UserUncheckedCreateWithoutNotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotesInput
    upsert?: UserUpsertWithoutNotesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotesInput, UserUpdateWithoutNotesInput>, UserUncheckedUpdateWithoutNotesInput>
  }

  export type ConnectionUpdateOneRequiredWithoutNotesNestedInput = {
    create?: XOR<ConnectionCreateWithoutNotesInput, ConnectionUncheckedCreateWithoutNotesInput>
    connectOrCreate?: ConnectionCreateOrConnectWithoutNotesInput
    upsert?: ConnectionUpsertWithoutNotesInput
    connect?: ConnectionWhereUniqueInput
    update?: XOR<XOR<ConnectionUpdateToOneWithWhereWithoutNotesInput, ConnectionUpdateWithoutNotesInput>, ConnectionUncheckedUpdateWithoutNotesInput>
  }

  export type UserCreateNestedOneWithoutSpecialDaysInput = {
    create?: XOR<UserCreateWithoutSpecialDaysInput, UserUncheckedCreateWithoutSpecialDaysInput>
    connectOrCreate?: UserCreateOrConnectWithoutSpecialDaysInput
    connect?: UserWhereUniqueInput
  }

  export type ConnectionCreateNestedOneWithoutSpecialDaysInput = {
    create?: XOR<ConnectionCreateWithoutSpecialDaysInput, ConnectionUncheckedCreateWithoutSpecialDaysInput>
    connectOrCreate?: ConnectionCreateOrConnectWithoutSpecialDaysInput
    connect?: ConnectionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSpecialDaysNestedInput = {
    create?: XOR<UserCreateWithoutSpecialDaysInput, UserUncheckedCreateWithoutSpecialDaysInput>
    connectOrCreate?: UserCreateOrConnectWithoutSpecialDaysInput
    upsert?: UserUpsertWithoutSpecialDaysInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSpecialDaysInput, UserUpdateWithoutSpecialDaysInput>, UserUncheckedUpdateWithoutSpecialDaysInput>
  }

  export type ConnectionUpdateOneRequiredWithoutSpecialDaysNestedInput = {
    create?: XOR<ConnectionCreateWithoutSpecialDaysInput, ConnectionUncheckedCreateWithoutSpecialDaysInput>
    connectOrCreate?: ConnectionCreateOrConnectWithoutSpecialDaysInput
    upsert?: ConnectionUpsertWithoutSpecialDaysInput
    connect?: ConnectionWhereUniqueInput
    update?: XOR<XOR<ConnectionUpdateToOneWithWhereWithoutSpecialDaysInput, ConnectionUpdateWithoutSpecialDaysInput>, ConnectionUncheckedUpdateWithoutSpecialDaysInput>
  }

  export type UserCreateNestedOneWithoutGoalsInput = {
    create?: XOR<UserCreateWithoutGoalsInput, UserUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGoalsInput
    connect?: UserWhereUniqueInput
  }

  export type ConnectionCreateNestedOneWithoutGoalsInput = {
    create?: XOR<ConnectionCreateWithoutGoalsInput, ConnectionUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: ConnectionCreateOrConnectWithoutGoalsInput
    connect?: ConnectionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutGoalsNestedInput = {
    create?: XOR<UserCreateWithoutGoalsInput, UserUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGoalsInput
    upsert?: UserUpsertWithoutGoalsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGoalsInput, UserUpdateWithoutGoalsInput>, UserUncheckedUpdateWithoutGoalsInput>
  }

  export type ConnectionUpdateOneRequiredWithoutGoalsNestedInput = {
    create?: XOR<ConnectionCreateWithoutGoalsInput, ConnectionUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: ConnectionCreateOrConnectWithoutGoalsInput
    upsert?: ConnectionUpsertWithoutGoalsInput
    connect?: ConnectionWhereUniqueInput
    update?: XOR<XOR<ConnectionUpdateToOneWithWhereWithoutGoalsInput, ConnectionUpdateWithoutGoalsInput>, ConnectionUncheckedUpdateWithoutGoalsInput>
  }

  export type UserCreateNestedOneWithoutDreamsInput = {
    create?: XOR<UserCreateWithoutDreamsInput, UserUncheckedCreateWithoutDreamsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDreamsInput
    connect?: UserWhereUniqueInput
  }

  export type ConnectionCreateNestedOneWithoutDreamsInput = {
    create?: XOR<ConnectionCreateWithoutDreamsInput, ConnectionUncheckedCreateWithoutDreamsInput>
    connectOrCreate?: ConnectionCreateOrConnectWithoutDreamsInput
    connect?: ConnectionWhereUniqueInput
  }

  export type DreamCommentCreateNestedManyWithoutDreamInput = {
    create?: XOR<DreamCommentCreateWithoutDreamInput, DreamCommentUncheckedCreateWithoutDreamInput> | DreamCommentCreateWithoutDreamInput[] | DreamCommentUncheckedCreateWithoutDreamInput[]
    connectOrCreate?: DreamCommentCreateOrConnectWithoutDreamInput | DreamCommentCreateOrConnectWithoutDreamInput[]
    createMany?: DreamCommentCreateManyDreamInputEnvelope
    connect?: DreamCommentWhereUniqueInput | DreamCommentWhereUniqueInput[]
  }

  export type DreamCommentUncheckedCreateNestedManyWithoutDreamInput = {
    create?: XOR<DreamCommentCreateWithoutDreamInput, DreamCommentUncheckedCreateWithoutDreamInput> | DreamCommentCreateWithoutDreamInput[] | DreamCommentUncheckedCreateWithoutDreamInput[]
    connectOrCreate?: DreamCommentCreateOrConnectWithoutDreamInput | DreamCommentCreateOrConnectWithoutDreamInput[]
    createMany?: DreamCommentCreateManyDreamInputEnvelope
    connect?: DreamCommentWhereUniqueInput | DreamCommentWhereUniqueInput[]
  }

  export type EnumDreamCategoryFieldUpdateOperationsInput = {
    set?: $Enums.DreamCategory
  }

  export type UserUpdateOneRequiredWithoutDreamsNestedInput = {
    create?: XOR<UserCreateWithoutDreamsInput, UserUncheckedCreateWithoutDreamsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDreamsInput
    upsert?: UserUpsertWithoutDreamsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDreamsInput, UserUpdateWithoutDreamsInput>, UserUncheckedUpdateWithoutDreamsInput>
  }

  export type ConnectionUpdateOneRequiredWithoutDreamsNestedInput = {
    create?: XOR<ConnectionCreateWithoutDreamsInput, ConnectionUncheckedCreateWithoutDreamsInput>
    connectOrCreate?: ConnectionCreateOrConnectWithoutDreamsInput
    upsert?: ConnectionUpsertWithoutDreamsInput
    connect?: ConnectionWhereUniqueInput
    update?: XOR<XOR<ConnectionUpdateToOneWithWhereWithoutDreamsInput, ConnectionUpdateWithoutDreamsInput>, ConnectionUncheckedUpdateWithoutDreamsInput>
  }

  export type DreamCommentUpdateManyWithoutDreamNestedInput = {
    create?: XOR<DreamCommentCreateWithoutDreamInput, DreamCommentUncheckedCreateWithoutDreamInput> | DreamCommentCreateWithoutDreamInput[] | DreamCommentUncheckedCreateWithoutDreamInput[]
    connectOrCreate?: DreamCommentCreateOrConnectWithoutDreamInput | DreamCommentCreateOrConnectWithoutDreamInput[]
    upsert?: DreamCommentUpsertWithWhereUniqueWithoutDreamInput | DreamCommentUpsertWithWhereUniqueWithoutDreamInput[]
    createMany?: DreamCommentCreateManyDreamInputEnvelope
    set?: DreamCommentWhereUniqueInput | DreamCommentWhereUniqueInput[]
    disconnect?: DreamCommentWhereUniqueInput | DreamCommentWhereUniqueInput[]
    delete?: DreamCommentWhereUniqueInput | DreamCommentWhereUniqueInput[]
    connect?: DreamCommentWhereUniqueInput | DreamCommentWhereUniqueInput[]
    update?: DreamCommentUpdateWithWhereUniqueWithoutDreamInput | DreamCommentUpdateWithWhereUniqueWithoutDreamInput[]
    updateMany?: DreamCommentUpdateManyWithWhereWithoutDreamInput | DreamCommentUpdateManyWithWhereWithoutDreamInput[]
    deleteMany?: DreamCommentScalarWhereInput | DreamCommentScalarWhereInput[]
  }

  export type DreamCommentUncheckedUpdateManyWithoutDreamNestedInput = {
    create?: XOR<DreamCommentCreateWithoutDreamInput, DreamCommentUncheckedCreateWithoutDreamInput> | DreamCommentCreateWithoutDreamInput[] | DreamCommentUncheckedCreateWithoutDreamInput[]
    connectOrCreate?: DreamCommentCreateOrConnectWithoutDreamInput | DreamCommentCreateOrConnectWithoutDreamInput[]
    upsert?: DreamCommentUpsertWithWhereUniqueWithoutDreamInput | DreamCommentUpsertWithWhereUniqueWithoutDreamInput[]
    createMany?: DreamCommentCreateManyDreamInputEnvelope
    set?: DreamCommentWhereUniqueInput | DreamCommentWhereUniqueInput[]
    disconnect?: DreamCommentWhereUniqueInput | DreamCommentWhereUniqueInput[]
    delete?: DreamCommentWhereUniqueInput | DreamCommentWhereUniqueInput[]
    connect?: DreamCommentWhereUniqueInput | DreamCommentWhereUniqueInput[]
    update?: DreamCommentUpdateWithWhereUniqueWithoutDreamInput | DreamCommentUpdateWithWhereUniqueWithoutDreamInput[]
    updateMany?: DreamCommentUpdateManyWithWhereWithoutDreamInput | DreamCommentUpdateManyWithWhereWithoutDreamInput[]
    deleteMany?: DreamCommentScalarWhereInput | DreamCommentScalarWhereInput[]
  }

  export type DreamCreateNestedOneWithoutCommentsInput = {
    create?: XOR<DreamCreateWithoutCommentsInput, DreamUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: DreamCreateOrConnectWithoutCommentsInput
    connect?: DreamWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type DreamUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<DreamCreateWithoutCommentsInput, DreamUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: DreamCreateOrConnectWithoutCommentsInput
    upsert?: DreamUpsertWithoutCommentsInput
    connect?: DreamWhereUniqueInput
    update?: XOR<XOR<DreamUpdateToOneWithWhereWithoutCommentsInput, DreamUpdateWithoutCommentsInput>, DreamUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserCreateNestedOneWithoutSurprisesInput = {
    create?: XOR<UserCreateWithoutSurprisesInput, UserUncheckedCreateWithoutSurprisesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSurprisesInput
    connect?: UserWhereUniqueInput
  }

  export type ConnectionCreateNestedOneWithoutSurprisesInput = {
    create?: XOR<ConnectionCreateWithoutSurprisesInput, ConnectionUncheckedCreateWithoutSurprisesInput>
    connectOrCreate?: ConnectionCreateOrConnectWithoutSurprisesInput
    connect?: ConnectionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSurprisesNestedInput = {
    create?: XOR<UserCreateWithoutSurprisesInput, UserUncheckedCreateWithoutSurprisesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSurprisesInput
    upsert?: UserUpsertWithoutSurprisesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSurprisesInput, UserUpdateWithoutSurprisesInput>, UserUncheckedUpdateWithoutSurprisesInput>
  }

  export type ConnectionUpdateOneRequiredWithoutSurprisesNestedInput = {
    create?: XOR<ConnectionCreateWithoutSurprisesInput, ConnectionUncheckedCreateWithoutSurprisesInput>
    connectOrCreate?: ConnectionCreateOrConnectWithoutSurprisesInput
    upsert?: ConnectionUpsertWithoutSurprisesInput
    connect?: ConnectionWhereUniqueInput
    update?: XOR<XOR<ConnectionUpdateToOneWithWhereWithoutSurprisesInput, ConnectionUpdateWithoutSurprisesInput>, ConnectionUncheckedUpdateWithoutSurprisesInput>
  }

  export type UserCreateNestedOneWithoutTimeCapsulesInput = {
    create?: XOR<UserCreateWithoutTimeCapsulesInput, UserUncheckedCreateWithoutTimeCapsulesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTimeCapsulesInput
    connect?: UserWhereUniqueInput
  }

  export type ConnectionCreateNestedOneWithoutTimeCapsulesInput = {
    create?: XOR<ConnectionCreateWithoutTimeCapsulesInput, ConnectionUncheckedCreateWithoutTimeCapsulesInput>
    connectOrCreate?: ConnectionCreateOrConnectWithoutTimeCapsulesInput
    connect?: ConnectionWhereUniqueInput
  }

  export type TimeCapsuleCommentCreateNestedManyWithoutTimeCapsuleInput = {
    create?: XOR<TimeCapsuleCommentCreateWithoutTimeCapsuleInput, TimeCapsuleCommentUncheckedCreateWithoutTimeCapsuleInput> | TimeCapsuleCommentCreateWithoutTimeCapsuleInput[] | TimeCapsuleCommentUncheckedCreateWithoutTimeCapsuleInput[]
    connectOrCreate?: TimeCapsuleCommentCreateOrConnectWithoutTimeCapsuleInput | TimeCapsuleCommentCreateOrConnectWithoutTimeCapsuleInput[]
    createMany?: TimeCapsuleCommentCreateManyTimeCapsuleInputEnvelope
    connect?: TimeCapsuleCommentWhereUniqueInput | TimeCapsuleCommentWhereUniqueInput[]
  }

  export type TimeCapsuleCommentUncheckedCreateNestedManyWithoutTimeCapsuleInput = {
    create?: XOR<TimeCapsuleCommentCreateWithoutTimeCapsuleInput, TimeCapsuleCommentUncheckedCreateWithoutTimeCapsuleInput> | TimeCapsuleCommentCreateWithoutTimeCapsuleInput[] | TimeCapsuleCommentUncheckedCreateWithoutTimeCapsuleInput[]
    connectOrCreate?: TimeCapsuleCommentCreateOrConnectWithoutTimeCapsuleInput | TimeCapsuleCommentCreateOrConnectWithoutTimeCapsuleInput[]
    createMany?: TimeCapsuleCommentCreateManyTimeCapsuleInputEnvelope
    connect?: TimeCapsuleCommentWhereUniqueInput | TimeCapsuleCommentWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutTimeCapsulesNestedInput = {
    create?: XOR<UserCreateWithoutTimeCapsulesInput, UserUncheckedCreateWithoutTimeCapsulesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTimeCapsulesInput
    upsert?: UserUpsertWithoutTimeCapsulesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTimeCapsulesInput, UserUpdateWithoutTimeCapsulesInput>, UserUncheckedUpdateWithoutTimeCapsulesInput>
  }

  export type ConnectionUpdateOneRequiredWithoutTimeCapsulesNestedInput = {
    create?: XOR<ConnectionCreateWithoutTimeCapsulesInput, ConnectionUncheckedCreateWithoutTimeCapsulesInput>
    connectOrCreate?: ConnectionCreateOrConnectWithoutTimeCapsulesInput
    upsert?: ConnectionUpsertWithoutTimeCapsulesInput
    connect?: ConnectionWhereUniqueInput
    update?: XOR<XOR<ConnectionUpdateToOneWithWhereWithoutTimeCapsulesInput, ConnectionUpdateWithoutTimeCapsulesInput>, ConnectionUncheckedUpdateWithoutTimeCapsulesInput>
  }

  export type TimeCapsuleCommentUpdateManyWithoutTimeCapsuleNestedInput = {
    create?: XOR<TimeCapsuleCommentCreateWithoutTimeCapsuleInput, TimeCapsuleCommentUncheckedCreateWithoutTimeCapsuleInput> | TimeCapsuleCommentCreateWithoutTimeCapsuleInput[] | TimeCapsuleCommentUncheckedCreateWithoutTimeCapsuleInput[]
    connectOrCreate?: TimeCapsuleCommentCreateOrConnectWithoutTimeCapsuleInput | TimeCapsuleCommentCreateOrConnectWithoutTimeCapsuleInput[]
    upsert?: TimeCapsuleCommentUpsertWithWhereUniqueWithoutTimeCapsuleInput | TimeCapsuleCommentUpsertWithWhereUniqueWithoutTimeCapsuleInput[]
    createMany?: TimeCapsuleCommentCreateManyTimeCapsuleInputEnvelope
    set?: TimeCapsuleCommentWhereUniqueInput | TimeCapsuleCommentWhereUniqueInput[]
    disconnect?: TimeCapsuleCommentWhereUniqueInput | TimeCapsuleCommentWhereUniqueInput[]
    delete?: TimeCapsuleCommentWhereUniqueInput | TimeCapsuleCommentWhereUniqueInput[]
    connect?: TimeCapsuleCommentWhereUniqueInput | TimeCapsuleCommentWhereUniqueInput[]
    update?: TimeCapsuleCommentUpdateWithWhereUniqueWithoutTimeCapsuleInput | TimeCapsuleCommentUpdateWithWhereUniqueWithoutTimeCapsuleInput[]
    updateMany?: TimeCapsuleCommentUpdateManyWithWhereWithoutTimeCapsuleInput | TimeCapsuleCommentUpdateManyWithWhereWithoutTimeCapsuleInput[]
    deleteMany?: TimeCapsuleCommentScalarWhereInput | TimeCapsuleCommentScalarWhereInput[]
  }

  export type TimeCapsuleCommentUncheckedUpdateManyWithoutTimeCapsuleNestedInput = {
    create?: XOR<TimeCapsuleCommentCreateWithoutTimeCapsuleInput, TimeCapsuleCommentUncheckedCreateWithoutTimeCapsuleInput> | TimeCapsuleCommentCreateWithoutTimeCapsuleInput[] | TimeCapsuleCommentUncheckedCreateWithoutTimeCapsuleInput[]
    connectOrCreate?: TimeCapsuleCommentCreateOrConnectWithoutTimeCapsuleInput | TimeCapsuleCommentCreateOrConnectWithoutTimeCapsuleInput[]
    upsert?: TimeCapsuleCommentUpsertWithWhereUniqueWithoutTimeCapsuleInput | TimeCapsuleCommentUpsertWithWhereUniqueWithoutTimeCapsuleInput[]
    createMany?: TimeCapsuleCommentCreateManyTimeCapsuleInputEnvelope
    set?: TimeCapsuleCommentWhereUniqueInput | TimeCapsuleCommentWhereUniqueInput[]
    disconnect?: TimeCapsuleCommentWhereUniqueInput | TimeCapsuleCommentWhereUniqueInput[]
    delete?: TimeCapsuleCommentWhereUniqueInput | TimeCapsuleCommentWhereUniqueInput[]
    connect?: TimeCapsuleCommentWhereUniqueInput | TimeCapsuleCommentWhereUniqueInput[]
    update?: TimeCapsuleCommentUpdateWithWhereUniqueWithoutTimeCapsuleInput | TimeCapsuleCommentUpdateWithWhereUniqueWithoutTimeCapsuleInput[]
    updateMany?: TimeCapsuleCommentUpdateManyWithWhereWithoutTimeCapsuleInput | TimeCapsuleCommentUpdateManyWithWhereWithoutTimeCapsuleInput[]
    deleteMany?: TimeCapsuleCommentScalarWhereInput | TimeCapsuleCommentScalarWhereInput[]
  }

  export type TimeCapsuleCreateNestedOneWithoutCommentsInput = {
    create?: XOR<TimeCapsuleCreateWithoutCommentsInput, TimeCapsuleUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: TimeCapsuleCreateOrConnectWithoutCommentsInput
    connect?: TimeCapsuleWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTimeCapsuleCommentsInput = {
    create?: XOR<UserCreateWithoutTimeCapsuleCommentsInput, UserUncheckedCreateWithoutTimeCapsuleCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTimeCapsuleCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type TimeCapsuleUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<TimeCapsuleCreateWithoutCommentsInput, TimeCapsuleUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: TimeCapsuleCreateOrConnectWithoutCommentsInput
    upsert?: TimeCapsuleUpsertWithoutCommentsInput
    connect?: TimeCapsuleWhereUniqueInput
    update?: XOR<XOR<TimeCapsuleUpdateToOneWithWhereWithoutCommentsInput, TimeCapsuleUpdateWithoutCommentsInput>, TimeCapsuleUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutTimeCapsuleCommentsNestedInput = {
    create?: XOR<UserCreateWithoutTimeCapsuleCommentsInput, UserUncheckedCreateWithoutTimeCapsuleCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTimeCapsuleCommentsInput
    upsert?: UserUpsertWithoutTimeCapsuleCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTimeCapsuleCommentsInput, UserUpdateWithoutTimeCapsuleCommentsInput>, UserUncheckedUpdateWithoutTimeCapsuleCommentsInput>
  }

  export type UserCreateNestedOneWithoutChatMessagesInput = {
    create?: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type ConnectionCreateNestedOneWithoutChatMessagesInput = {
    create?: XOR<ConnectionCreateWithoutChatMessagesInput, ConnectionUncheckedCreateWithoutChatMessagesInput>
    connectOrCreate?: ConnectionCreateOrConnectWithoutChatMessagesInput
    connect?: ConnectionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutChatMessagesNestedInput = {
    create?: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatMessagesInput
    upsert?: UserUpsertWithoutChatMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChatMessagesInput, UserUpdateWithoutChatMessagesInput>, UserUncheckedUpdateWithoutChatMessagesInput>
  }

  export type ConnectionUpdateOneRequiredWithoutChatMessagesNestedInput = {
    create?: XOR<ConnectionCreateWithoutChatMessagesInput, ConnectionUncheckedCreateWithoutChatMessagesInput>
    connectOrCreate?: ConnectionCreateOrConnectWithoutChatMessagesInput
    upsert?: ConnectionUpsertWithoutChatMessagesInput
    connect?: ConnectionWhereUniqueInput
    update?: XOR<XOR<ConnectionUpdateToOneWithWhereWithoutChatMessagesInput, ConnectionUpdateWithoutChatMessagesInput>, ConnectionUncheckedUpdateWithoutChatMessagesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumDreamCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.DreamCategory | EnumDreamCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.DreamCategory[] | ListEnumDreamCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.DreamCategory[] | ListEnumDreamCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumDreamCategoryFilter<$PrismaModel> | $Enums.DreamCategory
  }

  export type NestedEnumDreamCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DreamCategory | EnumDreamCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.DreamCategory[] | ListEnumDreamCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.DreamCategory[] | ListEnumDreamCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumDreamCategoryWithAggregatesFilter<$PrismaModel> | $Enums.DreamCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDreamCategoryFilter<$PrismaModel>
    _max?: NestedEnumDreamCategoryFilter<$PrismaModel>
  }

  export type ConnectionCreateWithoutUserInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    pairedWith?: UserCreateNestedOneWithoutPairedWithInput
    memories?: MemoryCreateNestedManyWithoutConnectionInput
    notes?: NoteCreateNestedManyWithoutConnectionInput
    specialDays?: SpecialDayCreateNestedManyWithoutConnectionInput
    goals?: GoalCreateNestedManyWithoutConnectionInput
    dreams?: DreamCreateNestedManyWithoutConnectionInput
    tree?: TreeCreateNestedOneWithoutConnectionInput
    surprises?: SurpriseCreateNestedManyWithoutConnectionInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutConnectionInput
    chatMessages?: ChatMessageCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionUncheckedCreateWithoutUserInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    pairedWithId?: string | null
    memories?: MemoryUncheckedCreateNestedManyWithoutConnectionInput
    notes?: NoteUncheckedCreateNestedManyWithoutConnectionInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutConnectionInput
    goals?: GoalUncheckedCreateNestedManyWithoutConnectionInput
    dreams?: DreamUncheckedCreateNestedManyWithoutConnectionInput
    tree?: TreeUncheckedCreateNestedOneWithoutConnectionInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutConnectionInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutConnectionInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionCreateOrConnectWithoutUserInput = {
    where: ConnectionWhereUniqueInput
    create: XOR<ConnectionCreateWithoutUserInput, ConnectionUncheckedCreateWithoutUserInput>
  }

  export type ConnectionCreateManyUserInputEnvelope = {
    data: ConnectionCreateManyUserInput | ConnectionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ConnectionCreateWithoutPairedWithInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConnectionsInput
    memories?: MemoryCreateNestedManyWithoutConnectionInput
    notes?: NoteCreateNestedManyWithoutConnectionInput
    specialDays?: SpecialDayCreateNestedManyWithoutConnectionInput
    goals?: GoalCreateNestedManyWithoutConnectionInput
    dreams?: DreamCreateNestedManyWithoutConnectionInput
    tree?: TreeCreateNestedOneWithoutConnectionInput
    surprises?: SurpriseCreateNestedManyWithoutConnectionInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutConnectionInput
    chatMessages?: ChatMessageCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionUncheckedCreateWithoutPairedWithInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    memories?: MemoryUncheckedCreateNestedManyWithoutConnectionInput
    notes?: NoteUncheckedCreateNestedManyWithoutConnectionInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutConnectionInput
    goals?: GoalUncheckedCreateNestedManyWithoutConnectionInput
    dreams?: DreamUncheckedCreateNestedManyWithoutConnectionInput
    tree?: TreeUncheckedCreateNestedOneWithoutConnectionInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutConnectionInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutConnectionInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionCreateOrConnectWithoutPairedWithInput = {
    where: ConnectionWhereUniqueInput
    create: XOR<ConnectionCreateWithoutPairedWithInput, ConnectionUncheckedCreateWithoutPairedWithInput>
  }

  export type ConnectionCreateManyPairedWithInputEnvelope = {
    data: ConnectionCreateManyPairedWithInput | ConnectionCreateManyPairedWithInput[]
    skipDuplicates?: boolean
  }

  export type MemoryCreateWithoutUserInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    connection: ConnectionCreateNestedOneWithoutMemoriesInput
  }

  export type MemoryUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    connectionId: string
  }

  export type MemoryCreateOrConnectWithoutUserInput = {
    where: MemoryWhereUniqueInput
    create: XOR<MemoryCreateWithoutUserInput, MemoryUncheckedCreateWithoutUserInput>
  }

  export type MemoryCreateManyUserInputEnvelope = {
    data: MemoryCreateManyUserInput | MemoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NoteCreateWithoutAuthorInput = {
    id?: string
    title: string
    content: string
    isTemporary?: boolean
    expiresAt?: Date | string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    connection: ConnectionCreateNestedOneWithoutNotesInput
  }

  export type NoteUncheckedCreateWithoutAuthorInput = {
    id?: string
    title: string
    content: string
    isTemporary?: boolean
    expiresAt?: Date | string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    connectionId: string
  }

  export type NoteCreateOrConnectWithoutAuthorInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutAuthorInput, NoteUncheckedCreateWithoutAuthorInput>
  }

  export type NoteCreateManyAuthorInputEnvelope = {
    data: NoteCreateManyAuthorInput | NoteCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type SpecialDayCreateWithoutUserInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    isRecurring?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isConfirmed?: boolean
    confirmedAt?: Date | string | null
    confirmedById?: string | null
    connection: ConnectionCreateNestedOneWithoutSpecialDaysInput
  }

  export type SpecialDayUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    isRecurring?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isConfirmed?: boolean
    confirmedAt?: Date | string | null
    confirmedById?: string | null
    connectionId: string
  }

  export type SpecialDayCreateOrConnectWithoutUserInput = {
    where: SpecialDayWhereUniqueInput
    create: XOR<SpecialDayCreateWithoutUserInput, SpecialDayUncheckedCreateWithoutUserInput>
  }

  export type SpecialDayCreateManyUserInputEnvelope = {
    data: SpecialDayCreateManyUserInput | SpecialDayCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GoalCreateWithoutUserInput = {
    id?: string
    title: string
    description?: string | null
    isCompleted?: boolean
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    connection: ConnectionCreateNestedOneWithoutGoalsInput
  }

  export type GoalUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    description?: string | null
    isCompleted?: boolean
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    connectionId: string
  }

  export type GoalCreateOrConnectWithoutUserInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput>
  }

  export type GoalCreateManyUserInputEnvelope = {
    data: GoalCreateManyUserInput | GoalCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DreamCreateWithoutUserInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    linkUrl?: string | null
    category?: $Enums.DreamCategory
    position?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    connection: ConnectionCreateNestedOneWithoutDreamsInput
    comments?: DreamCommentCreateNestedManyWithoutDreamInput
  }

  export type DreamUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    linkUrl?: string | null
    category?: $Enums.DreamCategory
    position?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    connectionId: string
    comments?: DreamCommentUncheckedCreateNestedManyWithoutDreamInput
  }

  export type DreamCreateOrConnectWithoutUserInput = {
    where: DreamWhereUniqueInput
    create: XOR<DreamCreateWithoutUserInput, DreamUncheckedCreateWithoutUserInput>
  }

  export type DreamCreateManyUserInputEnvelope = {
    data: DreamCreateManyUserInput | DreamCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DreamCommentCreateWithoutUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dream: DreamCreateNestedOneWithoutCommentsInput
  }

  export type DreamCommentUncheckedCreateWithoutUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dreamId: string
  }

  export type DreamCommentCreateOrConnectWithoutUserInput = {
    where: DreamCommentWhereUniqueInput
    create: XOR<DreamCommentCreateWithoutUserInput, DreamCommentUncheckedCreateWithoutUserInput>
  }

  export type DreamCommentCreateManyUserInputEnvelope = {
    data: DreamCommentCreateManyUserInput | DreamCommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    title: string
    body: string
    type: $Enums.NotificationType
    isRead?: boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    sentAt?: Date | string | null
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    body: string
    type: $Enums.NotificationType
    isRead?: boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    sentAt?: Date | string | null
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SurpriseCreateWithoutUserInput = {
    id?: string
    imageUrl: string
    message?: string | null
    createdAt?: Date | string
    isSeenByAuthor?: boolean
    isSeenByPartner?: boolean
    connection: ConnectionCreateNestedOneWithoutSurprisesInput
  }

  export type SurpriseUncheckedCreateWithoutUserInput = {
    id?: string
    imageUrl: string
    message?: string | null
    createdAt?: Date | string
    isSeenByAuthor?: boolean
    isSeenByPartner?: boolean
    connectionId: string
  }

  export type SurpriseCreateOrConnectWithoutUserInput = {
    where: SurpriseWhereUniqueInput
    create: XOR<SurpriseCreateWithoutUserInput, SurpriseUncheckedCreateWithoutUserInput>
  }

  export type SurpriseCreateManyUserInputEnvelope = {
    data: SurpriseCreateManyUserInput | SurpriseCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TimeCapsuleCreateWithoutUserInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    openDate: Date | string
    isOpened?: boolean
    openedAt?: Date | string | null
    connection: ConnectionCreateNestedOneWithoutTimeCapsulesInput
    comments?: TimeCapsuleCommentCreateNestedManyWithoutTimeCapsuleInput
  }

  export type TimeCapsuleUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    openDate: Date | string
    isOpened?: boolean
    openedAt?: Date | string | null
    connectionId: string
    comments?: TimeCapsuleCommentUncheckedCreateNestedManyWithoutTimeCapsuleInput
  }

  export type TimeCapsuleCreateOrConnectWithoutUserInput = {
    where: TimeCapsuleWhereUniqueInput
    create: XOR<TimeCapsuleCreateWithoutUserInput, TimeCapsuleUncheckedCreateWithoutUserInput>
  }

  export type TimeCapsuleCreateManyUserInputEnvelope = {
    data: TimeCapsuleCreateManyUserInput | TimeCapsuleCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TimeCapsuleCommentCreateWithoutUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    timeCapsule: TimeCapsuleCreateNestedOneWithoutCommentsInput
  }

  export type TimeCapsuleCommentUncheckedCreateWithoutUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    timeCapsuleId: string
  }

  export type TimeCapsuleCommentCreateOrConnectWithoutUserInput = {
    where: TimeCapsuleCommentWhereUniqueInput
    create: XOR<TimeCapsuleCommentCreateWithoutUserInput, TimeCapsuleCommentUncheckedCreateWithoutUserInput>
  }

  export type TimeCapsuleCommentCreateManyUserInputEnvelope = {
    data: TimeCapsuleCommentCreateManyUserInput | TimeCapsuleCommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ChatMessageCreateWithoutUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isRead?: boolean
    connection: ConnectionCreateNestedOneWithoutChatMessagesInput
  }

  export type ChatMessageUncheckedCreateWithoutUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isRead?: boolean
    connectionId: string
  }

  export type ChatMessageCreateOrConnectWithoutUserInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput>
  }

  export type ChatMessageCreateManyUserInputEnvelope = {
    data: ChatMessageCreateManyUserInput | ChatMessageCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ConnectionUpsertWithWhereUniqueWithoutUserInput = {
    where: ConnectionWhereUniqueInput
    update: XOR<ConnectionUpdateWithoutUserInput, ConnectionUncheckedUpdateWithoutUserInput>
    create: XOR<ConnectionCreateWithoutUserInput, ConnectionUncheckedCreateWithoutUserInput>
  }

  export type ConnectionUpdateWithWhereUniqueWithoutUserInput = {
    where: ConnectionWhereUniqueInput
    data: XOR<ConnectionUpdateWithoutUserInput, ConnectionUncheckedUpdateWithoutUserInput>
  }

  export type ConnectionUpdateManyWithWhereWithoutUserInput = {
    where: ConnectionScalarWhereInput
    data: XOR<ConnectionUpdateManyMutationInput, ConnectionUncheckedUpdateManyWithoutUserInput>
  }

  export type ConnectionScalarWhereInput = {
    AND?: ConnectionScalarWhereInput | ConnectionScalarWhereInput[]
    OR?: ConnectionScalarWhereInput[]
    NOT?: ConnectionScalarWhereInput | ConnectionScalarWhereInput[]
    id?: StringFilter<"Connection"> | string
    connectionCode?: StringFilter<"Connection"> | string
    createdAt?: DateTimeFilter<"Connection"> | Date | string
    updatedAt?: DateTimeFilter<"Connection"> | Date | string
    userId?: StringFilter<"Connection"> | string
    pairedWithId?: StringNullableFilter<"Connection"> | string | null
  }

  export type ConnectionUpsertWithWhereUniqueWithoutPairedWithInput = {
    where: ConnectionWhereUniqueInput
    update: XOR<ConnectionUpdateWithoutPairedWithInput, ConnectionUncheckedUpdateWithoutPairedWithInput>
    create: XOR<ConnectionCreateWithoutPairedWithInput, ConnectionUncheckedCreateWithoutPairedWithInput>
  }

  export type ConnectionUpdateWithWhereUniqueWithoutPairedWithInput = {
    where: ConnectionWhereUniqueInput
    data: XOR<ConnectionUpdateWithoutPairedWithInput, ConnectionUncheckedUpdateWithoutPairedWithInput>
  }

  export type ConnectionUpdateManyWithWhereWithoutPairedWithInput = {
    where: ConnectionScalarWhereInput
    data: XOR<ConnectionUpdateManyMutationInput, ConnectionUncheckedUpdateManyWithoutPairedWithInput>
  }

  export type MemoryUpsertWithWhereUniqueWithoutUserInput = {
    where: MemoryWhereUniqueInput
    update: XOR<MemoryUpdateWithoutUserInput, MemoryUncheckedUpdateWithoutUserInput>
    create: XOR<MemoryCreateWithoutUserInput, MemoryUncheckedCreateWithoutUserInput>
  }

  export type MemoryUpdateWithWhereUniqueWithoutUserInput = {
    where: MemoryWhereUniqueInput
    data: XOR<MemoryUpdateWithoutUserInput, MemoryUncheckedUpdateWithoutUserInput>
  }

  export type MemoryUpdateManyWithWhereWithoutUserInput = {
    where: MemoryScalarWhereInput
    data: XOR<MemoryUpdateManyMutationInput, MemoryUncheckedUpdateManyWithoutUserInput>
  }

  export type MemoryScalarWhereInput = {
    AND?: MemoryScalarWhereInput | MemoryScalarWhereInput[]
    OR?: MemoryScalarWhereInput[]
    NOT?: MemoryScalarWhereInput | MemoryScalarWhereInput[]
    id?: StringFilter<"Memory"> | string
    title?: StringFilter<"Memory"> | string
    description?: StringFilter<"Memory"> | string
    imageUrl?: StringNullableFilter<"Memory"> | string | null
    date?: DateTimeFilter<"Memory"> | Date | string
    createdAt?: DateTimeFilter<"Memory"> | Date | string
    updatedAt?: DateTimeFilter<"Memory"> | Date | string
    userId?: StringFilter<"Memory"> | string
    connectionId?: StringFilter<"Memory"> | string
  }

  export type NoteUpsertWithWhereUniqueWithoutAuthorInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUpdateWithoutAuthorInput, NoteUncheckedUpdateWithoutAuthorInput>
    create: XOR<NoteCreateWithoutAuthorInput, NoteUncheckedCreateWithoutAuthorInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutAuthorInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUpdateWithoutAuthorInput, NoteUncheckedUpdateWithoutAuthorInput>
  }

  export type NoteUpdateManyWithWhereWithoutAuthorInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyWithoutAuthorInput>
  }

  export type NoteScalarWhereInput = {
    AND?: NoteScalarWhereInput | NoteScalarWhereInput[]
    OR?: NoteScalarWhereInput[]
    NOT?: NoteScalarWhereInput | NoteScalarWhereInput[]
    id?: StringFilter<"Note"> | string
    title?: StringFilter<"Note"> | string
    content?: StringFilter<"Note"> | string
    isTemporary?: BoolFilter<"Note"> | boolean
    expiresAt?: DateTimeNullableFilter<"Note"> | Date | string | null
    rating?: IntNullableFilter<"Note"> | number | null
    createdAt?: DateTimeFilter<"Note"> | Date | string
    updatedAt?: DateTimeFilter<"Note"> | Date | string
    authorId?: StringFilter<"Note"> | string
    connectionId?: StringFilter<"Note"> | string
  }

  export type SpecialDayUpsertWithWhereUniqueWithoutUserInput = {
    where: SpecialDayWhereUniqueInput
    update: XOR<SpecialDayUpdateWithoutUserInput, SpecialDayUncheckedUpdateWithoutUserInput>
    create: XOR<SpecialDayCreateWithoutUserInput, SpecialDayUncheckedCreateWithoutUserInput>
  }

  export type SpecialDayUpdateWithWhereUniqueWithoutUserInput = {
    where: SpecialDayWhereUniqueInput
    data: XOR<SpecialDayUpdateWithoutUserInput, SpecialDayUncheckedUpdateWithoutUserInput>
  }

  export type SpecialDayUpdateManyWithWhereWithoutUserInput = {
    where: SpecialDayScalarWhereInput
    data: XOR<SpecialDayUpdateManyMutationInput, SpecialDayUncheckedUpdateManyWithoutUserInput>
  }

  export type SpecialDayScalarWhereInput = {
    AND?: SpecialDayScalarWhereInput | SpecialDayScalarWhereInput[]
    OR?: SpecialDayScalarWhereInput[]
    NOT?: SpecialDayScalarWhereInput | SpecialDayScalarWhereInput[]
    id?: StringFilter<"SpecialDay"> | string
    title?: StringFilter<"SpecialDay"> | string
    description?: StringNullableFilter<"SpecialDay"> | string | null
    date?: DateTimeFilter<"SpecialDay"> | Date | string
    isRecurring?: BoolFilter<"SpecialDay"> | boolean
    createdAt?: DateTimeFilter<"SpecialDay"> | Date | string
    updatedAt?: DateTimeFilter<"SpecialDay"> | Date | string
    isConfirmed?: BoolFilter<"SpecialDay"> | boolean
    confirmedAt?: DateTimeNullableFilter<"SpecialDay"> | Date | string | null
    confirmedById?: StringNullableFilter<"SpecialDay"> | string | null
    userId?: StringFilter<"SpecialDay"> | string
    connectionId?: StringFilter<"SpecialDay"> | string
  }

  export type GoalUpsertWithWhereUniqueWithoutUserInput = {
    where: GoalWhereUniqueInput
    update: XOR<GoalUpdateWithoutUserInput, GoalUncheckedUpdateWithoutUserInput>
    create: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput>
  }

  export type GoalUpdateWithWhereUniqueWithoutUserInput = {
    where: GoalWhereUniqueInput
    data: XOR<GoalUpdateWithoutUserInput, GoalUncheckedUpdateWithoutUserInput>
  }

  export type GoalUpdateManyWithWhereWithoutUserInput = {
    where: GoalScalarWhereInput
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyWithoutUserInput>
  }

  export type GoalScalarWhereInput = {
    AND?: GoalScalarWhereInput | GoalScalarWhereInput[]
    OR?: GoalScalarWhereInput[]
    NOT?: GoalScalarWhereInput | GoalScalarWhereInput[]
    id?: StringFilter<"Goal"> | string
    title?: StringFilter<"Goal"> | string
    description?: StringNullableFilter<"Goal"> | string | null
    isCompleted?: BoolFilter<"Goal"> | boolean
    dueDate?: DateTimeNullableFilter<"Goal"> | Date | string | null
    createdAt?: DateTimeFilter<"Goal"> | Date | string
    updatedAt?: DateTimeFilter<"Goal"> | Date | string
    userId?: StringFilter<"Goal"> | string
    connectionId?: StringFilter<"Goal"> | string
  }

  export type DreamUpsertWithWhereUniqueWithoutUserInput = {
    where: DreamWhereUniqueInput
    update: XOR<DreamUpdateWithoutUserInput, DreamUncheckedUpdateWithoutUserInput>
    create: XOR<DreamCreateWithoutUserInput, DreamUncheckedCreateWithoutUserInput>
  }

  export type DreamUpdateWithWhereUniqueWithoutUserInput = {
    where: DreamWhereUniqueInput
    data: XOR<DreamUpdateWithoutUserInput, DreamUncheckedUpdateWithoutUserInput>
  }

  export type DreamUpdateManyWithWhereWithoutUserInput = {
    where: DreamScalarWhereInput
    data: XOR<DreamUpdateManyMutationInput, DreamUncheckedUpdateManyWithoutUserInput>
  }

  export type DreamScalarWhereInput = {
    AND?: DreamScalarWhereInput | DreamScalarWhereInput[]
    OR?: DreamScalarWhereInput[]
    NOT?: DreamScalarWhereInput | DreamScalarWhereInput[]
    id?: StringFilter<"Dream"> | string
    title?: StringFilter<"Dream"> | string
    description?: StringFilter<"Dream"> | string
    imageUrl?: StringNullableFilter<"Dream"> | string | null
    linkUrl?: StringNullableFilter<"Dream"> | string | null
    category?: EnumDreamCategoryFilter<"Dream"> | $Enums.DreamCategory
    position?: IntFilter<"Dream"> | number
    createdAt?: DateTimeFilter<"Dream"> | Date | string
    updatedAt?: DateTimeFilter<"Dream"> | Date | string
    userId?: StringFilter<"Dream"> | string
    connectionId?: StringFilter<"Dream"> | string
  }

  export type DreamCommentUpsertWithWhereUniqueWithoutUserInput = {
    where: DreamCommentWhereUniqueInput
    update: XOR<DreamCommentUpdateWithoutUserInput, DreamCommentUncheckedUpdateWithoutUserInput>
    create: XOR<DreamCommentCreateWithoutUserInput, DreamCommentUncheckedCreateWithoutUserInput>
  }

  export type DreamCommentUpdateWithWhereUniqueWithoutUserInput = {
    where: DreamCommentWhereUniqueInput
    data: XOR<DreamCommentUpdateWithoutUserInput, DreamCommentUncheckedUpdateWithoutUserInput>
  }

  export type DreamCommentUpdateManyWithWhereWithoutUserInput = {
    where: DreamCommentScalarWhereInput
    data: XOR<DreamCommentUpdateManyMutationInput, DreamCommentUncheckedUpdateManyWithoutUserInput>
  }

  export type DreamCommentScalarWhereInput = {
    AND?: DreamCommentScalarWhereInput | DreamCommentScalarWhereInput[]
    OR?: DreamCommentScalarWhereInput[]
    NOT?: DreamCommentScalarWhereInput | DreamCommentScalarWhereInput[]
    id?: StringFilter<"DreamComment"> | string
    content?: StringFilter<"DreamComment"> | string
    createdAt?: DateTimeFilter<"DreamComment"> | Date | string
    updatedAt?: DateTimeFilter<"DreamComment"> | Date | string
    dreamId?: StringFilter<"DreamComment"> | string
    userId?: StringFilter<"DreamComment"> | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    body?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolFilter<"Notification"> | boolean
    data?: JsonNullableFilter<"Notification">
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    sentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    userId?: StringFilter<"Notification"> | string
  }

  export type SurpriseUpsertWithWhereUniqueWithoutUserInput = {
    where: SurpriseWhereUniqueInput
    update: XOR<SurpriseUpdateWithoutUserInput, SurpriseUncheckedUpdateWithoutUserInput>
    create: XOR<SurpriseCreateWithoutUserInput, SurpriseUncheckedCreateWithoutUserInput>
  }

  export type SurpriseUpdateWithWhereUniqueWithoutUserInput = {
    where: SurpriseWhereUniqueInput
    data: XOR<SurpriseUpdateWithoutUserInput, SurpriseUncheckedUpdateWithoutUserInput>
  }

  export type SurpriseUpdateManyWithWhereWithoutUserInput = {
    where: SurpriseScalarWhereInput
    data: XOR<SurpriseUpdateManyMutationInput, SurpriseUncheckedUpdateManyWithoutUserInput>
  }

  export type SurpriseScalarWhereInput = {
    AND?: SurpriseScalarWhereInput | SurpriseScalarWhereInput[]
    OR?: SurpriseScalarWhereInput[]
    NOT?: SurpriseScalarWhereInput | SurpriseScalarWhereInput[]
    id?: StringFilter<"Surprise"> | string
    imageUrl?: StringFilter<"Surprise"> | string
    message?: StringNullableFilter<"Surprise"> | string | null
    createdAt?: DateTimeFilter<"Surprise"> | Date | string
    isSeenByAuthor?: BoolFilter<"Surprise"> | boolean
    isSeenByPartner?: BoolFilter<"Surprise"> | boolean
    userId?: StringFilter<"Surprise"> | string
    connectionId?: StringFilter<"Surprise"> | string
  }

  export type TimeCapsuleUpsertWithWhereUniqueWithoutUserInput = {
    where: TimeCapsuleWhereUniqueInput
    update: XOR<TimeCapsuleUpdateWithoutUserInput, TimeCapsuleUncheckedUpdateWithoutUserInput>
    create: XOR<TimeCapsuleCreateWithoutUserInput, TimeCapsuleUncheckedCreateWithoutUserInput>
  }

  export type TimeCapsuleUpdateWithWhereUniqueWithoutUserInput = {
    where: TimeCapsuleWhereUniqueInput
    data: XOR<TimeCapsuleUpdateWithoutUserInput, TimeCapsuleUncheckedUpdateWithoutUserInput>
  }

  export type TimeCapsuleUpdateManyWithWhereWithoutUserInput = {
    where: TimeCapsuleScalarWhereInput
    data: XOR<TimeCapsuleUpdateManyMutationInput, TimeCapsuleUncheckedUpdateManyWithoutUserInput>
  }

  export type TimeCapsuleScalarWhereInput = {
    AND?: TimeCapsuleScalarWhereInput | TimeCapsuleScalarWhereInput[]
    OR?: TimeCapsuleScalarWhereInput[]
    NOT?: TimeCapsuleScalarWhereInput | TimeCapsuleScalarWhereInput[]
    id?: StringFilter<"TimeCapsule"> | string
    title?: StringFilter<"TimeCapsule"> | string
    description?: StringFilter<"TimeCapsule"> | string
    imageUrl?: StringNullableFilter<"TimeCapsule"> | string | null
    content?: StringFilter<"TimeCapsule"> | string
    createdAt?: DateTimeFilter<"TimeCapsule"> | Date | string
    updatedAt?: DateTimeFilter<"TimeCapsule"> | Date | string
    openDate?: DateTimeFilter<"TimeCapsule"> | Date | string
    isOpened?: BoolFilter<"TimeCapsule"> | boolean
    openedAt?: DateTimeNullableFilter<"TimeCapsule"> | Date | string | null
    userId?: StringFilter<"TimeCapsule"> | string
    connectionId?: StringFilter<"TimeCapsule"> | string
  }

  export type TimeCapsuleCommentUpsertWithWhereUniqueWithoutUserInput = {
    where: TimeCapsuleCommentWhereUniqueInput
    update: XOR<TimeCapsuleCommentUpdateWithoutUserInput, TimeCapsuleCommentUncheckedUpdateWithoutUserInput>
    create: XOR<TimeCapsuleCommentCreateWithoutUserInput, TimeCapsuleCommentUncheckedCreateWithoutUserInput>
  }

  export type TimeCapsuleCommentUpdateWithWhereUniqueWithoutUserInput = {
    where: TimeCapsuleCommentWhereUniqueInput
    data: XOR<TimeCapsuleCommentUpdateWithoutUserInput, TimeCapsuleCommentUncheckedUpdateWithoutUserInput>
  }

  export type TimeCapsuleCommentUpdateManyWithWhereWithoutUserInput = {
    where: TimeCapsuleCommentScalarWhereInput
    data: XOR<TimeCapsuleCommentUpdateManyMutationInput, TimeCapsuleCommentUncheckedUpdateManyWithoutUserInput>
  }

  export type TimeCapsuleCommentScalarWhereInput = {
    AND?: TimeCapsuleCommentScalarWhereInput | TimeCapsuleCommentScalarWhereInput[]
    OR?: TimeCapsuleCommentScalarWhereInput[]
    NOT?: TimeCapsuleCommentScalarWhereInput | TimeCapsuleCommentScalarWhereInput[]
    id?: StringFilter<"TimeCapsuleComment"> | string
    content?: StringFilter<"TimeCapsuleComment"> | string
    createdAt?: DateTimeFilter<"TimeCapsuleComment"> | Date | string
    updatedAt?: DateTimeFilter<"TimeCapsuleComment"> | Date | string
    timeCapsuleId?: StringFilter<"TimeCapsuleComment"> | string
    userId?: StringFilter<"TimeCapsuleComment"> | string
  }

  export type ChatMessageUpsertWithWhereUniqueWithoutUserInput = {
    where: ChatMessageWhereUniqueInput
    update: XOR<ChatMessageUpdateWithoutUserInput, ChatMessageUncheckedUpdateWithoutUserInput>
    create: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput>
  }

  export type ChatMessageUpdateWithWhereUniqueWithoutUserInput = {
    where: ChatMessageWhereUniqueInput
    data: XOR<ChatMessageUpdateWithoutUserInput, ChatMessageUncheckedUpdateWithoutUserInput>
  }

  export type ChatMessageUpdateManyWithWhereWithoutUserInput = {
    where: ChatMessageScalarWhereInput
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyWithoutUserInput>
  }

  export type ChatMessageScalarWhereInput = {
    AND?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    OR?: ChatMessageScalarWhereInput[]
    NOT?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    id?: StringFilter<"ChatMessage"> | string
    content?: StringFilter<"ChatMessage"> | string
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    updatedAt?: DateTimeFilter<"ChatMessage"> | Date | string
    isRead?: BoolFilter<"ChatMessage"> | boolean
    userId?: StringFilter<"ChatMessage"> | string
    connectionId?: StringFilter<"ChatMessage"> | string
  }

  export type UserCreateWithoutReceivedNotificationsInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionCreateNestedManyWithoutPairedWithInput
    memories?: MemoryCreateNestedManyWithoutUserInput
    notes?: NoteCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    dreams?: DreamCreateNestedManyWithoutUserInput
    comments?: DreamCommentCreateNestedManyWithoutUserInput
    surprises?: SurpriseCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReceivedNotificationsInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionUncheckedCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionUncheckedCreateNestedManyWithoutPairedWithInput
    memories?: MemoryUncheckedCreateNestedManyWithoutUserInput
    notes?: NoteUncheckedCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    dreams?: DreamUncheckedCreateNestedManyWithoutUserInput
    comments?: DreamCommentUncheckedCreateNestedManyWithoutUserInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReceivedNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedNotificationsInput, UserUncheckedCreateWithoutReceivedNotificationsInput>
  }

  export type UserUpsertWithoutReceivedNotificationsInput = {
    update: XOR<UserUpdateWithoutReceivedNotificationsInput, UserUncheckedUpdateWithoutReceivedNotificationsInput>
    create: XOR<UserCreateWithoutReceivedNotificationsInput, UserUncheckedCreateWithoutReceivedNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedNotificationsInput, UserUncheckedUpdateWithoutReceivedNotificationsInput>
  }

  export type UserUpdateWithoutReceivedNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUpdateManyWithoutUserNestedInput
    notes?: NoteUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    dreams?: DreamUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUncheckedUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUncheckedUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUncheckedUpdateManyWithoutUserNestedInput
    notes?: NoteUncheckedUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUncheckedUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutConnectionsInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    pairedWith?: ConnectionCreateNestedManyWithoutPairedWithInput
    memories?: MemoryCreateNestedManyWithoutUserInput
    notes?: NoteCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    dreams?: DreamCreateNestedManyWithoutUserInput
    comments?: DreamCommentCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    surprises?: SurpriseCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutConnectionsInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    pairedWith?: ConnectionUncheckedCreateNestedManyWithoutPairedWithInput
    memories?: MemoryUncheckedCreateNestedManyWithoutUserInput
    notes?: NoteUncheckedCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    dreams?: DreamUncheckedCreateNestedManyWithoutUserInput
    comments?: DreamCommentUncheckedCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutConnectionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutConnectionsInput, UserUncheckedCreateWithoutConnectionsInput>
  }

  export type UserCreateWithoutPairedWithInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionCreateNestedManyWithoutUserInput
    memories?: MemoryCreateNestedManyWithoutUserInput
    notes?: NoteCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    dreams?: DreamCreateNestedManyWithoutUserInput
    comments?: DreamCommentCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    surprises?: SurpriseCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPairedWithInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionUncheckedCreateNestedManyWithoutUserInput
    memories?: MemoryUncheckedCreateNestedManyWithoutUserInput
    notes?: NoteUncheckedCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    dreams?: DreamUncheckedCreateNestedManyWithoutUserInput
    comments?: DreamCommentUncheckedCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPairedWithInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPairedWithInput, UserUncheckedCreateWithoutPairedWithInput>
  }

  export type MemoryCreateWithoutConnectionInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMemoriesInput
  }

  export type MemoryUncheckedCreateWithoutConnectionInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type MemoryCreateOrConnectWithoutConnectionInput = {
    where: MemoryWhereUniqueInput
    create: XOR<MemoryCreateWithoutConnectionInput, MemoryUncheckedCreateWithoutConnectionInput>
  }

  export type MemoryCreateManyConnectionInputEnvelope = {
    data: MemoryCreateManyConnectionInput | MemoryCreateManyConnectionInput[]
    skipDuplicates?: boolean
  }

  export type NoteCreateWithoutConnectionInput = {
    id?: string
    title: string
    content: string
    isTemporary?: boolean
    expiresAt?: Date | string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutNotesInput
  }

  export type NoteUncheckedCreateWithoutConnectionInput = {
    id?: string
    title: string
    content: string
    isTemporary?: boolean
    expiresAt?: Date | string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
  }

  export type NoteCreateOrConnectWithoutConnectionInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutConnectionInput, NoteUncheckedCreateWithoutConnectionInput>
  }

  export type NoteCreateManyConnectionInputEnvelope = {
    data: NoteCreateManyConnectionInput | NoteCreateManyConnectionInput[]
    skipDuplicates?: boolean
  }

  export type SpecialDayCreateWithoutConnectionInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    isRecurring?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isConfirmed?: boolean
    confirmedAt?: Date | string | null
    confirmedById?: string | null
    user: UserCreateNestedOneWithoutSpecialDaysInput
  }

  export type SpecialDayUncheckedCreateWithoutConnectionInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    isRecurring?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isConfirmed?: boolean
    confirmedAt?: Date | string | null
    confirmedById?: string | null
    userId: string
  }

  export type SpecialDayCreateOrConnectWithoutConnectionInput = {
    where: SpecialDayWhereUniqueInput
    create: XOR<SpecialDayCreateWithoutConnectionInput, SpecialDayUncheckedCreateWithoutConnectionInput>
  }

  export type SpecialDayCreateManyConnectionInputEnvelope = {
    data: SpecialDayCreateManyConnectionInput | SpecialDayCreateManyConnectionInput[]
    skipDuplicates?: boolean
  }

  export type GoalCreateWithoutConnectionInput = {
    id?: string
    title: string
    description?: string | null
    isCompleted?: boolean
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutGoalsInput
  }

  export type GoalUncheckedCreateWithoutConnectionInput = {
    id?: string
    title: string
    description?: string | null
    isCompleted?: boolean
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type GoalCreateOrConnectWithoutConnectionInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutConnectionInput, GoalUncheckedCreateWithoutConnectionInput>
  }

  export type GoalCreateManyConnectionInputEnvelope = {
    data: GoalCreateManyConnectionInput | GoalCreateManyConnectionInput[]
    skipDuplicates?: boolean
  }

  export type DreamCreateWithoutConnectionInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    linkUrl?: string | null
    category?: $Enums.DreamCategory
    position?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDreamsInput
    comments?: DreamCommentCreateNestedManyWithoutDreamInput
  }

  export type DreamUncheckedCreateWithoutConnectionInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    linkUrl?: string | null
    category?: $Enums.DreamCategory
    position?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    comments?: DreamCommentUncheckedCreateNestedManyWithoutDreamInput
  }

  export type DreamCreateOrConnectWithoutConnectionInput = {
    where: DreamWhereUniqueInput
    create: XOR<DreamCreateWithoutConnectionInput, DreamUncheckedCreateWithoutConnectionInput>
  }

  export type DreamCreateManyConnectionInputEnvelope = {
    data: DreamCreateManyConnectionInput | DreamCreateManyConnectionInput[]
    skipDuplicates?: boolean
  }

  export type TreeCreateWithoutConnectionInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    growthLevel?: number
    lastWatered?: Date | string
    growthXP?: number
  }

  export type TreeUncheckedCreateWithoutConnectionInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    growthLevel?: number
    lastWatered?: Date | string
    growthXP?: number
  }

  export type TreeCreateOrConnectWithoutConnectionInput = {
    where: TreeWhereUniqueInput
    create: XOR<TreeCreateWithoutConnectionInput, TreeUncheckedCreateWithoutConnectionInput>
  }

  export type SurpriseCreateWithoutConnectionInput = {
    id?: string
    imageUrl: string
    message?: string | null
    createdAt?: Date | string
    isSeenByAuthor?: boolean
    isSeenByPartner?: boolean
    user: UserCreateNestedOneWithoutSurprisesInput
  }

  export type SurpriseUncheckedCreateWithoutConnectionInput = {
    id?: string
    imageUrl: string
    message?: string | null
    createdAt?: Date | string
    isSeenByAuthor?: boolean
    isSeenByPartner?: boolean
    userId: string
  }

  export type SurpriseCreateOrConnectWithoutConnectionInput = {
    where: SurpriseWhereUniqueInput
    create: XOR<SurpriseCreateWithoutConnectionInput, SurpriseUncheckedCreateWithoutConnectionInput>
  }

  export type SurpriseCreateManyConnectionInputEnvelope = {
    data: SurpriseCreateManyConnectionInput | SurpriseCreateManyConnectionInput[]
    skipDuplicates?: boolean
  }

  export type TimeCapsuleCreateWithoutConnectionInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    openDate: Date | string
    isOpened?: boolean
    openedAt?: Date | string | null
    user: UserCreateNestedOneWithoutTimeCapsulesInput
    comments?: TimeCapsuleCommentCreateNestedManyWithoutTimeCapsuleInput
  }

  export type TimeCapsuleUncheckedCreateWithoutConnectionInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    openDate: Date | string
    isOpened?: boolean
    openedAt?: Date | string | null
    userId: string
    comments?: TimeCapsuleCommentUncheckedCreateNestedManyWithoutTimeCapsuleInput
  }

  export type TimeCapsuleCreateOrConnectWithoutConnectionInput = {
    where: TimeCapsuleWhereUniqueInput
    create: XOR<TimeCapsuleCreateWithoutConnectionInput, TimeCapsuleUncheckedCreateWithoutConnectionInput>
  }

  export type TimeCapsuleCreateManyConnectionInputEnvelope = {
    data: TimeCapsuleCreateManyConnectionInput | TimeCapsuleCreateManyConnectionInput[]
    skipDuplicates?: boolean
  }

  export type ChatMessageCreateWithoutConnectionInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isRead?: boolean
    user: UserCreateNestedOneWithoutChatMessagesInput
  }

  export type ChatMessageUncheckedCreateWithoutConnectionInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isRead?: boolean
    userId: string
  }

  export type ChatMessageCreateOrConnectWithoutConnectionInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutConnectionInput, ChatMessageUncheckedCreateWithoutConnectionInput>
  }

  export type ChatMessageCreateManyConnectionInputEnvelope = {
    data: ChatMessageCreateManyConnectionInput | ChatMessageCreateManyConnectionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutConnectionsInput = {
    update: XOR<UserUpdateWithoutConnectionsInput, UserUncheckedUpdateWithoutConnectionsInput>
    create: XOR<UserCreateWithoutConnectionsInput, UserUncheckedCreateWithoutConnectionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutConnectionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutConnectionsInput, UserUncheckedUpdateWithoutConnectionsInput>
  }

  export type UserUpdateWithoutConnectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    pairedWith?: ConnectionUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUpdateManyWithoutUserNestedInput
    notes?: NoteUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    dreams?: DreamUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutConnectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    pairedWith?: ConnectionUncheckedUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUncheckedUpdateManyWithoutUserNestedInput
    notes?: NoteUncheckedUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUncheckedUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutPairedWithInput = {
    update: XOR<UserUpdateWithoutPairedWithInput, UserUncheckedUpdateWithoutPairedWithInput>
    create: XOR<UserCreateWithoutPairedWithInput, UserUncheckedCreateWithoutPairedWithInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPairedWithInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPairedWithInput, UserUncheckedUpdateWithoutPairedWithInput>
  }

  export type UserUpdateWithoutPairedWithInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUpdateManyWithoutUserNestedInput
    memories?: MemoryUpdateManyWithoutUserNestedInput
    notes?: NoteUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    dreams?: DreamUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPairedWithInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUncheckedUpdateManyWithoutUserNestedInput
    memories?: MemoryUncheckedUpdateManyWithoutUserNestedInput
    notes?: NoteUncheckedUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUncheckedUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MemoryUpsertWithWhereUniqueWithoutConnectionInput = {
    where: MemoryWhereUniqueInput
    update: XOR<MemoryUpdateWithoutConnectionInput, MemoryUncheckedUpdateWithoutConnectionInput>
    create: XOR<MemoryCreateWithoutConnectionInput, MemoryUncheckedCreateWithoutConnectionInput>
  }

  export type MemoryUpdateWithWhereUniqueWithoutConnectionInput = {
    where: MemoryWhereUniqueInput
    data: XOR<MemoryUpdateWithoutConnectionInput, MemoryUncheckedUpdateWithoutConnectionInput>
  }

  export type MemoryUpdateManyWithWhereWithoutConnectionInput = {
    where: MemoryScalarWhereInput
    data: XOR<MemoryUpdateManyMutationInput, MemoryUncheckedUpdateManyWithoutConnectionInput>
  }

  export type NoteUpsertWithWhereUniqueWithoutConnectionInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUpdateWithoutConnectionInput, NoteUncheckedUpdateWithoutConnectionInput>
    create: XOR<NoteCreateWithoutConnectionInput, NoteUncheckedCreateWithoutConnectionInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutConnectionInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUpdateWithoutConnectionInput, NoteUncheckedUpdateWithoutConnectionInput>
  }

  export type NoteUpdateManyWithWhereWithoutConnectionInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyWithoutConnectionInput>
  }

  export type SpecialDayUpsertWithWhereUniqueWithoutConnectionInput = {
    where: SpecialDayWhereUniqueInput
    update: XOR<SpecialDayUpdateWithoutConnectionInput, SpecialDayUncheckedUpdateWithoutConnectionInput>
    create: XOR<SpecialDayCreateWithoutConnectionInput, SpecialDayUncheckedCreateWithoutConnectionInput>
  }

  export type SpecialDayUpdateWithWhereUniqueWithoutConnectionInput = {
    where: SpecialDayWhereUniqueInput
    data: XOR<SpecialDayUpdateWithoutConnectionInput, SpecialDayUncheckedUpdateWithoutConnectionInput>
  }

  export type SpecialDayUpdateManyWithWhereWithoutConnectionInput = {
    where: SpecialDayScalarWhereInput
    data: XOR<SpecialDayUpdateManyMutationInput, SpecialDayUncheckedUpdateManyWithoutConnectionInput>
  }

  export type GoalUpsertWithWhereUniqueWithoutConnectionInput = {
    where: GoalWhereUniqueInput
    update: XOR<GoalUpdateWithoutConnectionInput, GoalUncheckedUpdateWithoutConnectionInput>
    create: XOR<GoalCreateWithoutConnectionInput, GoalUncheckedCreateWithoutConnectionInput>
  }

  export type GoalUpdateWithWhereUniqueWithoutConnectionInput = {
    where: GoalWhereUniqueInput
    data: XOR<GoalUpdateWithoutConnectionInput, GoalUncheckedUpdateWithoutConnectionInput>
  }

  export type GoalUpdateManyWithWhereWithoutConnectionInput = {
    where: GoalScalarWhereInput
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyWithoutConnectionInput>
  }

  export type DreamUpsertWithWhereUniqueWithoutConnectionInput = {
    where: DreamWhereUniqueInput
    update: XOR<DreamUpdateWithoutConnectionInput, DreamUncheckedUpdateWithoutConnectionInput>
    create: XOR<DreamCreateWithoutConnectionInput, DreamUncheckedCreateWithoutConnectionInput>
  }

  export type DreamUpdateWithWhereUniqueWithoutConnectionInput = {
    where: DreamWhereUniqueInput
    data: XOR<DreamUpdateWithoutConnectionInput, DreamUncheckedUpdateWithoutConnectionInput>
  }

  export type DreamUpdateManyWithWhereWithoutConnectionInput = {
    where: DreamScalarWhereInput
    data: XOR<DreamUpdateManyMutationInput, DreamUncheckedUpdateManyWithoutConnectionInput>
  }

  export type TreeUpsertWithoutConnectionInput = {
    update: XOR<TreeUpdateWithoutConnectionInput, TreeUncheckedUpdateWithoutConnectionInput>
    create: XOR<TreeCreateWithoutConnectionInput, TreeUncheckedCreateWithoutConnectionInput>
    where?: TreeWhereInput
  }

  export type TreeUpdateToOneWithWhereWithoutConnectionInput = {
    where?: TreeWhereInput
    data: XOR<TreeUpdateWithoutConnectionInput, TreeUncheckedUpdateWithoutConnectionInput>
  }

  export type TreeUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    growthLevel?: IntFieldUpdateOperationsInput | number
    lastWatered?: DateTimeFieldUpdateOperationsInput | Date | string
    growthXP?: IntFieldUpdateOperationsInput | number
  }

  export type TreeUncheckedUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    growthLevel?: IntFieldUpdateOperationsInput | number
    lastWatered?: DateTimeFieldUpdateOperationsInput | Date | string
    growthXP?: IntFieldUpdateOperationsInput | number
  }

  export type SurpriseUpsertWithWhereUniqueWithoutConnectionInput = {
    where: SurpriseWhereUniqueInput
    update: XOR<SurpriseUpdateWithoutConnectionInput, SurpriseUncheckedUpdateWithoutConnectionInput>
    create: XOR<SurpriseCreateWithoutConnectionInput, SurpriseUncheckedCreateWithoutConnectionInput>
  }

  export type SurpriseUpdateWithWhereUniqueWithoutConnectionInput = {
    where: SurpriseWhereUniqueInput
    data: XOR<SurpriseUpdateWithoutConnectionInput, SurpriseUncheckedUpdateWithoutConnectionInput>
  }

  export type SurpriseUpdateManyWithWhereWithoutConnectionInput = {
    where: SurpriseScalarWhereInput
    data: XOR<SurpriseUpdateManyMutationInput, SurpriseUncheckedUpdateManyWithoutConnectionInput>
  }

  export type TimeCapsuleUpsertWithWhereUniqueWithoutConnectionInput = {
    where: TimeCapsuleWhereUniqueInput
    update: XOR<TimeCapsuleUpdateWithoutConnectionInput, TimeCapsuleUncheckedUpdateWithoutConnectionInput>
    create: XOR<TimeCapsuleCreateWithoutConnectionInput, TimeCapsuleUncheckedCreateWithoutConnectionInput>
  }

  export type TimeCapsuleUpdateWithWhereUniqueWithoutConnectionInput = {
    where: TimeCapsuleWhereUniqueInput
    data: XOR<TimeCapsuleUpdateWithoutConnectionInput, TimeCapsuleUncheckedUpdateWithoutConnectionInput>
  }

  export type TimeCapsuleUpdateManyWithWhereWithoutConnectionInput = {
    where: TimeCapsuleScalarWhereInput
    data: XOR<TimeCapsuleUpdateManyMutationInput, TimeCapsuleUncheckedUpdateManyWithoutConnectionInput>
  }

  export type ChatMessageUpsertWithWhereUniqueWithoutConnectionInput = {
    where: ChatMessageWhereUniqueInput
    update: XOR<ChatMessageUpdateWithoutConnectionInput, ChatMessageUncheckedUpdateWithoutConnectionInput>
    create: XOR<ChatMessageCreateWithoutConnectionInput, ChatMessageUncheckedCreateWithoutConnectionInput>
  }

  export type ChatMessageUpdateWithWhereUniqueWithoutConnectionInput = {
    where: ChatMessageWhereUniqueInput
    data: XOR<ChatMessageUpdateWithoutConnectionInput, ChatMessageUncheckedUpdateWithoutConnectionInput>
  }

  export type ChatMessageUpdateManyWithWhereWithoutConnectionInput = {
    where: ChatMessageScalarWhereInput
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyWithoutConnectionInput>
  }

  export type ConnectionCreateWithoutTreeInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConnectionsInput
    pairedWith?: UserCreateNestedOneWithoutPairedWithInput
    memories?: MemoryCreateNestedManyWithoutConnectionInput
    notes?: NoteCreateNestedManyWithoutConnectionInput
    specialDays?: SpecialDayCreateNestedManyWithoutConnectionInput
    goals?: GoalCreateNestedManyWithoutConnectionInput
    dreams?: DreamCreateNestedManyWithoutConnectionInput
    surprises?: SurpriseCreateNestedManyWithoutConnectionInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutConnectionInput
    chatMessages?: ChatMessageCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionUncheckedCreateWithoutTreeInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    pairedWithId?: string | null
    memories?: MemoryUncheckedCreateNestedManyWithoutConnectionInput
    notes?: NoteUncheckedCreateNestedManyWithoutConnectionInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutConnectionInput
    goals?: GoalUncheckedCreateNestedManyWithoutConnectionInput
    dreams?: DreamUncheckedCreateNestedManyWithoutConnectionInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutConnectionInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutConnectionInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionCreateOrConnectWithoutTreeInput = {
    where: ConnectionWhereUniqueInput
    create: XOR<ConnectionCreateWithoutTreeInput, ConnectionUncheckedCreateWithoutTreeInput>
  }

  export type ConnectionUpsertWithoutTreeInput = {
    update: XOR<ConnectionUpdateWithoutTreeInput, ConnectionUncheckedUpdateWithoutTreeInput>
    create: XOR<ConnectionCreateWithoutTreeInput, ConnectionUncheckedCreateWithoutTreeInput>
    where?: ConnectionWhereInput
  }

  export type ConnectionUpdateToOneWithWhereWithoutTreeInput = {
    where?: ConnectionWhereInput
    data: XOR<ConnectionUpdateWithoutTreeInput, ConnectionUncheckedUpdateWithoutTreeInput>
  }

  export type ConnectionUpdateWithoutTreeInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConnectionsNestedInput
    pairedWith?: UserUpdateOneWithoutPairedWithNestedInput
    memories?: MemoryUpdateManyWithoutConnectionNestedInput
    notes?: NoteUpdateManyWithoutConnectionNestedInput
    specialDays?: SpecialDayUpdateManyWithoutConnectionNestedInput
    goals?: GoalUpdateManyWithoutConnectionNestedInput
    dreams?: DreamUpdateManyWithoutConnectionNestedInput
    surprises?: SurpriseUpdateManyWithoutConnectionNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutConnectionNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutConnectionNestedInput
  }

  export type ConnectionUncheckedUpdateWithoutTreeInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    pairedWithId?: NullableStringFieldUpdateOperationsInput | string | null
    memories?: MemoryUncheckedUpdateManyWithoutConnectionNestedInput
    notes?: NoteUncheckedUpdateManyWithoutConnectionNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutConnectionNestedInput
    goals?: GoalUncheckedUpdateManyWithoutConnectionNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutConnectionNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutConnectionNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutConnectionNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutConnectionNestedInput
  }

  export type UserCreateWithoutMemoriesInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionCreateNestedManyWithoutPairedWithInput
    notes?: NoteCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    dreams?: DreamCreateNestedManyWithoutUserInput
    comments?: DreamCommentCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    surprises?: SurpriseCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMemoriesInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionUncheckedCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionUncheckedCreateNestedManyWithoutPairedWithInput
    notes?: NoteUncheckedCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    dreams?: DreamUncheckedCreateNestedManyWithoutUserInput
    comments?: DreamCommentUncheckedCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMemoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMemoriesInput, UserUncheckedCreateWithoutMemoriesInput>
  }

  export type ConnectionCreateWithoutMemoriesInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConnectionsInput
    pairedWith?: UserCreateNestedOneWithoutPairedWithInput
    notes?: NoteCreateNestedManyWithoutConnectionInput
    specialDays?: SpecialDayCreateNestedManyWithoutConnectionInput
    goals?: GoalCreateNestedManyWithoutConnectionInput
    dreams?: DreamCreateNestedManyWithoutConnectionInput
    tree?: TreeCreateNestedOneWithoutConnectionInput
    surprises?: SurpriseCreateNestedManyWithoutConnectionInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutConnectionInput
    chatMessages?: ChatMessageCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionUncheckedCreateWithoutMemoriesInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    pairedWithId?: string | null
    notes?: NoteUncheckedCreateNestedManyWithoutConnectionInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutConnectionInput
    goals?: GoalUncheckedCreateNestedManyWithoutConnectionInput
    dreams?: DreamUncheckedCreateNestedManyWithoutConnectionInput
    tree?: TreeUncheckedCreateNestedOneWithoutConnectionInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutConnectionInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutConnectionInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionCreateOrConnectWithoutMemoriesInput = {
    where: ConnectionWhereUniqueInput
    create: XOR<ConnectionCreateWithoutMemoriesInput, ConnectionUncheckedCreateWithoutMemoriesInput>
  }

  export type UserUpsertWithoutMemoriesInput = {
    update: XOR<UserUpdateWithoutMemoriesInput, UserUncheckedUpdateWithoutMemoriesInput>
    create: XOR<UserCreateWithoutMemoriesInput, UserUncheckedCreateWithoutMemoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMemoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMemoriesInput, UserUncheckedUpdateWithoutMemoriesInput>
  }

  export type UserUpdateWithoutMemoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUpdateManyWithoutPairedWithNestedInput
    notes?: NoteUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    dreams?: DreamUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMemoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUncheckedUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUncheckedUpdateManyWithoutPairedWithNestedInput
    notes?: NoteUncheckedUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUncheckedUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ConnectionUpsertWithoutMemoriesInput = {
    update: XOR<ConnectionUpdateWithoutMemoriesInput, ConnectionUncheckedUpdateWithoutMemoriesInput>
    create: XOR<ConnectionCreateWithoutMemoriesInput, ConnectionUncheckedCreateWithoutMemoriesInput>
    where?: ConnectionWhereInput
  }

  export type ConnectionUpdateToOneWithWhereWithoutMemoriesInput = {
    where?: ConnectionWhereInput
    data: XOR<ConnectionUpdateWithoutMemoriesInput, ConnectionUncheckedUpdateWithoutMemoriesInput>
  }

  export type ConnectionUpdateWithoutMemoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConnectionsNestedInput
    pairedWith?: UserUpdateOneWithoutPairedWithNestedInput
    notes?: NoteUpdateManyWithoutConnectionNestedInput
    specialDays?: SpecialDayUpdateManyWithoutConnectionNestedInput
    goals?: GoalUpdateManyWithoutConnectionNestedInput
    dreams?: DreamUpdateManyWithoutConnectionNestedInput
    tree?: TreeUpdateOneWithoutConnectionNestedInput
    surprises?: SurpriseUpdateManyWithoutConnectionNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutConnectionNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutConnectionNestedInput
  }

  export type ConnectionUncheckedUpdateWithoutMemoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    pairedWithId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NoteUncheckedUpdateManyWithoutConnectionNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutConnectionNestedInput
    goals?: GoalUncheckedUpdateManyWithoutConnectionNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutConnectionNestedInput
    tree?: TreeUncheckedUpdateOneWithoutConnectionNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutConnectionNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutConnectionNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutConnectionNestedInput
  }

  export type UserCreateWithoutNotesInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionCreateNestedManyWithoutPairedWithInput
    memories?: MemoryCreateNestedManyWithoutUserInput
    specialDays?: SpecialDayCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    dreams?: DreamCreateNestedManyWithoutUserInput
    comments?: DreamCommentCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    surprises?: SurpriseCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotesInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionUncheckedCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionUncheckedCreateNestedManyWithoutPairedWithInput
    memories?: MemoryUncheckedCreateNestedManyWithoutUserInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    dreams?: DreamUncheckedCreateNestedManyWithoutUserInput
    comments?: DreamCommentUncheckedCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotesInput, UserUncheckedCreateWithoutNotesInput>
  }

  export type ConnectionCreateWithoutNotesInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConnectionsInput
    pairedWith?: UserCreateNestedOneWithoutPairedWithInput
    memories?: MemoryCreateNestedManyWithoutConnectionInput
    specialDays?: SpecialDayCreateNestedManyWithoutConnectionInput
    goals?: GoalCreateNestedManyWithoutConnectionInput
    dreams?: DreamCreateNestedManyWithoutConnectionInput
    tree?: TreeCreateNestedOneWithoutConnectionInput
    surprises?: SurpriseCreateNestedManyWithoutConnectionInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutConnectionInput
    chatMessages?: ChatMessageCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionUncheckedCreateWithoutNotesInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    pairedWithId?: string | null
    memories?: MemoryUncheckedCreateNestedManyWithoutConnectionInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutConnectionInput
    goals?: GoalUncheckedCreateNestedManyWithoutConnectionInput
    dreams?: DreamUncheckedCreateNestedManyWithoutConnectionInput
    tree?: TreeUncheckedCreateNestedOneWithoutConnectionInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutConnectionInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutConnectionInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionCreateOrConnectWithoutNotesInput = {
    where: ConnectionWhereUniqueInput
    create: XOR<ConnectionCreateWithoutNotesInput, ConnectionUncheckedCreateWithoutNotesInput>
  }

  export type UserUpsertWithoutNotesInput = {
    update: XOR<UserUpdateWithoutNotesInput, UserUncheckedUpdateWithoutNotesInput>
    create: XOR<UserCreateWithoutNotesInput, UserUncheckedCreateWithoutNotesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotesInput, UserUncheckedUpdateWithoutNotesInput>
  }

  export type UserUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUpdateManyWithoutUserNestedInput
    specialDays?: SpecialDayUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    dreams?: DreamUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUncheckedUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUncheckedUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUncheckedUpdateManyWithoutUserNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUncheckedUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ConnectionUpsertWithoutNotesInput = {
    update: XOR<ConnectionUpdateWithoutNotesInput, ConnectionUncheckedUpdateWithoutNotesInput>
    create: XOR<ConnectionCreateWithoutNotesInput, ConnectionUncheckedCreateWithoutNotesInput>
    where?: ConnectionWhereInput
  }

  export type ConnectionUpdateToOneWithWhereWithoutNotesInput = {
    where?: ConnectionWhereInput
    data: XOR<ConnectionUpdateWithoutNotesInput, ConnectionUncheckedUpdateWithoutNotesInput>
  }

  export type ConnectionUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConnectionsNestedInput
    pairedWith?: UserUpdateOneWithoutPairedWithNestedInput
    memories?: MemoryUpdateManyWithoutConnectionNestedInput
    specialDays?: SpecialDayUpdateManyWithoutConnectionNestedInput
    goals?: GoalUpdateManyWithoutConnectionNestedInput
    dreams?: DreamUpdateManyWithoutConnectionNestedInput
    tree?: TreeUpdateOneWithoutConnectionNestedInput
    surprises?: SurpriseUpdateManyWithoutConnectionNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutConnectionNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutConnectionNestedInput
  }

  export type ConnectionUncheckedUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    pairedWithId?: NullableStringFieldUpdateOperationsInput | string | null
    memories?: MemoryUncheckedUpdateManyWithoutConnectionNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutConnectionNestedInput
    goals?: GoalUncheckedUpdateManyWithoutConnectionNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutConnectionNestedInput
    tree?: TreeUncheckedUpdateOneWithoutConnectionNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutConnectionNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutConnectionNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutConnectionNestedInput
  }

  export type UserCreateWithoutSpecialDaysInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionCreateNestedManyWithoutPairedWithInput
    memories?: MemoryCreateNestedManyWithoutUserInput
    notes?: NoteCreateNestedManyWithoutAuthorInput
    goals?: GoalCreateNestedManyWithoutUserInput
    dreams?: DreamCreateNestedManyWithoutUserInput
    comments?: DreamCommentCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    surprises?: SurpriseCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSpecialDaysInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionUncheckedCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionUncheckedCreateNestedManyWithoutPairedWithInput
    memories?: MemoryUncheckedCreateNestedManyWithoutUserInput
    notes?: NoteUncheckedCreateNestedManyWithoutAuthorInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    dreams?: DreamUncheckedCreateNestedManyWithoutUserInput
    comments?: DreamCommentUncheckedCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSpecialDaysInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSpecialDaysInput, UserUncheckedCreateWithoutSpecialDaysInput>
  }

  export type ConnectionCreateWithoutSpecialDaysInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConnectionsInput
    pairedWith?: UserCreateNestedOneWithoutPairedWithInput
    memories?: MemoryCreateNestedManyWithoutConnectionInput
    notes?: NoteCreateNestedManyWithoutConnectionInput
    goals?: GoalCreateNestedManyWithoutConnectionInput
    dreams?: DreamCreateNestedManyWithoutConnectionInput
    tree?: TreeCreateNestedOneWithoutConnectionInput
    surprises?: SurpriseCreateNestedManyWithoutConnectionInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutConnectionInput
    chatMessages?: ChatMessageCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionUncheckedCreateWithoutSpecialDaysInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    pairedWithId?: string | null
    memories?: MemoryUncheckedCreateNestedManyWithoutConnectionInput
    notes?: NoteUncheckedCreateNestedManyWithoutConnectionInput
    goals?: GoalUncheckedCreateNestedManyWithoutConnectionInput
    dreams?: DreamUncheckedCreateNestedManyWithoutConnectionInput
    tree?: TreeUncheckedCreateNestedOneWithoutConnectionInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutConnectionInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutConnectionInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionCreateOrConnectWithoutSpecialDaysInput = {
    where: ConnectionWhereUniqueInput
    create: XOR<ConnectionCreateWithoutSpecialDaysInput, ConnectionUncheckedCreateWithoutSpecialDaysInput>
  }

  export type UserUpsertWithoutSpecialDaysInput = {
    update: XOR<UserUpdateWithoutSpecialDaysInput, UserUncheckedUpdateWithoutSpecialDaysInput>
    create: XOR<UserCreateWithoutSpecialDaysInput, UserUncheckedCreateWithoutSpecialDaysInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSpecialDaysInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSpecialDaysInput, UserUncheckedUpdateWithoutSpecialDaysInput>
  }

  export type UserUpdateWithoutSpecialDaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUpdateManyWithoutUserNestedInput
    notes?: NoteUpdateManyWithoutAuthorNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    dreams?: DreamUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSpecialDaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUncheckedUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUncheckedUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUncheckedUpdateManyWithoutUserNestedInput
    notes?: NoteUncheckedUpdateManyWithoutAuthorNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUncheckedUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ConnectionUpsertWithoutSpecialDaysInput = {
    update: XOR<ConnectionUpdateWithoutSpecialDaysInput, ConnectionUncheckedUpdateWithoutSpecialDaysInput>
    create: XOR<ConnectionCreateWithoutSpecialDaysInput, ConnectionUncheckedCreateWithoutSpecialDaysInput>
    where?: ConnectionWhereInput
  }

  export type ConnectionUpdateToOneWithWhereWithoutSpecialDaysInput = {
    where?: ConnectionWhereInput
    data: XOR<ConnectionUpdateWithoutSpecialDaysInput, ConnectionUncheckedUpdateWithoutSpecialDaysInput>
  }

  export type ConnectionUpdateWithoutSpecialDaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConnectionsNestedInput
    pairedWith?: UserUpdateOneWithoutPairedWithNestedInput
    memories?: MemoryUpdateManyWithoutConnectionNestedInput
    notes?: NoteUpdateManyWithoutConnectionNestedInput
    goals?: GoalUpdateManyWithoutConnectionNestedInput
    dreams?: DreamUpdateManyWithoutConnectionNestedInput
    tree?: TreeUpdateOneWithoutConnectionNestedInput
    surprises?: SurpriseUpdateManyWithoutConnectionNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutConnectionNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutConnectionNestedInput
  }

  export type ConnectionUncheckedUpdateWithoutSpecialDaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    pairedWithId?: NullableStringFieldUpdateOperationsInput | string | null
    memories?: MemoryUncheckedUpdateManyWithoutConnectionNestedInput
    notes?: NoteUncheckedUpdateManyWithoutConnectionNestedInput
    goals?: GoalUncheckedUpdateManyWithoutConnectionNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutConnectionNestedInput
    tree?: TreeUncheckedUpdateOneWithoutConnectionNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutConnectionNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutConnectionNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutConnectionNestedInput
  }

  export type UserCreateWithoutGoalsInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionCreateNestedManyWithoutPairedWithInput
    memories?: MemoryCreateNestedManyWithoutUserInput
    notes?: NoteCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayCreateNestedManyWithoutUserInput
    dreams?: DreamCreateNestedManyWithoutUserInput
    comments?: DreamCommentCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    surprises?: SurpriseCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGoalsInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionUncheckedCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionUncheckedCreateNestedManyWithoutPairedWithInput
    memories?: MemoryUncheckedCreateNestedManyWithoutUserInput
    notes?: NoteUncheckedCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutUserInput
    dreams?: DreamUncheckedCreateNestedManyWithoutUserInput
    comments?: DreamCommentUncheckedCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGoalsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGoalsInput, UserUncheckedCreateWithoutGoalsInput>
  }

  export type ConnectionCreateWithoutGoalsInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConnectionsInput
    pairedWith?: UserCreateNestedOneWithoutPairedWithInput
    memories?: MemoryCreateNestedManyWithoutConnectionInput
    notes?: NoteCreateNestedManyWithoutConnectionInput
    specialDays?: SpecialDayCreateNestedManyWithoutConnectionInput
    dreams?: DreamCreateNestedManyWithoutConnectionInput
    tree?: TreeCreateNestedOneWithoutConnectionInput
    surprises?: SurpriseCreateNestedManyWithoutConnectionInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutConnectionInput
    chatMessages?: ChatMessageCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionUncheckedCreateWithoutGoalsInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    pairedWithId?: string | null
    memories?: MemoryUncheckedCreateNestedManyWithoutConnectionInput
    notes?: NoteUncheckedCreateNestedManyWithoutConnectionInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutConnectionInput
    dreams?: DreamUncheckedCreateNestedManyWithoutConnectionInput
    tree?: TreeUncheckedCreateNestedOneWithoutConnectionInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutConnectionInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutConnectionInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionCreateOrConnectWithoutGoalsInput = {
    where: ConnectionWhereUniqueInput
    create: XOR<ConnectionCreateWithoutGoalsInput, ConnectionUncheckedCreateWithoutGoalsInput>
  }

  export type UserUpsertWithoutGoalsInput = {
    update: XOR<UserUpdateWithoutGoalsInput, UserUncheckedUpdateWithoutGoalsInput>
    create: XOR<UserCreateWithoutGoalsInput, UserUncheckedCreateWithoutGoalsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGoalsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGoalsInput, UserUncheckedUpdateWithoutGoalsInput>
  }

  export type UserUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUpdateManyWithoutUserNestedInput
    notes?: NoteUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUpdateManyWithoutUserNestedInput
    dreams?: DreamUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUncheckedUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUncheckedUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUncheckedUpdateManyWithoutUserNestedInput
    notes?: NoteUncheckedUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutUserNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUncheckedUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ConnectionUpsertWithoutGoalsInput = {
    update: XOR<ConnectionUpdateWithoutGoalsInput, ConnectionUncheckedUpdateWithoutGoalsInput>
    create: XOR<ConnectionCreateWithoutGoalsInput, ConnectionUncheckedCreateWithoutGoalsInput>
    where?: ConnectionWhereInput
  }

  export type ConnectionUpdateToOneWithWhereWithoutGoalsInput = {
    where?: ConnectionWhereInput
    data: XOR<ConnectionUpdateWithoutGoalsInput, ConnectionUncheckedUpdateWithoutGoalsInput>
  }

  export type ConnectionUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConnectionsNestedInput
    pairedWith?: UserUpdateOneWithoutPairedWithNestedInput
    memories?: MemoryUpdateManyWithoutConnectionNestedInput
    notes?: NoteUpdateManyWithoutConnectionNestedInput
    specialDays?: SpecialDayUpdateManyWithoutConnectionNestedInput
    dreams?: DreamUpdateManyWithoutConnectionNestedInput
    tree?: TreeUpdateOneWithoutConnectionNestedInput
    surprises?: SurpriseUpdateManyWithoutConnectionNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutConnectionNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutConnectionNestedInput
  }

  export type ConnectionUncheckedUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    pairedWithId?: NullableStringFieldUpdateOperationsInput | string | null
    memories?: MemoryUncheckedUpdateManyWithoutConnectionNestedInput
    notes?: NoteUncheckedUpdateManyWithoutConnectionNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutConnectionNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutConnectionNestedInput
    tree?: TreeUncheckedUpdateOneWithoutConnectionNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutConnectionNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutConnectionNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutConnectionNestedInput
  }

  export type UserCreateWithoutDreamsInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionCreateNestedManyWithoutPairedWithInput
    memories?: MemoryCreateNestedManyWithoutUserInput
    notes?: NoteCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    comments?: DreamCommentCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    surprises?: SurpriseCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDreamsInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionUncheckedCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionUncheckedCreateNestedManyWithoutPairedWithInput
    memories?: MemoryUncheckedCreateNestedManyWithoutUserInput
    notes?: NoteUncheckedCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    comments?: DreamCommentUncheckedCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDreamsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDreamsInput, UserUncheckedCreateWithoutDreamsInput>
  }

  export type ConnectionCreateWithoutDreamsInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConnectionsInput
    pairedWith?: UserCreateNestedOneWithoutPairedWithInput
    memories?: MemoryCreateNestedManyWithoutConnectionInput
    notes?: NoteCreateNestedManyWithoutConnectionInput
    specialDays?: SpecialDayCreateNestedManyWithoutConnectionInput
    goals?: GoalCreateNestedManyWithoutConnectionInput
    tree?: TreeCreateNestedOneWithoutConnectionInput
    surprises?: SurpriseCreateNestedManyWithoutConnectionInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutConnectionInput
    chatMessages?: ChatMessageCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionUncheckedCreateWithoutDreamsInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    pairedWithId?: string | null
    memories?: MemoryUncheckedCreateNestedManyWithoutConnectionInput
    notes?: NoteUncheckedCreateNestedManyWithoutConnectionInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutConnectionInput
    goals?: GoalUncheckedCreateNestedManyWithoutConnectionInput
    tree?: TreeUncheckedCreateNestedOneWithoutConnectionInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutConnectionInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutConnectionInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionCreateOrConnectWithoutDreamsInput = {
    where: ConnectionWhereUniqueInput
    create: XOR<ConnectionCreateWithoutDreamsInput, ConnectionUncheckedCreateWithoutDreamsInput>
  }

  export type DreamCommentCreateWithoutDreamInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type DreamCommentUncheckedCreateWithoutDreamInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type DreamCommentCreateOrConnectWithoutDreamInput = {
    where: DreamCommentWhereUniqueInput
    create: XOR<DreamCommentCreateWithoutDreamInput, DreamCommentUncheckedCreateWithoutDreamInput>
  }

  export type DreamCommentCreateManyDreamInputEnvelope = {
    data: DreamCommentCreateManyDreamInput | DreamCommentCreateManyDreamInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutDreamsInput = {
    update: XOR<UserUpdateWithoutDreamsInput, UserUncheckedUpdateWithoutDreamsInput>
    create: XOR<UserCreateWithoutDreamsInput, UserUncheckedCreateWithoutDreamsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDreamsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDreamsInput, UserUncheckedUpdateWithoutDreamsInput>
  }

  export type UserUpdateWithoutDreamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUpdateManyWithoutUserNestedInput
    notes?: NoteUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDreamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUncheckedUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUncheckedUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUncheckedUpdateManyWithoutUserNestedInput
    notes?: NoteUncheckedUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUncheckedUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ConnectionUpsertWithoutDreamsInput = {
    update: XOR<ConnectionUpdateWithoutDreamsInput, ConnectionUncheckedUpdateWithoutDreamsInput>
    create: XOR<ConnectionCreateWithoutDreamsInput, ConnectionUncheckedCreateWithoutDreamsInput>
    where?: ConnectionWhereInput
  }

  export type ConnectionUpdateToOneWithWhereWithoutDreamsInput = {
    where?: ConnectionWhereInput
    data: XOR<ConnectionUpdateWithoutDreamsInput, ConnectionUncheckedUpdateWithoutDreamsInput>
  }

  export type ConnectionUpdateWithoutDreamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConnectionsNestedInput
    pairedWith?: UserUpdateOneWithoutPairedWithNestedInput
    memories?: MemoryUpdateManyWithoutConnectionNestedInput
    notes?: NoteUpdateManyWithoutConnectionNestedInput
    specialDays?: SpecialDayUpdateManyWithoutConnectionNestedInput
    goals?: GoalUpdateManyWithoutConnectionNestedInput
    tree?: TreeUpdateOneWithoutConnectionNestedInput
    surprises?: SurpriseUpdateManyWithoutConnectionNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutConnectionNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutConnectionNestedInput
  }

  export type ConnectionUncheckedUpdateWithoutDreamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    pairedWithId?: NullableStringFieldUpdateOperationsInput | string | null
    memories?: MemoryUncheckedUpdateManyWithoutConnectionNestedInput
    notes?: NoteUncheckedUpdateManyWithoutConnectionNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutConnectionNestedInput
    goals?: GoalUncheckedUpdateManyWithoutConnectionNestedInput
    tree?: TreeUncheckedUpdateOneWithoutConnectionNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutConnectionNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutConnectionNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutConnectionNestedInput
  }

  export type DreamCommentUpsertWithWhereUniqueWithoutDreamInput = {
    where: DreamCommentWhereUniqueInput
    update: XOR<DreamCommentUpdateWithoutDreamInput, DreamCommentUncheckedUpdateWithoutDreamInput>
    create: XOR<DreamCommentCreateWithoutDreamInput, DreamCommentUncheckedCreateWithoutDreamInput>
  }

  export type DreamCommentUpdateWithWhereUniqueWithoutDreamInput = {
    where: DreamCommentWhereUniqueInput
    data: XOR<DreamCommentUpdateWithoutDreamInput, DreamCommentUncheckedUpdateWithoutDreamInput>
  }

  export type DreamCommentUpdateManyWithWhereWithoutDreamInput = {
    where: DreamCommentScalarWhereInput
    data: XOR<DreamCommentUpdateManyMutationInput, DreamCommentUncheckedUpdateManyWithoutDreamInput>
  }

  export type DreamCreateWithoutCommentsInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    linkUrl?: string | null
    category?: $Enums.DreamCategory
    position?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDreamsInput
    connection: ConnectionCreateNestedOneWithoutDreamsInput
  }

  export type DreamUncheckedCreateWithoutCommentsInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    linkUrl?: string | null
    category?: $Enums.DreamCategory
    position?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    connectionId: string
  }

  export type DreamCreateOrConnectWithoutCommentsInput = {
    where: DreamWhereUniqueInput
    create: XOR<DreamCreateWithoutCommentsInput, DreamUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutCommentsInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionCreateNestedManyWithoutPairedWithInput
    memories?: MemoryCreateNestedManyWithoutUserInput
    notes?: NoteCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    dreams?: DreamCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    surprises?: SurpriseCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionUncheckedCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionUncheckedCreateNestedManyWithoutPairedWithInput
    memories?: MemoryUncheckedCreateNestedManyWithoutUserInput
    notes?: NoteUncheckedCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    dreams?: DreamUncheckedCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type DreamUpsertWithoutCommentsInput = {
    update: XOR<DreamUpdateWithoutCommentsInput, DreamUncheckedUpdateWithoutCommentsInput>
    create: XOR<DreamCreateWithoutCommentsInput, DreamUncheckedCreateWithoutCommentsInput>
    where?: DreamWhereInput
  }

  export type DreamUpdateToOneWithWhereWithoutCommentsInput = {
    where?: DreamWhereInput
    data: XOR<DreamUpdateWithoutCommentsInput, DreamUncheckedUpdateWithoutCommentsInput>
  }

  export type DreamUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumDreamCategoryFieldUpdateOperationsInput | $Enums.DreamCategory
    position?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDreamsNestedInput
    connection?: ConnectionUpdateOneRequiredWithoutDreamsNestedInput
  }

  export type DreamUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumDreamCategoryFieldUpdateOperationsInput | $Enums.DreamCategory
    position?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUpdateManyWithoutUserNestedInput
    notes?: NoteUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    dreams?: DreamUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUncheckedUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUncheckedUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUncheckedUpdateManyWithoutUserNestedInput
    notes?: NoteUncheckedUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSurprisesInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionCreateNestedManyWithoutPairedWithInput
    memories?: MemoryCreateNestedManyWithoutUserInput
    notes?: NoteCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    dreams?: DreamCreateNestedManyWithoutUserInput
    comments?: DreamCommentCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSurprisesInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionUncheckedCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionUncheckedCreateNestedManyWithoutPairedWithInput
    memories?: MemoryUncheckedCreateNestedManyWithoutUserInput
    notes?: NoteUncheckedCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    dreams?: DreamUncheckedCreateNestedManyWithoutUserInput
    comments?: DreamCommentUncheckedCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSurprisesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSurprisesInput, UserUncheckedCreateWithoutSurprisesInput>
  }

  export type ConnectionCreateWithoutSurprisesInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConnectionsInput
    pairedWith?: UserCreateNestedOneWithoutPairedWithInput
    memories?: MemoryCreateNestedManyWithoutConnectionInput
    notes?: NoteCreateNestedManyWithoutConnectionInput
    specialDays?: SpecialDayCreateNestedManyWithoutConnectionInput
    goals?: GoalCreateNestedManyWithoutConnectionInput
    dreams?: DreamCreateNestedManyWithoutConnectionInput
    tree?: TreeCreateNestedOneWithoutConnectionInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutConnectionInput
    chatMessages?: ChatMessageCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionUncheckedCreateWithoutSurprisesInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    pairedWithId?: string | null
    memories?: MemoryUncheckedCreateNestedManyWithoutConnectionInput
    notes?: NoteUncheckedCreateNestedManyWithoutConnectionInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutConnectionInput
    goals?: GoalUncheckedCreateNestedManyWithoutConnectionInput
    dreams?: DreamUncheckedCreateNestedManyWithoutConnectionInput
    tree?: TreeUncheckedCreateNestedOneWithoutConnectionInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutConnectionInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionCreateOrConnectWithoutSurprisesInput = {
    where: ConnectionWhereUniqueInput
    create: XOR<ConnectionCreateWithoutSurprisesInput, ConnectionUncheckedCreateWithoutSurprisesInput>
  }

  export type UserUpsertWithoutSurprisesInput = {
    update: XOR<UserUpdateWithoutSurprisesInput, UserUncheckedUpdateWithoutSurprisesInput>
    create: XOR<UserCreateWithoutSurprisesInput, UserUncheckedCreateWithoutSurprisesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSurprisesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSurprisesInput, UserUncheckedUpdateWithoutSurprisesInput>
  }

  export type UserUpdateWithoutSurprisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUpdateManyWithoutUserNestedInput
    notes?: NoteUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    dreams?: DreamUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSurprisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUncheckedUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUncheckedUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUncheckedUpdateManyWithoutUserNestedInput
    notes?: NoteUncheckedUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUncheckedUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ConnectionUpsertWithoutSurprisesInput = {
    update: XOR<ConnectionUpdateWithoutSurprisesInput, ConnectionUncheckedUpdateWithoutSurprisesInput>
    create: XOR<ConnectionCreateWithoutSurprisesInput, ConnectionUncheckedCreateWithoutSurprisesInput>
    where?: ConnectionWhereInput
  }

  export type ConnectionUpdateToOneWithWhereWithoutSurprisesInput = {
    where?: ConnectionWhereInput
    data: XOR<ConnectionUpdateWithoutSurprisesInput, ConnectionUncheckedUpdateWithoutSurprisesInput>
  }

  export type ConnectionUpdateWithoutSurprisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConnectionsNestedInput
    pairedWith?: UserUpdateOneWithoutPairedWithNestedInput
    memories?: MemoryUpdateManyWithoutConnectionNestedInput
    notes?: NoteUpdateManyWithoutConnectionNestedInput
    specialDays?: SpecialDayUpdateManyWithoutConnectionNestedInput
    goals?: GoalUpdateManyWithoutConnectionNestedInput
    dreams?: DreamUpdateManyWithoutConnectionNestedInput
    tree?: TreeUpdateOneWithoutConnectionNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutConnectionNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutConnectionNestedInput
  }

  export type ConnectionUncheckedUpdateWithoutSurprisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    pairedWithId?: NullableStringFieldUpdateOperationsInput | string | null
    memories?: MemoryUncheckedUpdateManyWithoutConnectionNestedInput
    notes?: NoteUncheckedUpdateManyWithoutConnectionNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutConnectionNestedInput
    goals?: GoalUncheckedUpdateManyWithoutConnectionNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutConnectionNestedInput
    tree?: TreeUncheckedUpdateOneWithoutConnectionNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutConnectionNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutConnectionNestedInput
  }

  export type UserCreateWithoutTimeCapsulesInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionCreateNestedManyWithoutPairedWithInput
    memories?: MemoryCreateNestedManyWithoutUserInput
    notes?: NoteCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    dreams?: DreamCreateNestedManyWithoutUserInput
    comments?: DreamCommentCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    surprises?: SurpriseCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTimeCapsulesInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionUncheckedCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionUncheckedCreateNestedManyWithoutPairedWithInput
    memories?: MemoryUncheckedCreateNestedManyWithoutUserInput
    notes?: NoteUncheckedCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    dreams?: DreamUncheckedCreateNestedManyWithoutUserInput
    comments?: DreamCommentUncheckedCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTimeCapsulesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTimeCapsulesInput, UserUncheckedCreateWithoutTimeCapsulesInput>
  }

  export type ConnectionCreateWithoutTimeCapsulesInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConnectionsInput
    pairedWith?: UserCreateNestedOneWithoutPairedWithInput
    memories?: MemoryCreateNestedManyWithoutConnectionInput
    notes?: NoteCreateNestedManyWithoutConnectionInput
    specialDays?: SpecialDayCreateNestedManyWithoutConnectionInput
    goals?: GoalCreateNestedManyWithoutConnectionInput
    dreams?: DreamCreateNestedManyWithoutConnectionInput
    tree?: TreeCreateNestedOneWithoutConnectionInput
    surprises?: SurpriseCreateNestedManyWithoutConnectionInput
    chatMessages?: ChatMessageCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionUncheckedCreateWithoutTimeCapsulesInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    pairedWithId?: string | null
    memories?: MemoryUncheckedCreateNestedManyWithoutConnectionInput
    notes?: NoteUncheckedCreateNestedManyWithoutConnectionInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutConnectionInput
    goals?: GoalUncheckedCreateNestedManyWithoutConnectionInput
    dreams?: DreamUncheckedCreateNestedManyWithoutConnectionInput
    tree?: TreeUncheckedCreateNestedOneWithoutConnectionInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutConnectionInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionCreateOrConnectWithoutTimeCapsulesInput = {
    where: ConnectionWhereUniqueInput
    create: XOR<ConnectionCreateWithoutTimeCapsulesInput, ConnectionUncheckedCreateWithoutTimeCapsulesInput>
  }

  export type TimeCapsuleCommentCreateWithoutTimeCapsuleInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTimeCapsuleCommentsInput
  }

  export type TimeCapsuleCommentUncheckedCreateWithoutTimeCapsuleInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type TimeCapsuleCommentCreateOrConnectWithoutTimeCapsuleInput = {
    where: TimeCapsuleCommentWhereUniqueInput
    create: XOR<TimeCapsuleCommentCreateWithoutTimeCapsuleInput, TimeCapsuleCommentUncheckedCreateWithoutTimeCapsuleInput>
  }

  export type TimeCapsuleCommentCreateManyTimeCapsuleInputEnvelope = {
    data: TimeCapsuleCommentCreateManyTimeCapsuleInput | TimeCapsuleCommentCreateManyTimeCapsuleInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutTimeCapsulesInput = {
    update: XOR<UserUpdateWithoutTimeCapsulesInput, UserUncheckedUpdateWithoutTimeCapsulesInput>
    create: XOR<UserCreateWithoutTimeCapsulesInput, UserUncheckedCreateWithoutTimeCapsulesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTimeCapsulesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTimeCapsulesInput, UserUncheckedUpdateWithoutTimeCapsulesInput>
  }

  export type UserUpdateWithoutTimeCapsulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUpdateManyWithoutUserNestedInput
    notes?: NoteUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    dreams?: DreamUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTimeCapsulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUncheckedUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUncheckedUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUncheckedUpdateManyWithoutUserNestedInput
    notes?: NoteUncheckedUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUncheckedUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ConnectionUpsertWithoutTimeCapsulesInput = {
    update: XOR<ConnectionUpdateWithoutTimeCapsulesInput, ConnectionUncheckedUpdateWithoutTimeCapsulesInput>
    create: XOR<ConnectionCreateWithoutTimeCapsulesInput, ConnectionUncheckedCreateWithoutTimeCapsulesInput>
    where?: ConnectionWhereInput
  }

  export type ConnectionUpdateToOneWithWhereWithoutTimeCapsulesInput = {
    where?: ConnectionWhereInput
    data: XOR<ConnectionUpdateWithoutTimeCapsulesInput, ConnectionUncheckedUpdateWithoutTimeCapsulesInput>
  }

  export type ConnectionUpdateWithoutTimeCapsulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConnectionsNestedInput
    pairedWith?: UserUpdateOneWithoutPairedWithNestedInput
    memories?: MemoryUpdateManyWithoutConnectionNestedInput
    notes?: NoteUpdateManyWithoutConnectionNestedInput
    specialDays?: SpecialDayUpdateManyWithoutConnectionNestedInput
    goals?: GoalUpdateManyWithoutConnectionNestedInput
    dreams?: DreamUpdateManyWithoutConnectionNestedInput
    tree?: TreeUpdateOneWithoutConnectionNestedInput
    surprises?: SurpriseUpdateManyWithoutConnectionNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutConnectionNestedInput
  }

  export type ConnectionUncheckedUpdateWithoutTimeCapsulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    pairedWithId?: NullableStringFieldUpdateOperationsInput | string | null
    memories?: MemoryUncheckedUpdateManyWithoutConnectionNestedInput
    notes?: NoteUncheckedUpdateManyWithoutConnectionNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutConnectionNestedInput
    goals?: GoalUncheckedUpdateManyWithoutConnectionNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutConnectionNestedInput
    tree?: TreeUncheckedUpdateOneWithoutConnectionNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutConnectionNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutConnectionNestedInput
  }

  export type TimeCapsuleCommentUpsertWithWhereUniqueWithoutTimeCapsuleInput = {
    where: TimeCapsuleCommentWhereUniqueInput
    update: XOR<TimeCapsuleCommentUpdateWithoutTimeCapsuleInput, TimeCapsuleCommentUncheckedUpdateWithoutTimeCapsuleInput>
    create: XOR<TimeCapsuleCommentCreateWithoutTimeCapsuleInput, TimeCapsuleCommentUncheckedCreateWithoutTimeCapsuleInput>
  }

  export type TimeCapsuleCommentUpdateWithWhereUniqueWithoutTimeCapsuleInput = {
    where: TimeCapsuleCommentWhereUniqueInput
    data: XOR<TimeCapsuleCommentUpdateWithoutTimeCapsuleInput, TimeCapsuleCommentUncheckedUpdateWithoutTimeCapsuleInput>
  }

  export type TimeCapsuleCommentUpdateManyWithWhereWithoutTimeCapsuleInput = {
    where: TimeCapsuleCommentScalarWhereInput
    data: XOR<TimeCapsuleCommentUpdateManyMutationInput, TimeCapsuleCommentUncheckedUpdateManyWithoutTimeCapsuleInput>
  }

  export type TimeCapsuleCreateWithoutCommentsInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    openDate: Date | string
    isOpened?: boolean
    openedAt?: Date | string | null
    user: UserCreateNestedOneWithoutTimeCapsulesInput
    connection: ConnectionCreateNestedOneWithoutTimeCapsulesInput
  }

  export type TimeCapsuleUncheckedCreateWithoutCommentsInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    openDate: Date | string
    isOpened?: boolean
    openedAt?: Date | string | null
    userId: string
    connectionId: string
  }

  export type TimeCapsuleCreateOrConnectWithoutCommentsInput = {
    where: TimeCapsuleWhereUniqueInput
    create: XOR<TimeCapsuleCreateWithoutCommentsInput, TimeCapsuleUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutTimeCapsuleCommentsInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionCreateNestedManyWithoutPairedWithInput
    memories?: MemoryCreateNestedManyWithoutUserInput
    notes?: NoteCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    dreams?: DreamCreateNestedManyWithoutUserInput
    comments?: DreamCommentCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    surprises?: SurpriseCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTimeCapsuleCommentsInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionUncheckedCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionUncheckedCreateNestedManyWithoutPairedWithInput
    memories?: MemoryUncheckedCreateNestedManyWithoutUserInput
    notes?: NoteUncheckedCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    dreams?: DreamUncheckedCreateNestedManyWithoutUserInput
    comments?: DreamCommentUncheckedCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTimeCapsuleCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTimeCapsuleCommentsInput, UserUncheckedCreateWithoutTimeCapsuleCommentsInput>
  }

  export type TimeCapsuleUpsertWithoutCommentsInput = {
    update: XOR<TimeCapsuleUpdateWithoutCommentsInput, TimeCapsuleUncheckedUpdateWithoutCommentsInput>
    create: XOR<TimeCapsuleCreateWithoutCommentsInput, TimeCapsuleUncheckedCreateWithoutCommentsInput>
    where?: TimeCapsuleWhereInput
  }

  export type TimeCapsuleUpdateToOneWithWhereWithoutCommentsInput = {
    where?: TimeCapsuleWhereInput
    data: XOR<TimeCapsuleUpdateWithoutCommentsInput, TimeCapsuleUncheckedUpdateWithoutCommentsInput>
  }

  export type TimeCapsuleUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutTimeCapsulesNestedInput
    connection?: ConnectionUpdateOneRequiredWithoutTimeCapsulesNestedInput
  }

  export type TimeCapsuleUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutTimeCapsuleCommentsInput = {
    update: XOR<UserUpdateWithoutTimeCapsuleCommentsInput, UserUncheckedUpdateWithoutTimeCapsuleCommentsInput>
    create: XOR<UserCreateWithoutTimeCapsuleCommentsInput, UserUncheckedCreateWithoutTimeCapsuleCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTimeCapsuleCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTimeCapsuleCommentsInput, UserUncheckedUpdateWithoutTimeCapsuleCommentsInput>
  }

  export type UserUpdateWithoutTimeCapsuleCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUpdateManyWithoutUserNestedInput
    notes?: NoteUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    dreams?: DreamUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTimeCapsuleCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUncheckedUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUncheckedUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUncheckedUpdateManyWithoutUserNestedInput
    notes?: NoteUncheckedUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUncheckedUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutChatMessagesInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionCreateNestedManyWithoutPairedWithInput
    memories?: MemoryCreateNestedManyWithoutUserInput
    notes?: NoteCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayCreateNestedManyWithoutUserInput
    goals?: GoalCreateNestedManyWithoutUserInput
    dreams?: DreamCreateNestedManyWithoutUserInput
    comments?: DreamCommentCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationCreateNestedManyWithoutUserInput
    surprises?: SurpriseCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutChatMessagesInput = {
    id?: string
    email: string
    name?: string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: $Enums.UserRole
    fcmToken?: string | null
    connections?: ConnectionUncheckedCreateNestedManyWithoutUserInput
    pairedWith?: ConnectionUncheckedCreateNestedManyWithoutPairedWithInput
    memories?: MemoryUncheckedCreateNestedManyWithoutUserInput
    notes?: NoteUncheckedCreateNestedManyWithoutAuthorInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutUserInput
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    dreams?: DreamUncheckedCreateNestedManyWithoutUserInput
    comments?: DreamCommentUncheckedCreateNestedManyWithoutUserInput
    receivedNotifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutUserInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutUserInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutChatMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
  }

  export type ConnectionCreateWithoutChatMessagesInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConnectionsInput
    pairedWith?: UserCreateNestedOneWithoutPairedWithInput
    memories?: MemoryCreateNestedManyWithoutConnectionInput
    notes?: NoteCreateNestedManyWithoutConnectionInput
    specialDays?: SpecialDayCreateNestedManyWithoutConnectionInput
    goals?: GoalCreateNestedManyWithoutConnectionInput
    dreams?: DreamCreateNestedManyWithoutConnectionInput
    tree?: TreeCreateNestedOneWithoutConnectionInput
    surprises?: SurpriseCreateNestedManyWithoutConnectionInput
    timeCapsules?: TimeCapsuleCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionUncheckedCreateWithoutChatMessagesInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    pairedWithId?: string | null
    memories?: MemoryUncheckedCreateNestedManyWithoutConnectionInput
    notes?: NoteUncheckedCreateNestedManyWithoutConnectionInput
    specialDays?: SpecialDayUncheckedCreateNestedManyWithoutConnectionInput
    goals?: GoalUncheckedCreateNestedManyWithoutConnectionInput
    dreams?: DreamUncheckedCreateNestedManyWithoutConnectionInput
    tree?: TreeUncheckedCreateNestedOneWithoutConnectionInput
    surprises?: SurpriseUncheckedCreateNestedManyWithoutConnectionInput
    timeCapsules?: TimeCapsuleUncheckedCreateNestedManyWithoutConnectionInput
  }

  export type ConnectionCreateOrConnectWithoutChatMessagesInput = {
    where: ConnectionWhereUniqueInput
    create: XOR<ConnectionCreateWithoutChatMessagesInput, ConnectionUncheckedCreateWithoutChatMessagesInput>
  }

  export type UserUpsertWithoutChatMessagesInput = {
    update: XOR<UserUpdateWithoutChatMessagesInput, UserUncheckedUpdateWithoutChatMessagesInput>
    create: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChatMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChatMessagesInput, UserUncheckedUpdateWithoutChatMessagesInput>
  }

  export type UserUpdateWithoutChatMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUpdateManyWithoutUserNestedInput
    notes?: NoteUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUpdateManyWithoutUserNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    dreams?: DreamUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutChatMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    connections?: ConnectionUncheckedUpdateManyWithoutUserNestedInput
    pairedWith?: ConnectionUncheckedUpdateManyWithoutPairedWithNestedInput
    memories?: MemoryUncheckedUpdateManyWithoutUserNestedInput
    notes?: NoteUncheckedUpdateManyWithoutAuthorNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutUserNestedInput
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutUserNestedInput
    comments?: DreamCommentUncheckedUpdateManyWithoutUserNestedInput
    receivedNotifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutUserNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutUserNestedInput
    timeCapsuleComments?: TimeCapsuleCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ConnectionUpsertWithoutChatMessagesInput = {
    update: XOR<ConnectionUpdateWithoutChatMessagesInput, ConnectionUncheckedUpdateWithoutChatMessagesInput>
    create: XOR<ConnectionCreateWithoutChatMessagesInput, ConnectionUncheckedCreateWithoutChatMessagesInput>
    where?: ConnectionWhereInput
  }

  export type ConnectionUpdateToOneWithWhereWithoutChatMessagesInput = {
    where?: ConnectionWhereInput
    data: XOR<ConnectionUpdateWithoutChatMessagesInput, ConnectionUncheckedUpdateWithoutChatMessagesInput>
  }

  export type ConnectionUpdateWithoutChatMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConnectionsNestedInput
    pairedWith?: UserUpdateOneWithoutPairedWithNestedInput
    memories?: MemoryUpdateManyWithoutConnectionNestedInput
    notes?: NoteUpdateManyWithoutConnectionNestedInput
    specialDays?: SpecialDayUpdateManyWithoutConnectionNestedInput
    goals?: GoalUpdateManyWithoutConnectionNestedInput
    dreams?: DreamUpdateManyWithoutConnectionNestedInput
    tree?: TreeUpdateOneWithoutConnectionNestedInput
    surprises?: SurpriseUpdateManyWithoutConnectionNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutConnectionNestedInput
  }

  export type ConnectionUncheckedUpdateWithoutChatMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    pairedWithId?: NullableStringFieldUpdateOperationsInput | string | null
    memories?: MemoryUncheckedUpdateManyWithoutConnectionNestedInput
    notes?: NoteUncheckedUpdateManyWithoutConnectionNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutConnectionNestedInput
    goals?: GoalUncheckedUpdateManyWithoutConnectionNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutConnectionNestedInput
    tree?: TreeUncheckedUpdateOneWithoutConnectionNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutConnectionNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutConnectionNestedInput
  }

  export type ConnectionCreateManyUserInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    pairedWithId?: string | null
  }

  export type ConnectionCreateManyPairedWithInput = {
    id?: string
    connectionCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type MemoryCreateManyUserInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    connectionId: string
  }

  export type NoteCreateManyAuthorInput = {
    id?: string
    title: string
    content: string
    isTemporary?: boolean
    expiresAt?: Date | string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    connectionId: string
  }

  export type SpecialDayCreateManyUserInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    isRecurring?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isConfirmed?: boolean
    confirmedAt?: Date | string | null
    confirmedById?: string | null
    connectionId: string
  }

  export type GoalCreateManyUserInput = {
    id?: string
    title: string
    description?: string | null
    isCompleted?: boolean
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    connectionId: string
  }

  export type DreamCreateManyUserInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    linkUrl?: string | null
    category?: $Enums.DreamCategory
    position?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    connectionId: string
  }

  export type DreamCommentCreateManyUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dreamId: string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    title: string
    body: string
    type: $Enums.NotificationType
    isRead?: boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    sentAt?: Date | string | null
  }

  export type SurpriseCreateManyUserInput = {
    id?: string
    imageUrl: string
    message?: string | null
    createdAt?: Date | string
    isSeenByAuthor?: boolean
    isSeenByPartner?: boolean
    connectionId: string
  }

  export type TimeCapsuleCreateManyUserInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    openDate: Date | string
    isOpened?: boolean
    openedAt?: Date | string | null
    connectionId: string
  }

  export type TimeCapsuleCommentCreateManyUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    timeCapsuleId: string
  }

  export type ChatMessageCreateManyUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isRead?: boolean
    connectionId: string
  }

  export type ConnectionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pairedWith?: UserUpdateOneWithoutPairedWithNestedInput
    memories?: MemoryUpdateManyWithoutConnectionNestedInput
    notes?: NoteUpdateManyWithoutConnectionNestedInput
    specialDays?: SpecialDayUpdateManyWithoutConnectionNestedInput
    goals?: GoalUpdateManyWithoutConnectionNestedInput
    dreams?: DreamUpdateManyWithoutConnectionNestedInput
    tree?: TreeUpdateOneWithoutConnectionNestedInput
    surprises?: SurpriseUpdateManyWithoutConnectionNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutConnectionNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutConnectionNestedInput
  }

  export type ConnectionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pairedWithId?: NullableStringFieldUpdateOperationsInput | string | null
    memories?: MemoryUncheckedUpdateManyWithoutConnectionNestedInput
    notes?: NoteUncheckedUpdateManyWithoutConnectionNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutConnectionNestedInput
    goals?: GoalUncheckedUpdateManyWithoutConnectionNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutConnectionNestedInput
    tree?: TreeUncheckedUpdateOneWithoutConnectionNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutConnectionNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutConnectionNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutConnectionNestedInput
  }

  export type ConnectionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pairedWithId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ConnectionUpdateWithoutPairedWithInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConnectionsNestedInput
    memories?: MemoryUpdateManyWithoutConnectionNestedInput
    notes?: NoteUpdateManyWithoutConnectionNestedInput
    specialDays?: SpecialDayUpdateManyWithoutConnectionNestedInput
    goals?: GoalUpdateManyWithoutConnectionNestedInput
    dreams?: DreamUpdateManyWithoutConnectionNestedInput
    tree?: TreeUpdateOneWithoutConnectionNestedInput
    surprises?: SurpriseUpdateManyWithoutConnectionNestedInput
    timeCapsules?: TimeCapsuleUpdateManyWithoutConnectionNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutConnectionNestedInput
  }

  export type ConnectionUncheckedUpdateWithoutPairedWithInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    memories?: MemoryUncheckedUpdateManyWithoutConnectionNestedInput
    notes?: NoteUncheckedUpdateManyWithoutConnectionNestedInput
    specialDays?: SpecialDayUncheckedUpdateManyWithoutConnectionNestedInput
    goals?: GoalUncheckedUpdateManyWithoutConnectionNestedInput
    dreams?: DreamUncheckedUpdateManyWithoutConnectionNestedInput
    tree?: TreeUncheckedUpdateOneWithoutConnectionNestedInput
    surprises?: SurpriseUncheckedUpdateManyWithoutConnectionNestedInput
    timeCapsules?: TimeCapsuleUncheckedUpdateManyWithoutConnectionNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutConnectionNestedInput
  }

  export type ConnectionUncheckedUpdateManyWithoutPairedWithInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type MemoryUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    connection?: ConnectionUpdateOneRequiredWithoutMemoriesNestedInput
  }

  export type MemoryUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type MemoryUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type NoteUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isTemporary?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    connection?: ConnectionUpdateOneRequiredWithoutNotesNestedInput
  }

  export type NoteUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isTemporary?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type NoteUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isTemporary?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type SpecialDayUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedById?: NullableStringFieldUpdateOperationsInput | string | null
    connection?: ConnectionUpdateOneRequiredWithoutSpecialDaysNestedInput
  }

  export type SpecialDayUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedById?: NullableStringFieldUpdateOperationsInput | string | null
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type SpecialDayUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedById?: NullableStringFieldUpdateOperationsInput | string | null
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type GoalUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    connection?: ConnectionUpdateOneRequiredWithoutGoalsNestedInput
  }

  export type GoalUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type GoalUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type DreamUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumDreamCategoryFieldUpdateOperationsInput | $Enums.DreamCategory
    position?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    connection?: ConnectionUpdateOneRequiredWithoutDreamsNestedInput
    comments?: DreamCommentUpdateManyWithoutDreamNestedInput
  }

  export type DreamUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumDreamCategoryFieldUpdateOperationsInput | $Enums.DreamCategory
    position?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    connectionId?: StringFieldUpdateOperationsInput | string
    comments?: DreamCommentUncheckedUpdateManyWithoutDreamNestedInput
  }

  export type DreamUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumDreamCategoryFieldUpdateOperationsInput | $Enums.DreamCategory
    position?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type DreamCommentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dream?: DreamUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type DreamCommentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dreamId?: StringFieldUpdateOperationsInput | string
  }

  export type DreamCommentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dreamId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SurpriseUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSeenByAuthor?: BoolFieldUpdateOperationsInput | boolean
    isSeenByPartner?: BoolFieldUpdateOperationsInput | boolean
    connection?: ConnectionUpdateOneRequiredWithoutSurprisesNestedInput
  }

  export type SurpriseUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSeenByAuthor?: BoolFieldUpdateOperationsInput | boolean
    isSeenByPartner?: BoolFieldUpdateOperationsInput | boolean
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type SurpriseUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSeenByAuthor?: BoolFieldUpdateOperationsInput | boolean
    isSeenByPartner?: BoolFieldUpdateOperationsInput | boolean
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type TimeCapsuleUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    connection?: ConnectionUpdateOneRequiredWithoutTimeCapsulesNestedInput
    comments?: TimeCapsuleCommentUpdateManyWithoutTimeCapsuleNestedInput
  }

  export type TimeCapsuleUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    connectionId?: StringFieldUpdateOperationsInput | string
    comments?: TimeCapsuleCommentUncheckedUpdateManyWithoutTimeCapsuleNestedInput
  }

  export type TimeCapsuleUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type TimeCapsuleCommentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeCapsule?: TimeCapsuleUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type TimeCapsuleCommentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeCapsuleId?: StringFieldUpdateOperationsInput | string
  }

  export type TimeCapsuleCommentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeCapsuleId?: StringFieldUpdateOperationsInput | string
  }

  export type ChatMessageUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    connection?: ConnectionUpdateOneRequiredWithoutChatMessagesNestedInput
  }

  export type ChatMessageUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type ChatMessageUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    connectionId?: StringFieldUpdateOperationsInput | string
  }

  export type MemoryCreateManyConnectionInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type NoteCreateManyConnectionInput = {
    id?: string
    title: string
    content: string
    isTemporary?: boolean
    expiresAt?: Date | string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
  }

  export type SpecialDayCreateManyConnectionInput = {
    id?: string
    title: string
    description?: string | null
    date: Date | string
    isRecurring?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    isConfirmed?: boolean
    confirmedAt?: Date | string | null
    confirmedById?: string | null
    userId: string
  }

  export type GoalCreateManyConnectionInput = {
    id?: string
    title: string
    description?: string | null
    isCompleted?: boolean
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type DreamCreateManyConnectionInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    linkUrl?: string | null
    category?: $Enums.DreamCategory
    position?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type SurpriseCreateManyConnectionInput = {
    id?: string
    imageUrl: string
    message?: string | null
    createdAt?: Date | string
    isSeenByAuthor?: boolean
    isSeenByPartner?: boolean
    userId: string
  }

  export type TimeCapsuleCreateManyConnectionInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    openDate: Date | string
    isOpened?: boolean
    openedAt?: Date | string | null
    userId: string
  }

  export type ChatMessageCreateManyConnectionInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isRead?: boolean
    userId: string
  }

  export type MemoryUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMemoriesNestedInput
  }

  export type MemoryUncheckedUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type MemoryUncheckedUpdateManyWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type NoteUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isTemporary?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutNotesNestedInput
  }

  export type NoteUncheckedUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isTemporary?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type NoteUncheckedUpdateManyWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isTemporary?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type SpecialDayUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedById?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutSpecialDaysNestedInput
  }

  export type SpecialDayUncheckedUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedById?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SpecialDayUncheckedUpdateManyWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedById?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type GoalUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutGoalsNestedInput
  }

  export type GoalUncheckedUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type GoalUncheckedUpdateManyWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DreamUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumDreamCategoryFieldUpdateOperationsInput | $Enums.DreamCategory
    position?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDreamsNestedInput
    comments?: DreamCommentUpdateManyWithoutDreamNestedInput
  }

  export type DreamUncheckedUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumDreamCategoryFieldUpdateOperationsInput | $Enums.DreamCategory
    position?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    comments?: DreamCommentUncheckedUpdateManyWithoutDreamNestedInput
  }

  export type DreamUncheckedUpdateManyWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: EnumDreamCategoryFieldUpdateOperationsInput | $Enums.DreamCategory
    position?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SurpriseUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSeenByAuthor?: BoolFieldUpdateOperationsInput | boolean
    isSeenByPartner?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutSurprisesNestedInput
  }

  export type SurpriseUncheckedUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSeenByAuthor?: BoolFieldUpdateOperationsInput | boolean
    isSeenByPartner?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SurpriseUncheckedUpdateManyWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSeenByAuthor?: BoolFieldUpdateOperationsInput | boolean
    isSeenByPartner?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TimeCapsuleUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutTimeCapsulesNestedInput
    comments?: TimeCapsuleCommentUpdateManyWithoutTimeCapsuleNestedInput
  }

  export type TimeCapsuleUncheckedUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    comments?: TimeCapsuleCommentUncheckedUpdateManyWithoutTimeCapsuleNestedInput
  }

  export type TimeCapsuleUncheckedUpdateManyWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ChatMessageUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutChatMessagesNestedInput
  }

  export type ChatMessageUncheckedUpdateWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ChatMessageUncheckedUpdateManyWithoutConnectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DreamCommentCreateManyDreamInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type DreamCommentUpdateWithoutDreamInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type DreamCommentUncheckedUpdateWithoutDreamInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DreamCommentUncheckedUpdateManyWithoutDreamInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TimeCapsuleCommentCreateManyTimeCapsuleInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type TimeCapsuleCommentUpdateWithoutTimeCapsuleInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTimeCapsuleCommentsNestedInput
  }

  export type TimeCapsuleCommentUncheckedUpdateWithoutTimeCapsuleInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TimeCapsuleCommentUncheckedUpdateManyWithoutTimeCapsuleInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConnectionCountOutputTypeDefaultArgs instead
     */
    export type ConnectionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConnectionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DreamCountOutputTypeDefaultArgs instead
     */
    export type DreamCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DreamCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TimeCapsuleCountOutputTypeDefaultArgs instead
     */
    export type TimeCapsuleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TimeCapsuleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConnectionDefaultArgs instead
     */
    export type ConnectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConnectionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TreeDefaultArgs instead
     */
    export type TreeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TreeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MemoryDefaultArgs instead
     */
    export type MemoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MemoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NoteDefaultArgs instead
     */
    export type NoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NoteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SpecialDayDefaultArgs instead
     */
    export type SpecialDayArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SpecialDayDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GoalDefaultArgs instead
     */
    export type GoalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GoalDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DreamDefaultArgs instead
     */
    export type DreamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DreamDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DreamCommentDefaultArgs instead
     */
    export type DreamCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DreamCommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SurpriseDefaultArgs instead
     */
    export type SurpriseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SurpriseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TimeCapsuleDefaultArgs instead
     */
    export type TimeCapsuleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TimeCapsuleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TimeCapsuleCommentDefaultArgs instead
     */
    export type TimeCapsuleCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TimeCapsuleCommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatMessageDefaultArgs instead
     */
    export type ChatMessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatMessageDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}